/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.IntegrationsImportNewStartersListResponse;
import com.konfigthis.client.model.IntegrationsSendBonusesToVikarinaResponse;
import com.konfigthis.client.model.IntegrationsTransferAppointmentInfoResponse;
import com.konfigthis.client.model.IntegrationsTransferBankAccountInfoResponse;
import com.konfigthis.client.model.IntegrationsTransferContractInformationToVikarinaResponse;
import com.konfigthis.client.model.IntegrationsTransferJobPositionFromSageToVikarinaResponse;
import com.konfigthis.client.model.IntegrationsTransferLeaveInformationToVikarinaResponse;
import com.konfigthis.client.model.IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse;
import com.konfigthis.client.model.IntegrationsTransferSalaryInformationResponse;
import com.konfigthis.client.model.IntegrationsTransferTerminationInfoToVikarinaResponse;
import com.konfigthis.client.model.IntegrationsTransferTimeScheduleInformationResponse;
import com.konfigthis.client.model.IntegrationsTransferUnusedVacationDaysToVikarinaResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IntegrationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegrationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call importNewStartersListCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/newstarter-employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importNewStartersListValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return importNewStartersListCall(startDate, endDate, _callback);

    }


    private ApiResponse<IntegrationsImportNewStartersListResponse> importNewStartersListWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = importNewStartersListValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<IntegrationsImportNewStartersListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importNewStartersListAsync(String startDate, String endDate, final ApiCallback<IntegrationsImportNewStartersListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importNewStartersListValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<IntegrationsImportNewStartersListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportNewStartersListRequestBuilder {
        private String startDate;
        private String endDate;

        private ImportNewStartersListRequestBuilder() {
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return ImportNewStartersListRequestBuilder
         */
        public ImportNewStartersListRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return ImportNewStartersListRequestBuilder
         */
        public ImportNewStartersListRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for importNewStartersList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return importNewStartersListCall(startDate, endDate, _callback);
        }


        /**
         * Execute importNewStartersList request
         * @return IntegrationsImportNewStartersListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsImportNewStartersListResponse execute() throws ApiException {
            ApiResponse<IntegrationsImportNewStartersListResponse> localVarResp = importNewStartersListWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importNewStartersList request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsImportNewStartersListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsImportNewStartersListResponse> executeWithHttpInfo() throws ApiException {
            return importNewStartersListWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute importNewStartersList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsImportNewStartersListResponse> _callback) throws ApiException {
            return importNewStartersListAsync(startDate, endDate, _callback);
        }
    }

    /**
     * New starters list from Sage HR to Vikarina
     * 
     * @return ImportNewStartersListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ImportNewStartersListRequestBuilder importNewStartersList() throws IllegalArgumentException {
        return new ImportNewStartersListRequestBuilder();
    }
    private okhttp3.Call sendBonusesToVikarinaCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/bonuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendBonusesToVikarinaValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return sendBonusesToVikarinaCall(startDate, endDate, _callback);

    }


    private ApiResponse<IntegrationsSendBonusesToVikarinaResponse> sendBonusesToVikarinaWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = sendBonusesToVikarinaValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<IntegrationsSendBonusesToVikarinaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendBonusesToVikarinaAsync(String startDate, String endDate, final ApiCallback<IntegrationsSendBonusesToVikarinaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendBonusesToVikarinaValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<IntegrationsSendBonusesToVikarinaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendBonusesToVikarinaRequestBuilder {
        private String startDate;
        private String endDate;

        private SendBonusesToVikarinaRequestBuilder() {
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return SendBonusesToVikarinaRequestBuilder
         */
        public SendBonusesToVikarinaRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return SendBonusesToVikarinaRequestBuilder
         */
        public SendBonusesToVikarinaRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for sendBonusesToVikarina
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendBonusesToVikarinaCall(startDate, endDate, _callback);
        }


        /**
         * Execute sendBonusesToVikarina request
         * @return IntegrationsSendBonusesToVikarinaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsSendBonusesToVikarinaResponse execute() throws ApiException {
            ApiResponse<IntegrationsSendBonusesToVikarinaResponse> localVarResp = sendBonusesToVikarinaWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendBonusesToVikarina request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsSendBonusesToVikarinaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsSendBonusesToVikarinaResponse> executeWithHttpInfo() throws ApiException {
            return sendBonusesToVikarinaWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute sendBonusesToVikarina request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsSendBonusesToVikarinaResponse> _callback) throws ApiException {
            return sendBonusesToVikarinaAsync(startDate, endDate, _callback);
        }
    }

    /**
     * Sending bonuses [payed once] to Vikarina
     * 
     * @return SendBonusesToVikarinaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public SendBonusesToVikarinaRequestBuilder sendBonusesToVikarina() throws IllegalArgumentException {
        return new SendBonusesToVikarinaRequestBuilder();
    }
    private okhttp3.Call transferAppointmentInfoCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/appointments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferAppointmentInfoValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return transferAppointmentInfoCall(startDate, endDate, _callback);

    }


    private ApiResponse<IntegrationsTransferAppointmentInfoResponse> transferAppointmentInfoWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = transferAppointmentInfoValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<IntegrationsTransferAppointmentInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferAppointmentInfoAsync(String startDate, String endDate, final ApiCallback<IntegrationsTransferAppointmentInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferAppointmentInfoValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<IntegrationsTransferAppointmentInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferAppointmentInfoRequestBuilder {
        private String startDate;
        private String endDate;

        private TransferAppointmentInfoRequestBuilder() {
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return TransferAppointmentInfoRequestBuilder
         */
        public TransferAppointmentInfoRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return TransferAppointmentInfoRequestBuilder
         */
        public TransferAppointmentInfoRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for transferAppointmentInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return transferAppointmentInfoCall(startDate, endDate, _callback);
        }


        /**
         * Execute transferAppointmentInfo request
         * @return IntegrationsTransferAppointmentInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsTransferAppointmentInfoResponse execute() throws ApiException {
            ApiResponse<IntegrationsTransferAppointmentInfoResponse> localVarResp = transferAppointmentInfoWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferAppointmentInfo request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsTransferAppointmentInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsTransferAppointmentInfoResponse> executeWithHttpInfo() throws ApiException {
            return transferAppointmentInfoWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute transferAppointmentInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsTransferAppointmentInfoResponse> _callback) throws ApiException {
            return transferAppointmentInfoAsync(startDate, endDate, _callback);
        }
    }

    /**
     * New appointment (position changes) information transfer from Sage HR to Vikarina
     * 
     * @return TransferAppointmentInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferAppointmentInfoRequestBuilder transferAppointmentInfo() throws IllegalArgumentException {
        return new TransferAppointmentInfoRequestBuilder();
    }
    private okhttp3.Call transferBankAccountInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/bank-accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferBankAccountInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return transferBankAccountInfoCall(_callback);

    }


    private ApiResponse<IntegrationsTransferBankAccountInfoResponse> transferBankAccountInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = transferBankAccountInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IntegrationsTransferBankAccountInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferBankAccountInfoAsync(final ApiCallback<IntegrationsTransferBankAccountInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferBankAccountInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IntegrationsTransferBankAccountInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferBankAccountInfoRequestBuilder {

        private TransferBankAccountInfoRequestBuilder() {
        }

        /**
         * Build call for transferBankAccountInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return transferBankAccountInfoCall(_callback);
        }


        /**
         * Execute transferBankAccountInfo request
         * @return IntegrationsTransferBankAccountInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsTransferBankAccountInfoResponse execute() throws ApiException {
            ApiResponse<IntegrationsTransferBankAccountInfoResponse> localVarResp = transferBankAccountInfoWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferBankAccountInfo request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsTransferBankAccountInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsTransferBankAccountInfoResponse> executeWithHttpInfo() throws ApiException {
            return transferBankAccountInfoWithHttpInfo();
        }

        /**
         * Execute transferBankAccountInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsTransferBankAccountInfoResponse> _callback) throws ApiException {
            return transferBankAccountInfoAsync(_callback);
        }
    }

    /**
     * Bank account information transfer (Custom field) from Sage HR to Vikarina
     * 
     * @return TransferBankAccountInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferBankAccountInfoRequestBuilder transferBankAccountInfo() throws IllegalArgumentException {
        return new TransferBankAccountInfoRequestBuilder();
    }
    private okhttp3.Call transferContractInformationToVikarinaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/contract-information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferContractInformationToVikarinaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return transferContractInformationToVikarinaCall(_callback);

    }


    private ApiResponse<IntegrationsTransferContractInformationToVikarinaResponse> transferContractInformationToVikarinaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = transferContractInformationToVikarinaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IntegrationsTransferContractInformationToVikarinaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferContractInformationToVikarinaAsync(final ApiCallback<IntegrationsTransferContractInformationToVikarinaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferContractInformationToVikarinaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IntegrationsTransferContractInformationToVikarinaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferContractInformationToVikarinaRequestBuilder {

        private TransferContractInformationToVikarinaRequestBuilder() {
        }

        /**
         * Build call for transferContractInformationToVikarina
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return transferContractInformationToVikarinaCall(_callback);
        }


        /**
         * Execute transferContractInformationToVikarina request
         * @return IntegrationsTransferContractInformationToVikarinaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsTransferContractInformationToVikarinaResponse execute() throws ApiException {
            ApiResponse<IntegrationsTransferContractInformationToVikarinaResponse> localVarResp = transferContractInformationToVikarinaWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferContractInformationToVikarina request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsTransferContractInformationToVikarinaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsTransferContractInformationToVikarinaResponse> executeWithHttpInfo() throws ApiException {
            return transferContractInformationToVikarinaWithHttpInfo();
        }

        /**
         * Execute transferContractInformationToVikarina request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsTransferContractInformationToVikarinaResponse> _callback) throws ApiException {
            return transferContractInformationToVikarinaAsync(_callback);
        }
    }

    /**
     * Contract (custom field) information transfer from Sage HR to Vikarina
     * 
     * @return TransferContractInformationToVikarinaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferContractInformationToVikarinaRequestBuilder transferContractInformationToVikarina() throws IllegalArgumentException {
        return new TransferContractInformationToVikarinaRequestBuilder();
    }
    private okhttp3.Call transferJobPositionFromSageToVikarinaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/job-positions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferJobPositionFromSageToVikarinaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return transferJobPositionFromSageToVikarinaCall(_callback);

    }


    private ApiResponse<IntegrationsTransferJobPositionFromSageToVikarinaResponse> transferJobPositionFromSageToVikarinaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = transferJobPositionFromSageToVikarinaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IntegrationsTransferJobPositionFromSageToVikarinaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferJobPositionFromSageToVikarinaAsync(final ApiCallback<IntegrationsTransferJobPositionFromSageToVikarinaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferJobPositionFromSageToVikarinaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IntegrationsTransferJobPositionFromSageToVikarinaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferJobPositionFromSageToVikarinaRequestBuilder {

        private TransferJobPositionFromSageToVikarinaRequestBuilder() {
        }

        /**
         * Build call for transferJobPositionFromSageToVikarina
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return transferJobPositionFromSageToVikarinaCall(_callback);
        }


        /**
         * Execute transferJobPositionFromSageToVikarina request
         * @return IntegrationsTransferJobPositionFromSageToVikarinaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsTransferJobPositionFromSageToVikarinaResponse execute() throws ApiException {
            ApiResponse<IntegrationsTransferJobPositionFromSageToVikarinaResponse> localVarResp = transferJobPositionFromSageToVikarinaWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferJobPositionFromSageToVikarina request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsTransferJobPositionFromSageToVikarinaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsTransferJobPositionFromSageToVikarinaResponse> executeWithHttpInfo() throws ApiException {
            return transferJobPositionFromSageToVikarinaWithHttpInfo();
        }

        /**
         * Execute transferJobPositionFromSageToVikarina request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsTransferJobPositionFromSageToVikarinaResponse> _callback) throws ApiException {
            return transferJobPositionFromSageToVikarinaAsync(_callback);
        }
    }

    /**
     * Job position transfer from Sage HR to Vikarina
     * 
     * @return TransferJobPositionFromSageToVikarinaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferJobPositionFromSageToVikarinaRequestBuilder transferJobPositionFromSageToVikarina() throws IllegalArgumentException {
        return new TransferJobPositionFromSageToVikarinaRequestBuilder();
    }
    private okhttp3.Call transferLeaveInformationToVikarinaCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/leave-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferLeaveInformationToVikarinaValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return transferLeaveInformationToVikarinaCall(startDate, endDate, _callback);

    }


    private ApiResponse<IntegrationsTransferLeaveInformationToVikarinaResponse> transferLeaveInformationToVikarinaWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = transferLeaveInformationToVikarinaValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<IntegrationsTransferLeaveInformationToVikarinaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferLeaveInformationToVikarinaAsync(String startDate, String endDate, final ApiCallback<IntegrationsTransferLeaveInformationToVikarinaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferLeaveInformationToVikarinaValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<IntegrationsTransferLeaveInformationToVikarinaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferLeaveInformationToVikarinaRequestBuilder {
        private String startDate;
        private String endDate;

        private TransferLeaveInformationToVikarinaRequestBuilder() {
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return TransferLeaveInformationToVikarinaRequestBuilder
         */
        public TransferLeaveInformationToVikarinaRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return TransferLeaveInformationToVikarinaRequestBuilder
         */
        public TransferLeaveInformationToVikarinaRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for transferLeaveInformationToVikarina
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return transferLeaveInformationToVikarinaCall(startDate, endDate, _callback);
        }


        /**
         * Execute transferLeaveInformationToVikarina request
         * @return IntegrationsTransferLeaveInformationToVikarinaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsTransferLeaveInformationToVikarinaResponse execute() throws ApiException {
            ApiResponse<IntegrationsTransferLeaveInformationToVikarinaResponse> localVarResp = transferLeaveInformationToVikarinaWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferLeaveInformationToVikarina request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsTransferLeaveInformationToVikarinaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsTransferLeaveInformationToVikarinaResponse> executeWithHttpInfo() throws ApiException {
            return transferLeaveInformationToVikarinaWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute transferLeaveInformationToVikarina request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsTransferLeaveInformationToVikarinaResponse> _callback) throws ApiException {
            return transferLeaveInformationToVikarinaAsync(startDate, endDate, _callback);
        }
    }

    /**
     * Leaves information transfer from Sage HR to Vikarina
     * 
     * @return TransferLeaveInformationToVikarinaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferLeaveInformationToVikarinaRequestBuilder transferLeaveInformationToVikarina() throws IllegalArgumentException {
        return new TransferLeaveInformationToVikarinaRequestBuilder();
    }
    private okhttp3.Call transferOrganizationalStructureFromSageToVikarinaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/organization-structure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferOrganizationalStructureFromSageToVikarinaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return transferOrganizationalStructureFromSageToVikarinaCall(_callback);

    }


    private ApiResponse<IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse> transferOrganizationalStructureFromSageToVikarinaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = transferOrganizationalStructureFromSageToVikarinaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferOrganizationalStructureFromSageToVikarinaAsync(final ApiCallback<IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferOrganizationalStructureFromSageToVikarinaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferOrganizationalStructureFromSageToVikarinaRequestBuilder {

        private TransferOrganizationalStructureFromSageToVikarinaRequestBuilder() {
        }

        /**
         * Build call for transferOrganizationalStructureFromSageToVikarina
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return transferOrganizationalStructureFromSageToVikarinaCall(_callback);
        }


        /**
         * Execute transferOrganizationalStructureFromSageToVikarina request
         * @return IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse execute() throws ApiException {
            ApiResponse<IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse> localVarResp = transferOrganizationalStructureFromSageToVikarinaWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferOrganizationalStructureFromSageToVikarina request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse> executeWithHttpInfo() throws ApiException {
            return transferOrganizationalStructureFromSageToVikarinaWithHttpInfo();
        }

        /**
         * Execute transferOrganizationalStructureFromSageToVikarina request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsTransferOrganizationalStructureFromSageToVikarinaResponse> _callback) throws ApiException {
            return transferOrganizationalStructureFromSageToVikarinaAsync(_callback);
        }
    }

    /**
     * Organizational structure transfer from Sage HR to Vikarina
     * 
     * @return TransferOrganizationalStructureFromSageToVikarinaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferOrganizationalStructureFromSageToVikarinaRequestBuilder transferOrganizationalStructureFromSageToVikarina() throws IllegalArgumentException {
        return new TransferOrganizationalStructureFromSageToVikarinaRequestBuilder();
    }
    private okhttp3.Call transferSalaryInformationCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/salaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferSalaryInformationValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return transferSalaryInformationCall(startDate, endDate, _callback);

    }


    private ApiResponse<IntegrationsTransferSalaryInformationResponse> transferSalaryInformationWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = transferSalaryInformationValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<IntegrationsTransferSalaryInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferSalaryInformationAsync(String startDate, String endDate, final ApiCallback<IntegrationsTransferSalaryInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferSalaryInformationValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<IntegrationsTransferSalaryInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferSalaryInformationRequestBuilder {
        private String startDate;
        private String endDate;

        private TransferSalaryInformationRequestBuilder() {
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return TransferSalaryInformationRequestBuilder
         */
        public TransferSalaryInformationRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return TransferSalaryInformationRequestBuilder
         */
        public TransferSalaryInformationRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for transferSalaryInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return transferSalaryInformationCall(startDate, endDate, _callback);
        }


        /**
         * Execute transferSalaryInformation request
         * @return IntegrationsTransferSalaryInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsTransferSalaryInformationResponse execute() throws ApiException {
            ApiResponse<IntegrationsTransferSalaryInformationResponse> localVarResp = transferSalaryInformationWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferSalaryInformation request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsTransferSalaryInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsTransferSalaryInformationResponse> executeWithHttpInfo() throws ApiException {
            return transferSalaryInformationWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute transferSalaryInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsTransferSalaryInformationResponse> _callback) throws ApiException {
            return transferSalaryInformationAsync(startDate, endDate, _callback);
        }
    }

    /**
     * Salary information transfer from Sage HR to Vikarina to Vikarina
     * 
     * @return TransferSalaryInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferSalaryInformationRequestBuilder transferSalaryInformation() throws IllegalArgumentException {
        return new TransferSalaryInformationRequestBuilder();
    }
    private okhttp3.Call transferTerminationInfoToVikarinaCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/terminated-employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferTerminationInfoToVikarinaValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return transferTerminationInfoToVikarinaCall(startDate, endDate, _callback);

    }


    private ApiResponse<IntegrationsTransferTerminationInfoToVikarinaResponse> transferTerminationInfoToVikarinaWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = transferTerminationInfoToVikarinaValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<IntegrationsTransferTerminationInfoToVikarinaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferTerminationInfoToVikarinaAsync(String startDate, String endDate, final ApiCallback<IntegrationsTransferTerminationInfoToVikarinaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferTerminationInfoToVikarinaValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<IntegrationsTransferTerminationInfoToVikarinaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferTerminationInfoToVikarinaRequestBuilder {
        private String startDate;
        private String endDate;

        private TransferTerminationInfoToVikarinaRequestBuilder() {
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return TransferTerminationInfoToVikarinaRequestBuilder
         */
        public TransferTerminationInfoToVikarinaRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return TransferTerminationInfoToVikarinaRequestBuilder
         */
        public TransferTerminationInfoToVikarinaRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for transferTerminationInfoToVikarina
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return transferTerminationInfoToVikarinaCall(startDate, endDate, _callback);
        }


        /**
         * Execute transferTerminationInfoToVikarina request
         * @return IntegrationsTransferTerminationInfoToVikarinaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsTransferTerminationInfoToVikarinaResponse execute() throws ApiException {
            ApiResponse<IntegrationsTransferTerminationInfoToVikarinaResponse> localVarResp = transferTerminationInfoToVikarinaWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferTerminationInfoToVikarina request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsTransferTerminationInfoToVikarinaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsTransferTerminationInfoToVikarinaResponse> executeWithHttpInfo() throws ApiException {
            return transferTerminationInfoToVikarinaWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute transferTerminationInfoToVikarina request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsTransferTerminationInfoToVikarinaResponse> _callback) throws ApiException {
            return transferTerminationInfoToVikarinaAsync(startDate, endDate, _callback);
        }
    }

    /**
     * Termination information transfer from Sage HR to Vikarina
     * 
     * @return TransferTerminationInfoToVikarinaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferTerminationInfoToVikarinaRequestBuilder transferTerminationInfoToVikarina() throws IllegalArgumentException {
        return new TransferTerminationInfoToVikarinaRequestBuilder();
    }
    private okhttp3.Call transferTimeScheduleInformationCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/timesheets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferTimeScheduleInformationValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return transferTimeScheduleInformationCall(startDate, endDate, _callback);

    }


    private ApiResponse<IntegrationsTransferTimeScheduleInformationResponse> transferTimeScheduleInformationWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = transferTimeScheduleInformationValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<IntegrationsTransferTimeScheduleInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferTimeScheduleInformationAsync(String startDate, String endDate, final ApiCallback<IntegrationsTransferTimeScheduleInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferTimeScheduleInformationValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<IntegrationsTransferTimeScheduleInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferTimeScheduleInformationRequestBuilder {
        private String startDate;
        private String endDate;

        private TransferTimeScheduleInformationRequestBuilder() {
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return TransferTimeScheduleInformationRequestBuilder
         */
        public TransferTimeScheduleInformationRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return TransferTimeScheduleInformationRequestBuilder
         */
        public TransferTimeScheduleInformationRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for transferTimeScheduleInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return transferTimeScheduleInformationCall(startDate, endDate, _callback);
        }


        /**
         * Execute transferTimeScheduleInformation request
         * @return IntegrationsTransferTimeScheduleInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsTransferTimeScheduleInformationResponse execute() throws ApiException {
            ApiResponse<IntegrationsTransferTimeScheduleInformationResponse> localVarResp = transferTimeScheduleInformationWithHttpInfo(startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferTimeScheduleInformation request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsTransferTimeScheduleInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsTransferTimeScheduleInformationResponse> executeWithHttpInfo() throws ApiException {
            return transferTimeScheduleInformationWithHttpInfo(startDate, endDate);
        }

        /**
         * Execute transferTimeScheduleInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsTransferTimeScheduleInformationResponse> _callback) throws ApiException {
            return transferTimeScheduleInformationAsync(startDate, endDate, _callback);
        }
    }

    /**
     * Time Schedule information transfer from Sage HR to Vikarina
     * 
     * @return TransferTimeScheduleInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferTimeScheduleInformationRequestBuilder transferTimeScheduleInformation() throws IllegalArgumentException {
        return new TransferTimeScheduleInformationRequestBuilder();
    }
    private okhttp3.Call transferUnusedVacationDaysToVikarinaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vikarina/unused-days";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferUnusedVacationDaysToVikarinaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return transferUnusedVacationDaysToVikarinaCall(_callback);

    }


    private ApiResponse<IntegrationsTransferUnusedVacationDaysToVikarinaResponse> transferUnusedVacationDaysToVikarinaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = transferUnusedVacationDaysToVikarinaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IntegrationsTransferUnusedVacationDaysToVikarinaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferUnusedVacationDaysToVikarinaAsync(final ApiCallback<IntegrationsTransferUnusedVacationDaysToVikarinaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferUnusedVacationDaysToVikarinaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IntegrationsTransferUnusedVacationDaysToVikarinaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferUnusedVacationDaysToVikarinaRequestBuilder {

        private TransferUnusedVacationDaysToVikarinaRequestBuilder() {
        }

        /**
         * Build call for transferUnusedVacationDaysToVikarina
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return transferUnusedVacationDaysToVikarinaCall(_callback);
        }


        /**
         * Execute transferUnusedVacationDaysToVikarina request
         * @return IntegrationsTransferUnusedVacationDaysToVikarinaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationsTransferUnusedVacationDaysToVikarinaResponse execute() throws ApiException {
            ApiResponse<IntegrationsTransferUnusedVacationDaysToVikarinaResponse> localVarResp = transferUnusedVacationDaysToVikarinaWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferUnusedVacationDaysToVikarina request with HTTP info returned
         * @return ApiResponse&lt;IntegrationsTransferUnusedVacationDaysToVikarinaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationsTransferUnusedVacationDaysToVikarinaResponse> executeWithHttpInfo() throws ApiException {
            return transferUnusedVacationDaysToVikarinaWithHttpInfo();
        }

        /**
         * Execute transferUnusedVacationDaysToVikarina request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationsTransferUnusedVacationDaysToVikarinaResponse> _callback) throws ApiException {
            return transferUnusedVacationDaysToVikarinaAsync(_callback);
        }
    }

    /**
     * Unused vacation days transfer from Sage HR to Vikarina
     * 
     * @return TransferUnusedVacationDaysToVikarinaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferUnusedVacationDaysToVikarinaRequestBuilder transferUnusedVacationDaysToVikarina() throws IllegalArgumentException {
        return new TransferUnusedVacationDaysToVikarinaRequestBuilder();
    }
}
