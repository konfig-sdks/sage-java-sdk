/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LeaveManagementCreateKitDayRequest;
import com.konfigthis.client.model.LeaveManagementCreateKitDayResponse;
import com.konfigthis.client.model.LeaveManagementGetIndividualAllowancesResponse;
import com.konfigthis.client.model.LeaveManagementGetKitDaysResponse;
import com.konfigthis.client.model.LeaveManagementGetTimeOffBalancesResponse;
import com.konfigthis.client.model.LeaveManagementGetTimeOffPolicyByIdResponse;
import com.konfigthis.client.model.LeaveManagementListEmployeesOutTodayResponse;
import com.konfigthis.client.model.LeaveManagementListTimeOffPoliciesResponse;
import com.konfigthis.client.model.LeaveManagementListTimeOffRequestsResponse;
import com.konfigthis.client.model.LeaveManagementNewTimeOffRequestRequest;
import com.konfigthis.client.model.LeaveManagementNewTimeOffRequestResponse;
import com.konfigthis.client.model.LeaveManagementProcessKitDayRequest;
import com.konfigthis.client.model.LeaveManagementUpdateKitDaysConfigurationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LeaveManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LeaveManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LeaveManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createKitDayCall(Integer policyId, Integer employeeId, LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest, String date, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveManagementCreateKitDayRequest;

        // create path and map variables
        String localVarPath = "/leave-management/kit-days";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyId != null) {
            localVarFormParams.put("policy_id", policyId);
        }

        if (employeeId != null) {
            localVarFormParams.put("employee_id", employeeId);
        }

        if (date != null) {
            localVarFormParams.put("date", date);
        }

        if (dateFrom != null) {
            localVarFormParams.put("date_from", dateFrom);
        }

        if (dateTo != null) {
            localVarFormParams.put("date_to", dateTo);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createKitDayValidateBeforeCall(Integer policyId, Integer employeeId, LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest, String date, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling createKitDay(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createKitDay(Async)");
        }

        // verify the required parameter 'leaveManagementCreateKitDayRequest' is set
        if (leaveManagementCreateKitDayRequest == null) {
            throw new ApiException("Missing the required parameter 'leaveManagementCreateKitDayRequest' when calling createKitDay(Async)");
        }

        return createKitDayCall(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo, _callback);

    }


    private ApiResponse<LeaveManagementCreateKitDayResponse> createKitDayWithHttpInfo(Integer policyId, Integer employeeId, LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest, String date, String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = createKitDayValidateBeforeCall(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo, null);
        Type localVarReturnType = new TypeToken<LeaveManagementCreateKitDayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createKitDayAsync(Integer policyId, Integer employeeId, LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest, String date, String dateFrom, String dateTo, final ApiCallback<LeaveManagementCreateKitDayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createKitDayValidateBeforeCall(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementCreateKitDayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateKitDayRequestBuilder {
        private final Integer policyId;
        private final Integer employeeId;
        private String date;
        private String dateFrom;
        private String dateTo;

        private CreateKitDayRequestBuilder(Integer policyId, Integer employeeId) {
            this.policyId = policyId;
            this.employeeId = employeeId;
        }

        /**
         * Set date
         * @param date Date of single-day KIT day (optional)
         * @return CreateKitDayRequestBuilder
         */
        public CreateKitDayRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set dateFrom
         * @param dateFrom Start date of a multi-day KIT day (optional)
         * @return CreateKitDayRequestBuilder
         */
        public CreateKitDayRequestBuilder dateFrom(String dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo End date of a multi-day KIT day (optional)
         * @return CreateKitDayRequestBuilder
         */
        public CreateKitDayRequestBuilder dateTo(String dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Build call for createKitDay
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest = buildBodyParams();
            return createKitDayCall(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo, _callback);
        }

        private LeaveManagementCreateKitDayRequest buildBodyParams() {
            LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest = new LeaveManagementCreateKitDayRequest();
            leaveManagementCreateKitDayRequest.policyId(this.policyId);
            leaveManagementCreateKitDayRequest.employeeId(this.employeeId);
            leaveManagementCreateKitDayRequest.date(this.date);
            leaveManagementCreateKitDayRequest.dateFrom(this.dateFrom);
            leaveManagementCreateKitDayRequest.dateTo(this.dateTo);
            return leaveManagementCreateKitDayRequest;
        }

        /**
         * Execute createKitDay request
         * @return LeaveManagementCreateKitDayResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementCreateKitDayResponse execute() throws ApiException {
            LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest = buildBodyParams();
            ApiResponse<LeaveManagementCreateKitDayResponse> localVarResp = createKitDayWithHttpInfo(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createKitDay request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementCreateKitDayResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementCreateKitDayResponse> executeWithHttpInfo() throws ApiException {
            LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest = buildBodyParams();
            return createKitDayWithHttpInfo(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo);
        }

        /**
         * Execute createKitDay request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementCreateKitDayResponse> _callback) throws ApiException {
            LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest = buildBodyParams();
            return createKitDayAsync(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo, _callback);
        }
    }

    /**
     * Create a KIT day in a leave
     * 
     * @param policyId Time-off policy identifier (required)
     * @param employeeId Employee identifier (required)
     * @param leaveManagementCreateKitDayRequest  (required)
     * @return CreateKitDayRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateKitDayRequestBuilder createKitDay(Integer policyId, Integer employeeId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new CreateKitDayRequestBuilder(policyId, employeeId);
    }
    private okhttp3.Call getIndividualAllowancesCall(Integer page, Integer perPage, List<Integer> locationIds, List<Integer> employeeIds, List<Integer> teamIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leave-management/reports/individual-allowances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (locationIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "location_ids", locationIds));
        }

        if (employeeIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "employee_ids", employeeIds));
        }

        if (teamIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "team_ids", teamIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIndividualAllowancesValidateBeforeCall(Integer page, Integer perPage, List<Integer> locationIds, List<Integer> employeeIds, List<Integer> teamIds, final ApiCallback _callback) throws ApiException {
        return getIndividualAllowancesCall(page, perPage, locationIds, employeeIds, teamIds, _callback);

    }


    private ApiResponse<LeaveManagementGetIndividualAllowancesResponse> getIndividualAllowancesWithHttpInfo(Integer page, Integer perPage, List<Integer> locationIds, List<Integer> employeeIds, List<Integer> teamIds) throws ApiException {
        okhttp3.Call localVarCall = getIndividualAllowancesValidateBeforeCall(page, perPage, locationIds, employeeIds, teamIds, null);
        Type localVarReturnType = new TypeToken<LeaveManagementGetIndividualAllowancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIndividualAllowancesAsync(Integer page, Integer perPage, List<Integer> locationIds, List<Integer> employeeIds, List<Integer> teamIds, final ApiCallback<LeaveManagementGetIndividualAllowancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIndividualAllowancesValidateBeforeCall(page, perPage, locationIds, employeeIds, teamIds, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementGetIndividualAllowancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIndividualAllowancesRequestBuilder {
        private Integer page;
        private Integer perPage;
        private List<Integer> locationIds;
        private List<Integer> employeeIds;
        private List<Integer> teamIds;

        private GetIndividualAllowancesRequestBuilder() {
        }

        /**
         * Set page
         * @param page  (optional)
         * @return GetIndividualAllowancesRequestBuilder
         */
        public GetIndividualAllowancesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetIndividualAllowancesRequestBuilder
         */
        public GetIndividualAllowancesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set locationIds
         * @param locationIds Limit the reports to employees in specified location ids (optional)
         * @return GetIndividualAllowancesRequestBuilder
         */
        public GetIndividualAllowancesRequestBuilder locationIds(List<Integer> locationIds) {
            this.locationIds = locationIds;
            return this;
        }
        
        /**
         * Set employeeIds
         * @param employeeIds Limit the reports to selected employee ids (optional)
         * @return GetIndividualAllowancesRequestBuilder
         */
        public GetIndividualAllowancesRequestBuilder employeeIds(List<Integer> employeeIds) {
            this.employeeIds = employeeIds;
            return this;
        }
        
        /**
         * Set teamIds
         * @param teamIds Limit the reports to employees in specified team ids (optional)
         * @return GetIndividualAllowancesRequestBuilder
         */
        public GetIndividualAllowancesRequestBuilder teamIds(List<Integer> teamIds) {
            this.teamIds = teamIds;
            return this;
        }
        
        /**
         * Build call for getIndividualAllowances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIndividualAllowancesCall(page, perPage, locationIds, employeeIds, teamIds, _callback);
        }


        /**
         * Execute getIndividualAllowances request
         * @return LeaveManagementGetIndividualAllowancesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementGetIndividualAllowancesResponse execute() throws ApiException {
            ApiResponse<LeaveManagementGetIndividualAllowancesResponse> localVarResp = getIndividualAllowancesWithHttpInfo(page, perPage, locationIds, employeeIds, teamIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIndividualAllowances request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementGetIndividualAllowancesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementGetIndividualAllowancesResponse> executeWithHttpInfo() throws ApiException {
            return getIndividualAllowancesWithHttpInfo(page, perPage, locationIds, employeeIds, teamIds);
        }

        /**
         * Execute getIndividualAllowances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementGetIndividualAllowancesResponse> _callback) throws ApiException {
            return getIndividualAllowancesAsync(page, perPage, locationIds, employeeIds, teamIds, _callback);
        }
    }

    /**
     * Report with individual allowances
     * 
     * @return GetIndividualAllowancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetIndividualAllowancesRequestBuilder getIndividualAllowances() throws IllegalArgumentException {
        return new GetIndividualAllowancesRequestBuilder();
    }
    private okhttp3.Call getKitDaysCall(Integer policyId, Integer employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leave-management/kit-days";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_id", policyId));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employee_id", employeeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKitDaysValidateBeforeCall(Integer policyId, Integer employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling getKitDays(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getKitDays(Async)");
        }

        return getKitDaysCall(policyId, employeeId, _callback);

    }


    private ApiResponse<LeaveManagementGetKitDaysResponse> getKitDaysWithHttpInfo(Integer policyId, Integer employeeId) throws ApiException {
        okhttp3.Call localVarCall = getKitDaysValidateBeforeCall(policyId, employeeId, null);
        Type localVarReturnType = new TypeToken<LeaveManagementGetKitDaysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getKitDaysAsync(Integer policyId, Integer employeeId, final ApiCallback<LeaveManagementGetKitDaysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKitDaysValidateBeforeCall(policyId, employeeId, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementGetKitDaysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetKitDaysRequestBuilder {
        private final Integer policyId;
        private final Integer employeeId;

        private GetKitDaysRequestBuilder(Integer policyId, Integer employeeId) {
            this.policyId = policyId;
            this.employeeId = employeeId;
        }

        /**
         * Build call for getKitDays
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getKitDaysCall(policyId, employeeId, _callback);
        }


        /**
         * Execute getKitDays request
         * @return LeaveManagementGetKitDaysResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementGetKitDaysResponse execute() throws ApiException {
            ApiResponse<LeaveManagementGetKitDaysResponse> localVarResp = getKitDaysWithHttpInfo(policyId, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getKitDays request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementGetKitDaysResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementGetKitDaysResponse> executeWithHttpInfo() throws ApiException {
            return getKitDaysWithHttpInfo(policyId, employeeId);
        }

        /**
         * Execute getKitDays request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementGetKitDaysResponse> _callback) throws ApiException {
            return getKitDaysAsync(policyId, employeeId, _callback);
        }
    }

    /**
     * View all the KIT days of an employee in a policy
     * 
     * @param policyId Time-off policy identifier (required)
     * @param employeeId Employee identifier (required)
     * @return GetKitDaysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetKitDaysRequestBuilder getKitDays(Integer policyId, Integer employeeId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new GetKitDaysRequestBuilder(policyId, employeeId);
    }
    private okhttp3.Call getTimeOffBalancesCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{id}/leave-management/balances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffBalancesValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTimeOffBalances(Async)");
        }

        return getTimeOffBalancesCall(id, _callback);

    }


    private ApiResponse<LeaveManagementGetTimeOffBalancesResponse> getTimeOffBalancesWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getTimeOffBalancesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LeaveManagementGetTimeOffBalancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeOffBalancesAsync(Integer id, final ApiCallback<LeaveManagementGetTimeOffBalancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffBalancesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementGetTimeOffBalancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeOffBalancesRequestBuilder {
        private final Integer id;

        private GetTimeOffBalancesRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getTimeOffBalances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffBalancesCall(id, _callback);
        }


        /**
         * Execute getTimeOffBalances request
         * @return LeaveManagementGetTimeOffBalancesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementGetTimeOffBalancesResponse execute() throws ApiException {
            ApiResponse<LeaveManagementGetTimeOffBalancesResponse> localVarResp = getTimeOffBalancesWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeOffBalances request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementGetTimeOffBalancesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementGetTimeOffBalancesResponse> executeWithHttpInfo() throws ApiException {
            return getTimeOffBalancesWithHttpInfo(id);
        }

        /**
         * Execute getTimeOffBalances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementGetTimeOffBalancesResponse> _callback) throws ApiException {
            return getTimeOffBalancesAsync(id, _callback);
        }
    }

    /**
     * Employee time off balances
     * 
     * @param id Numeric ID of the user to get. (required)
     * @return GetTimeOffBalancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffBalancesRequestBuilder getTimeOffBalances(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetTimeOffBalancesRequestBuilder(id);
    }
    private okhttp3.Call getTimeOffPolicyByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leave-management/policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffPolicyByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTimeOffPolicyById(Async)");
        }

        return getTimeOffPolicyByIdCall(id, _callback);

    }


    private ApiResponse<LeaveManagementGetTimeOffPolicyByIdResponse> getTimeOffPolicyByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getTimeOffPolicyByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LeaveManagementGetTimeOffPolicyByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeOffPolicyByIdAsync(Integer id, final ApiCallback<LeaveManagementGetTimeOffPolicyByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffPolicyByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementGetTimeOffPolicyByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeOffPolicyByIdRequestBuilder {
        private final Integer id;

        private GetTimeOffPolicyByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getTimeOffPolicyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffPolicyByIdCall(id, _callback);
        }


        /**
         * Execute getTimeOffPolicyById request
         * @return LeaveManagementGetTimeOffPolicyByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementGetTimeOffPolicyByIdResponse execute() throws ApiException {
            ApiResponse<LeaveManagementGetTimeOffPolicyByIdResponse> localVarResp = getTimeOffPolicyByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeOffPolicyById request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementGetTimeOffPolicyByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementGetTimeOffPolicyByIdResponse> executeWithHttpInfo() throws ApiException {
            return getTimeOffPolicyByIdWithHttpInfo(id);
        }

        /**
         * Execute getTimeOffPolicyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementGetTimeOffPolicyByIdResponse> _callback) throws ApiException {
            return getTimeOffPolicyByIdAsync(id, _callback);
        }
    }

    /**
     * Details about a time off policy
     * 
     * @param id Numeric ID of the policy to get. (required)
     * @return GetTimeOffPolicyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffPolicyByIdRequestBuilder getTimeOffPolicyById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetTimeOffPolicyByIdRequestBuilder(id);
    }
    private okhttp3.Call listEmployeesOutTodayCall(String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leave-management/out-of-office-today";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeesOutTodayValidateBeforeCall(String date, final ApiCallback _callback) throws ApiException {
        return listEmployeesOutTodayCall(date, _callback);

    }


    private ApiResponse<LeaveManagementListEmployeesOutTodayResponse> listEmployeesOutTodayWithHttpInfo(String date) throws ApiException {
        okhttp3.Call localVarCall = listEmployeesOutTodayValidateBeforeCall(date, null);
        Type localVarReturnType = new TypeToken<LeaveManagementListEmployeesOutTodayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmployeesOutTodayAsync(String date, final ApiCallback<LeaveManagementListEmployeesOutTodayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeesOutTodayValidateBeforeCall(date, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementListEmployeesOutTodayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmployeesOutTodayRequestBuilder {
        private String date;

        private ListEmployeesOutTodayRequestBuilder() {
        }

        /**
         * Set date
         * @param date Optional date, defauls to today (optional)
         * @return ListEmployeesOutTodayRequestBuilder
         */
        public ListEmployeesOutTodayRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for listEmployeesOutToday
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeesOutTodayCall(date, _callback);
        }


        /**
         * Execute listEmployeesOutToday request
         * @return LeaveManagementListEmployeesOutTodayResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementListEmployeesOutTodayResponse execute() throws ApiException {
            ApiResponse<LeaveManagementListEmployeesOutTodayResponse> localVarResp = listEmployeesOutTodayWithHttpInfo(date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmployeesOutToday request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementListEmployeesOutTodayResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementListEmployeesOutTodayResponse> executeWithHttpInfo() throws ApiException {
            return listEmployeesOutTodayWithHttpInfo(date);
        }

        /**
         * Execute listEmployeesOutToday request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementListEmployeesOutTodayResponse> _callback) throws ApiException {
            return listEmployeesOutTodayAsync(date, _callback);
        }
    }

    /**
     * List employees out of office today
     * 
     * @return ListEmployeesOutTodayRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeesOutTodayRequestBuilder listEmployeesOutToday() throws IllegalArgumentException {
        return new ListEmployeesOutTodayRequestBuilder();
    }
    private okhttp3.Call listTimeOffPoliciesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leave-management/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTimeOffPoliciesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listTimeOffPoliciesCall(_callback);

    }


    private ApiResponse<LeaveManagementListTimeOffPoliciesResponse> listTimeOffPoliciesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listTimeOffPoliciesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LeaveManagementListTimeOffPoliciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTimeOffPoliciesAsync(final ApiCallback<LeaveManagementListTimeOffPoliciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTimeOffPoliciesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LeaveManagementListTimeOffPoliciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTimeOffPoliciesRequestBuilder {

        private ListTimeOffPoliciesRequestBuilder() {
        }

        /**
         * Build call for listTimeOffPolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTimeOffPoliciesCall(_callback);
        }


        /**
         * Execute listTimeOffPolicies request
         * @return LeaveManagementListTimeOffPoliciesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementListTimeOffPoliciesResponse execute() throws ApiException {
            ApiResponse<LeaveManagementListTimeOffPoliciesResponse> localVarResp = listTimeOffPoliciesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTimeOffPolicies request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementListTimeOffPoliciesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementListTimeOffPoliciesResponse> executeWithHttpInfo() throws ApiException {
            return listTimeOffPoliciesWithHttpInfo();
        }

        /**
         * Execute listTimeOffPolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementListTimeOffPoliciesResponse> _callback) throws ApiException {
            return listTimeOffPoliciesAsync(_callback);
        }
    }

    /**
     * List time off policies
     * 
     * @return ListTimeOffPoliciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListTimeOffPoliciesRequestBuilder listTimeOffPolicies() throws IllegalArgumentException {
        return new ListTimeOffPoliciesRequestBuilder();
    }
    private okhttp3.Call listTimeOffRequestsCall(Integer page, String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leave-management/requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTimeOffRequestsValidateBeforeCall(Integer page, String from, String to, final ApiCallback _callback) throws ApiException {
        return listTimeOffRequestsCall(page, from, to, _callback);

    }


    private ApiResponse<LeaveManagementListTimeOffRequestsResponse> listTimeOffRequestsWithHttpInfo(Integer page, String from, String to) throws ApiException {
        okhttp3.Call localVarCall = listTimeOffRequestsValidateBeforeCall(page, from, to, null);
        Type localVarReturnType = new TypeToken<LeaveManagementListTimeOffRequestsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTimeOffRequestsAsync(Integer page, String from, String to, final ApiCallback<LeaveManagementListTimeOffRequestsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTimeOffRequestsValidateBeforeCall(page, from, to, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementListTimeOffRequestsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTimeOffRequestsRequestBuilder {
        private Integer page;
        private String from;
        private String to;

        private ListTimeOffRequestsRequestBuilder() {
        }

        /**
         * Set page
         * @param page  (optional)
         * @return ListTimeOffRequestsRequestBuilder
         */
        public ListTimeOffRequestsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set from
         * @param from If not specified defaults to beginning of current month (optional)
         * @return ListTimeOffRequestsRequestBuilder
         */
        public ListTimeOffRequestsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to If not specified defaults to end of current month. Days between from date and to date must be less than 65. If you need info for larger period of time make multiple requests; (optional)
         * @return ListTimeOffRequestsRequestBuilder
         */
        public ListTimeOffRequestsRequestBuilder to(String to) {
            this.to = to;
            return this;
        }
        
        /**
         * Build call for listTimeOffRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTimeOffRequestsCall(page, from, to, _callback);
        }


        /**
         * Execute listTimeOffRequests request
         * @return LeaveManagementListTimeOffRequestsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementListTimeOffRequestsResponse execute() throws ApiException {
            ApiResponse<LeaveManagementListTimeOffRequestsResponse> localVarResp = listTimeOffRequestsWithHttpInfo(page, from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTimeOffRequests request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementListTimeOffRequestsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementListTimeOffRequestsResponse> executeWithHttpInfo() throws ApiException {
            return listTimeOffRequestsWithHttpInfo(page, from, to);
        }

        /**
         * Execute listTimeOffRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementListTimeOffRequestsResponse> _callback) throws ApiException {
            return listTimeOffRequestsAsync(page, from, to, _callback);
        }
    }

    /**
     * List time off requests
     * 
     * @return ListTimeOffRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListTimeOffRequestsRequestBuilder listTimeOffRequests() throws IllegalArgumentException {
        return new ListTimeOffRequestsRequestBuilder();
    }
    private okhttp3.Call newTimeOffRequestCall(String type, Integer timeOffPolicyId, Integer employeeId, String partOfDay, LeaveManagementNewTimeOffRequestRequest leaveManagementNewTimeOffRequestRequest, String date, String dateFrom, String dateTo, Double hours, String timeFrom, String timeTo, String details, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveManagementNewTimeOffRequestRequest;

        // create path and map variables
        String localVarPath = "/leave-management/requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        if (timeOffPolicyId != null) {
            localVarFormParams.put("time_off_policy_id", timeOffPolicyId);
        }

        if (employeeId != null) {
            localVarFormParams.put("employee_id", employeeId);
        }

        if (date != null) {
            localVarFormParams.put("date", date);
        }

        if (dateFrom != null) {
            localVarFormParams.put("date_from", dateFrom);
        }

        if (dateTo != null) {
            localVarFormParams.put("date_to", dateTo);
        }

        if (partOfDay != null) {
            localVarFormParams.put("part_of_day", partOfDay);
        }

        if (hours != null) {
            localVarFormParams.put("hours", hours);
        }

        if (timeFrom != null) {
            localVarFormParams.put("time_from", timeFrom);
        }

        if (timeTo != null) {
            localVarFormParams.put("time_to", timeTo);
        }

        if (details != null) {
            localVarFormParams.put("details", details);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newTimeOffRequestValidateBeforeCall(String type, Integer timeOffPolicyId, Integer employeeId, String partOfDay, LeaveManagementNewTimeOffRequestRequest leaveManagementNewTimeOffRequestRequest, String date, String dateFrom, String dateTo, Double hours, String timeFrom, String timeTo, String details, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling newTimeOffRequest(Async)");
        }

        // verify the required parameter 'timeOffPolicyId' is set
        if (timeOffPolicyId == null) {
            throw new ApiException("Missing the required parameter 'timeOffPolicyId' when calling newTimeOffRequest(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling newTimeOffRequest(Async)");
        }

        // verify the required parameter 'partOfDay' is set
        if (partOfDay == null) {
            throw new ApiException("Missing the required parameter 'partOfDay' when calling newTimeOffRequest(Async)");
        }

        // verify the required parameter 'leaveManagementNewTimeOffRequestRequest' is set
        if (leaveManagementNewTimeOffRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'leaveManagementNewTimeOffRequestRequest' when calling newTimeOffRequest(Async)");
        }

        return newTimeOffRequestCall(type, timeOffPolicyId, employeeId, partOfDay, leaveManagementNewTimeOffRequestRequest, date, dateFrom, dateTo, hours, timeFrom, timeTo, details, _callback);

    }


    private ApiResponse<LeaveManagementNewTimeOffRequestResponse> newTimeOffRequestWithHttpInfo(String type, Integer timeOffPolicyId, Integer employeeId, String partOfDay, LeaveManagementNewTimeOffRequestRequest leaveManagementNewTimeOffRequestRequest, String date, String dateFrom, String dateTo, Double hours, String timeFrom, String timeTo, String details) throws ApiException {
        okhttp3.Call localVarCall = newTimeOffRequestValidateBeforeCall(type, timeOffPolicyId, employeeId, partOfDay, leaveManagementNewTimeOffRequestRequest, date, dateFrom, dateTo, hours, timeFrom, timeTo, details, null);
        Type localVarReturnType = new TypeToken<LeaveManagementNewTimeOffRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call newTimeOffRequestAsync(String type, Integer timeOffPolicyId, Integer employeeId, String partOfDay, LeaveManagementNewTimeOffRequestRequest leaveManagementNewTimeOffRequestRequest, String date, String dateFrom, String dateTo, Double hours, String timeFrom, String timeTo, String details, final ApiCallback<LeaveManagementNewTimeOffRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = newTimeOffRequestValidateBeforeCall(type, timeOffPolicyId, employeeId, partOfDay, leaveManagementNewTimeOffRequestRequest, date, dateFrom, dateTo, hours, timeFrom, timeTo, details, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementNewTimeOffRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class NewTimeOffRequestRequestBuilder {
        private final String type;
        private final Integer timeOffPolicyId;
        private final Integer employeeId;
        private final String partOfDay;
        private String date;
        private String dateFrom;
        private String dateTo;
        private Double hours;
        private String timeFrom;
        private String timeTo;
        private String details;

        private NewTimeOffRequestRequestBuilder(String type, Integer timeOffPolicyId, Integer employeeId, String partOfDay) {
            this.type = type;
            this.timeOffPolicyId = timeOffPolicyId;
            this.employeeId = employeeId;
            this.partOfDay = partOfDay;
        }

        /**
         * Set date
         * @param date format: YYYY-MM-DD; required if type is single (optional)
         * @return NewTimeOffRequestRequestBuilder
         */
        public NewTimeOffRequestRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set dateFrom
         * @param dateFrom format: YYYY-MM-DD; required if type is multi (optional)
         * @return NewTimeOffRequestRequestBuilder
         */
        public NewTimeOffRequestRequestBuilder dateFrom(String dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo format: YYYY-MM-DD; required if type is multi (optional)
         * @return NewTimeOffRequestRequestBuilder
         */
        public NewTimeOffRequestRequestBuilder dateTo(String dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Set hours
         * @param hours required if type is single &amp; part_of_day is first_part_of_day or second_part_of_day (optional)
         * @return NewTimeOffRequestRequestBuilder
         */
        public NewTimeOffRequestRequestBuilder hours(Double hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set timeFrom
         * @param timeFrom format: H:M; required if part_of_day is specific_timespan (optional)
         * @return NewTimeOffRequestRequestBuilder
         */
        public NewTimeOffRequestRequestBuilder timeFrom(String timeFrom) {
            this.timeFrom = timeFrom;
            return this;
        }
        
        /**
         * Set timeTo
         * @param timeTo format: H:M; required if part_of_day is specific_timespan (optional)
         * @return NewTimeOffRequestRequestBuilder
         */
        public NewTimeOffRequestRequestBuilder timeTo(String timeTo) {
            this.timeTo = timeTo;
            return this;
        }
        
        /**
         * Set details
         * @param details required based on policy settings (optional)
         * @return NewTimeOffRequestRequestBuilder
         */
        public NewTimeOffRequestRequestBuilder details(String details) {
            this.details = details;
            return this;
        }
        
        /**
         * Build call for newTimeOffRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveManagementNewTimeOffRequestRequest leaveManagementNewTimeOffRequestRequest = buildBodyParams();
            return newTimeOffRequestCall(type, timeOffPolicyId, employeeId, partOfDay, leaveManagementNewTimeOffRequestRequest, date, dateFrom, dateTo, hours, timeFrom, timeTo, details, _callback);
        }

        private LeaveManagementNewTimeOffRequestRequest buildBodyParams() {
            LeaveManagementNewTimeOffRequestRequest leaveManagementNewTimeOffRequestRequest = new LeaveManagementNewTimeOffRequestRequest();
            if (this.type != null)
            leaveManagementNewTimeOffRequestRequest.type(LeaveManagementNewTimeOffRequestRequest.TypeEnum.fromValue(this.type));
            leaveManagementNewTimeOffRequestRequest.timeOffPolicyId(this.timeOffPolicyId);
            leaveManagementNewTimeOffRequestRequest.employeeId(this.employeeId);
            leaveManagementNewTimeOffRequestRequest.date(this.date);
            leaveManagementNewTimeOffRequestRequest.dateFrom(this.dateFrom);
            leaveManagementNewTimeOffRequestRequest.dateTo(this.dateTo);
            if (this.partOfDay != null)
            leaveManagementNewTimeOffRequestRequest.partOfDay(LeaveManagementNewTimeOffRequestRequest.PartOfDayEnum.fromValue(this.partOfDay));
            leaveManagementNewTimeOffRequestRequest.hours(this.hours);
            leaveManagementNewTimeOffRequestRequest.timeFrom(this.timeFrom);
            leaveManagementNewTimeOffRequestRequest.timeTo(this.timeTo);
            leaveManagementNewTimeOffRequestRequest.details(this.details);
            return leaveManagementNewTimeOffRequestRequest;
        }

        /**
         * Execute newTimeOffRequest request
         * @return LeaveManagementNewTimeOffRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementNewTimeOffRequestResponse execute() throws ApiException {
            LeaveManagementNewTimeOffRequestRequest leaveManagementNewTimeOffRequestRequest = buildBodyParams();
            ApiResponse<LeaveManagementNewTimeOffRequestResponse> localVarResp = newTimeOffRequestWithHttpInfo(type, timeOffPolicyId, employeeId, partOfDay, leaveManagementNewTimeOffRequestRequest, date, dateFrom, dateTo, hours, timeFrom, timeTo, details);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute newTimeOffRequest request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementNewTimeOffRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementNewTimeOffRequestResponse> executeWithHttpInfo() throws ApiException {
            LeaveManagementNewTimeOffRequestRequest leaveManagementNewTimeOffRequestRequest = buildBodyParams();
            return newTimeOffRequestWithHttpInfo(type, timeOffPolicyId, employeeId, partOfDay, leaveManagementNewTimeOffRequestRequest, date, dateFrom, dateTo, hours, timeFrom, timeTo, details);
        }

        /**
         * Execute newTimeOffRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementNewTimeOffRequestResponse> _callback) throws ApiException {
            LeaveManagementNewTimeOffRequestRequest leaveManagementNewTimeOffRequestRequest = buildBodyParams();
            return newTimeOffRequestAsync(type, timeOffPolicyId, employeeId, partOfDay, leaveManagementNewTimeOffRequestRequest, date, dateFrom, dateTo, hours, timeFrom, timeTo, details, _callback);
        }
    }

    /**
     * Create new time off request
     * 
     * @param type  (required)
     * @param timeOffPolicyId  (required)
     * @param employeeId  (required)
     * @param partOfDay required if type is single (required)
     * @param leaveManagementNewTimeOffRequestRequest  (required)
     * @return NewTimeOffRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public NewTimeOffRequestRequestBuilder newTimeOffRequest(String type, Integer timeOffPolicyId, Integer employeeId, String partOfDay) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (timeOffPolicyId == null) throw new IllegalArgumentException("\"timeOffPolicyId\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        if (partOfDay == null) throw new IllegalArgumentException("\"partOfDay\" is required but got null");
            

        return new NewTimeOffRequestRequestBuilder(type, timeOffPolicyId, employeeId, partOfDay);
    }
    private okhttp3.Call processKitDayCall(Integer id, String status, LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveManagementProcessKitDayRequest;

        // create path and map variables
        String localVarPath = "/leave-management/kit-days/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processKitDayValidateBeforeCall(Integer id, String status, LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling processKitDay(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling processKitDay(Async)");
        }

        // verify the required parameter 'leaveManagementProcessKitDayRequest' is set
        if (leaveManagementProcessKitDayRequest == null) {
            throw new ApiException("Missing the required parameter 'leaveManagementProcessKitDayRequest' when calling processKitDay(Async)");
        }

        return processKitDayCall(id, status, leaveManagementProcessKitDayRequest, _callback);

    }


    private ApiResponse<Void> processKitDayWithHttpInfo(Integer id, String status, LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest) throws ApiException {
        okhttp3.Call localVarCall = processKitDayValidateBeforeCall(id, status, leaveManagementProcessKitDayRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call processKitDayAsync(Integer id, String status, LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = processKitDayValidateBeforeCall(id, status, leaveManagementProcessKitDayRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ProcessKitDayRequestBuilder {
        private final Integer id;
        private final String status;

        private ProcessKitDayRequestBuilder(Integer id, String status) {
            this.id = id;
            this.status = status;
        }

        /**
         * Build call for processKitDay
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest = buildBodyParams();
            return processKitDayCall(id, status, leaveManagementProcessKitDayRequest, _callback);
        }

        private LeaveManagementProcessKitDayRequest buildBodyParams() {
            LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest = new LeaveManagementProcessKitDayRequest();
            if (this.status != null)
            leaveManagementProcessKitDayRequest.status(LeaveManagementProcessKitDayRequest.StatusEnum.fromValue(this.status));
            return leaveManagementProcessKitDayRequest;
        }

        /**
         * Execute processKitDay request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest = buildBodyParams();
            processKitDayWithHttpInfo(id, status, leaveManagementProcessKitDayRequest);
        }

        /**
         * Execute processKitDay request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest = buildBodyParams();
            return processKitDayWithHttpInfo(id, status, leaveManagementProcessKitDayRequest);
        }

        /**
         * Execute processKitDay request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest = buildBodyParams();
            return processKitDayAsync(id, status, leaveManagementProcessKitDayRequest, _callback);
        }
    }

    /**
     * Approve, decline or cancel a KIT day
     * 
     * @param id KIT day identifier (required)
     * @param status Action to apply to the specified KIT day (required)
     * @param leaveManagementProcessKitDayRequest  (required)
     * @return ProcessKitDayRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ProcessKitDayRequestBuilder processKitDay(Integer id, String status) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new ProcessKitDayRequestBuilder(id, status);
    }
    private okhttp3.Call updateKitDaysConfigurationCall(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity, LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveManagementUpdateKitDaysConfigurationRequest;

        // create path and map variables
        String localVarPath = "/leave-management/policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kitDaysEnabled != null) {
            localVarFormParams.put("kit_days_enabled", kitDaysEnabled);
        }

        if (kitDaysQuantity != null) {
            localVarFormParams.put("kit_days_quantity", kitDaysQuantity);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateKitDaysConfigurationValidateBeforeCall(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity, LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateKitDaysConfiguration(Async)");
        }

        // verify the required parameter 'kitDaysEnabled' is set
        if (kitDaysEnabled == null) {
            throw new ApiException("Missing the required parameter 'kitDaysEnabled' when calling updateKitDaysConfiguration(Async)");
        }

        // verify the required parameter 'kitDaysQuantity' is set
        if (kitDaysQuantity == null) {
            throw new ApiException("Missing the required parameter 'kitDaysQuantity' when calling updateKitDaysConfiguration(Async)");
        }

        // verify the required parameter 'leaveManagementUpdateKitDaysConfigurationRequest' is set
        if (leaveManagementUpdateKitDaysConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'leaveManagementUpdateKitDaysConfigurationRequest' when calling updateKitDaysConfiguration(Async)");
        }

        return updateKitDaysConfigurationCall(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, _callback);

    }


    private ApiResponse<Void> updateKitDaysConfigurationWithHttpInfo(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity, LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateKitDaysConfigurationValidateBeforeCall(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateKitDaysConfigurationAsync(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity, LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateKitDaysConfigurationValidateBeforeCall(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateKitDaysConfigurationRequestBuilder {
        private final Integer id;
        private final Boolean kitDaysEnabled;
        private final Integer kitDaysQuantity;

        private UpdateKitDaysConfigurationRequestBuilder(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity) {
            this.id = id;
            this.kitDaysEnabled = kitDaysEnabled;
            this.kitDaysQuantity = kitDaysQuantity;
        }

        /**
         * Build call for updateKitDaysConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest = buildBodyParams();
            return updateKitDaysConfigurationCall(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, _callback);
        }

        private LeaveManagementUpdateKitDaysConfigurationRequest buildBodyParams() {
            LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest = new LeaveManagementUpdateKitDaysConfigurationRequest();
            if (this.kitDaysEnabled != null)
            leaveManagementUpdateKitDaysConfigurationRequest.kitDaysEnabled(LeaveManagementUpdateKitDaysConfigurationRequest.KitDaysEnabledEnum.fromValue(this.kitDaysEnabled));
            leaveManagementUpdateKitDaysConfigurationRequest.kitDaysQuantity(this.kitDaysQuantity);
            return leaveManagementUpdateKitDaysConfigurationRequest;
        }

        /**
         * Execute updateKitDaysConfiguration request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest = buildBodyParams();
            updateKitDaysConfigurationWithHttpInfo(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest);
        }

        /**
         * Execute updateKitDaysConfiguration request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest = buildBodyParams();
            return updateKitDaysConfigurationWithHttpInfo(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest);
        }

        /**
         * Execute updateKitDaysConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest = buildBodyParams();
            return updateKitDaysConfigurationAsync(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, _callback);
        }
    }

    /**
     * Update KIT days configuration of a time off policy
     * 
     * @param id Numeric ID of the policy to get. (required)
     * @param kitDaysEnabled Whether the policy allows Kit days or not (required)
     * @param kitDaysQuantity Maximum number of Kit days allowed in the policy (required)
     * @param leaveManagementUpdateKitDaysConfigurationRequest  (required)
     * @return UpdateKitDaysConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateKitDaysConfigurationRequestBuilder updateKitDaysConfiguration(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (kitDaysEnabled == null) throw new IllegalArgumentException("\"kitDaysEnabled\" is required but got null");
        if (kitDaysQuantity == null) throw new IllegalArgumentException("\"kitDaysQuantity\" is required but got null");
        return new UpdateKitDaysConfigurationRequestBuilder(id, kitDaysEnabled, kitDaysQuantity);
    }
}
