/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.RecruitmentCreateApplicantWithReferralRequest;
import com.konfigthis.client.model.RecruitmentCreateApplicantWithReferralResponse;
import com.konfigthis.client.model.RecruitmentGetApplicantDetailsResponse;
import com.konfigthis.client.model.RecruitmentGetPositionDetailsResponse;
import com.konfigthis.client.model.RecruitmentListApplicantActionsResponse;
import com.konfigthis.client.model.RecruitmentListApplicantsResponse;
import com.konfigthis.client.model.RecruitmentListPositionsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RecruitmentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecruitmentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RecruitmentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createApplicantWithReferralCall(Integer id, String applicantFirstName, String sendThankYouEmail, String applicantLastName, String applicantEmail, String applicantReferral, String applicantPhoneNumber, String applicantSource, String applicantAddress, String applicantSummary, File applicantAttachment, RecruitmentCreateApplicantWithReferralRequest recruitmentCreateApplicantWithReferralRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recruitmentCreateApplicantWithReferralRequest;

        // create path and map variables
        String localVarPath = "/recruitment/positions/{id}/applicants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendThankYouEmail != null) {
            localVarFormParams.put("send_thank_you_email", sendThankYouEmail);
        }

        if (applicantFirstName != null) {
            localVarFormParams.put("applicant[first_name]", applicantFirstName);
        }

        if (applicantLastName != null) {
            localVarFormParams.put("applicant[last_name]", applicantLastName);
        }

        if (applicantEmail != null) {
            localVarFormParams.put("applicant[email]", applicantEmail);
        }

        if (applicantReferral != null) {
            localVarFormParams.put("applicant[referral]", applicantReferral);
        }

        if (applicantPhoneNumber != null) {
            localVarFormParams.put("applicant[phone_number]", applicantPhoneNumber);
        }

        if (applicantSource != null) {
            localVarFormParams.put("applicant[source]", applicantSource);
        }

        if (applicantAddress != null) {
            localVarFormParams.put("applicant[address]", applicantAddress);
        }

        if (applicantSummary != null) {
            localVarFormParams.put("applicant[summary]", applicantSummary);
        }

        if (applicantAttachment != null) {
            localVarFormParams.put("applicant[attachment]", applicantAttachment);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApplicantWithReferralValidateBeforeCall(Integer id, String applicantFirstName, String sendThankYouEmail, String applicantLastName, String applicantEmail, String applicantReferral, String applicantPhoneNumber, String applicantSource, String applicantAddress, String applicantSummary, File applicantAttachment, RecruitmentCreateApplicantWithReferralRequest recruitmentCreateApplicantWithReferralRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createApplicantWithReferral(Async)");
        }

        // verify the required parameter 'applicantFirstName' is set
        if (applicantFirstName == null) {
            throw new ApiException("Missing the required parameter 'applicantFirstName' when calling createApplicantWithReferral(Async)");
        }

        return createApplicantWithReferralCall(id, applicantFirstName, sendThankYouEmail, applicantLastName, applicantEmail, applicantReferral, applicantPhoneNumber, applicantSource, applicantAddress, applicantSummary, applicantAttachment, recruitmentCreateApplicantWithReferralRequest, _callback);

    }


    private ApiResponse<RecruitmentCreateApplicantWithReferralResponse> createApplicantWithReferralWithHttpInfo(Integer id, String applicantFirstName, String sendThankYouEmail, String applicantLastName, String applicantEmail, String applicantReferral, String applicantPhoneNumber, String applicantSource, String applicantAddress, String applicantSummary, File applicantAttachment, RecruitmentCreateApplicantWithReferralRequest recruitmentCreateApplicantWithReferralRequest) throws ApiException {
        okhttp3.Call localVarCall = createApplicantWithReferralValidateBeforeCall(id, applicantFirstName, sendThankYouEmail, applicantLastName, applicantEmail, applicantReferral, applicantPhoneNumber, applicantSource, applicantAddress, applicantSummary, applicantAttachment, recruitmentCreateApplicantWithReferralRequest, null);
        Type localVarReturnType = new TypeToken<RecruitmentCreateApplicantWithReferralResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createApplicantWithReferralAsync(Integer id, String applicantFirstName, String sendThankYouEmail, String applicantLastName, String applicantEmail, String applicantReferral, String applicantPhoneNumber, String applicantSource, String applicantAddress, String applicantSummary, File applicantAttachment, RecruitmentCreateApplicantWithReferralRequest recruitmentCreateApplicantWithReferralRequest, final ApiCallback<RecruitmentCreateApplicantWithReferralResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApplicantWithReferralValidateBeforeCall(id, applicantFirstName, sendThankYouEmail, applicantLastName, applicantEmail, applicantReferral, applicantPhoneNumber, applicantSource, applicantAddress, applicantSummary, applicantAttachment, recruitmentCreateApplicantWithReferralRequest, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentCreateApplicantWithReferralResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateApplicantWithReferralRequestBuilder {
        private final Integer id;
        private final String applicantFirstName;
        private String sendThankYouEmail;
        private String applicantLastName;
        private String applicantEmail;
        private String applicantReferral;
        private String applicantPhoneNumber;
        private String applicantSource;
        private String applicantAddress;
        private String applicantSummary;
        private File applicantAttachment;

        private CreateApplicantWithReferralRequestBuilder(Integer id, String applicantFirstName) {
            this.id = id;
            this.applicantFirstName = applicantFirstName;
        }

        /**
         * Set sendThankYouEmail
         * @param sendThankYouEmail &#39;true&#39; to send thank you email to applicant (optional)
         * @return CreateApplicantWithReferralRequestBuilder
         */
        public CreateApplicantWithReferralRequestBuilder sendThankYouEmail(String sendThankYouEmail) {
            this.sendThankYouEmail = sendThankYouEmail;
            return this;
        }
        
        /**
         * Set applicantLastName
         * @param applicantLastName  (optional)
         * @return CreateApplicantWithReferralRequestBuilder
         */
        public CreateApplicantWithReferralRequestBuilder applicantLastName(String applicantLastName) {
            this.applicantLastName = applicantLastName;
            return this;
        }
        
        /**
         * Set applicantEmail
         * @param applicantEmail  (optional)
         * @return CreateApplicantWithReferralRequestBuilder
         */
        public CreateApplicantWithReferralRequestBuilder applicantEmail(String applicantEmail) {
            this.applicantEmail = applicantEmail;
            return this;
        }
        
        /**
         * Set applicantReferral
         * @param applicantReferral  (optional)
         * @return CreateApplicantWithReferralRequestBuilder
         */
        public CreateApplicantWithReferralRequestBuilder applicantReferral(String applicantReferral) {
            this.applicantReferral = applicantReferral;
            return this;
        }
        
        /**
         * Set applicantPhoneNumber
         * @param applicantPhoneNumber  (optional)
         * @return CreateApplicantWithReferralRequestBuilder
         */
        public CreateApplicantWithReferralRequestBuilder applicantPhoneNumber(String applicantPhoneNumber) {
            this.applicantPhoneNumber = applicantPhoneNumber;
            return this;
        }
        
        /**
         * Set applicantSource
         * @param applicantSource  (optional)
         * @return CreateApplicantWithReferralRequestBuilder
         */
        public CreateApplicantWithReferralRequestBuilder applicantSource(String applicantSource) {
            this.applicantSource = applicantSource;
            return this;
        }
        
        /**
         * Set applicantAddress
         * @param applicantAddress  (optional)
         * @return CreateApplicantWithReferralRequestBuilder
         */
        public CreateApplicantWithReferralRequestBuilder applicantAddress(String applicantAddress) {
            this.applicantAddress = applicantAddress;
            return this;
        }
        
        /**
         * Set applicantSummary
         * @param applicantSummary  (optional)
         * @return CreateApplicantWithReferralRequestBuilder
         */
        public CreateApplicantWithReferralRequestBuilder applicantSummary(String applicantSummary) {
            this.applicantSummary = applicantSummary;
            return this;
        }
        
        /**
         * Set applicantAttachment
         * @param applicantAttachment The file to upload. (optional)
         * @return CreateApplicantWithReferralRequestBuilder
         */
        public CreateApplicantWithReferralRequestBuilder applicantAttachment(File applicantAttachment) {
            this.applicantAttachment = applicantAttachment;
            return this;
        }
        
        /**
         * Build call for createApplicantWithReferral
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecruitmentCreateApplicantWithReferralRequest recruitmentCreateApplicantWithReferralRequest = buildBodyParams();
            return createApplicantWithReferralCall(id, applicantFirstName, sendThankYouEmail, applicantLastName, applicantEmail, applicantReferral, applicantPhoneNumber, applicantSource, applicantAddress, applicantSummary, applicantAttachment, recruitmentCreateApplicantWithReferralRequest, _callback);
        }

        private RecruitmentCreateApplicantWithReferralRequest buildBodyParams() {
            RecruitmentCreateApplicantWithReferralRequest recruitmentCreateApplicantWithReferralRequest = new RecruitmentCreateApplicantWithReferralRequest();
            recruitmentCreateApplicantWithReferralRequest.sendThankYouEmail(this.sendThankYouEmail);
            recruitmentCreateApplicantWithReferralRequest.applicantFirstName(this.applicantFirstName);
            recruitmentCreateApplicantWithReferralRequest.applicantLastName(this.applicantLastName);
            recruitmentCreateApplicantWithReferralRequest.applicantEmail(this.applicantEmail);
            recruitmentCreateApplicantWithReferralRequest.applicantReferral(this.applicantReferral);
            recruitmentCreateApplicantWithReferralRequest.applicantPhoneNumber(this.applicantPhoneNumber);
            recruitmentCreateApplicantWithReferralRequest.applicantSource(this.applicantSource);
            recruitmentCreateApplicantWithReferralRequest.applicantAddress(this.applicantAddress);
            recruitmentCreateApplicantWithReferralRequest.applicantSummary(this.applicantSummary);
            recruitmentCreateApplicantWithReferralRequest.applicantAttachment(this.applicantAttachment);
            return recruitmentCreateApplicantWithReferralRequest;
        }

        /**
         * Execute createApplicantWithReferral request
         * @return RecruitmentCreateApplicantWithReferralResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentCreateApplicantWithReferralResponse execute() throws ApiException {
            RecruitmentCreateApplicantWithReferralRequest recruitmentCreateApplicantWithReferralRequest = buildBodyParams();
            ApiResponse<RecruitmentCreateApplicantWithReferralResponse> localVarResp = createApplicantWithReferralWithHttpInfo(id, applicantFirstName, sendThankYouEmail, applicantLastName, applicantEmail, applicantReferral, applicantPhoneNumber, applicantSource, applicantAddress, applicantSummary, applicantAttachment, recruitmentCreateApplicantWithReferralRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createApplicantWithReferral request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentCreateApplicantWithReferralResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentCreateApplicantWithReferralResponse> executeWithHttpInfo() throws ApiException {
            RecruitmentCreateApplicantWithReferralRequest recruitmentCreateApplicantWithReferralRequest = buildBodyParams();
            return createApplicantWithReferralWithHttpInfo(id, applicantFirstName, sendThankYouEmail, applicantLastName, applicantEmail, applicantReferral, applicantPhoneNumber, applicantSource, applicantAddress, applicantSummary, applicantAttachment, recruitmentCreateApplicantWithReferralRequest);
        }

        /**
         * Execute createApplicantWithReferral request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentCreateApplicantWithReferralResponse> _callback) throws ApiException {
            RecruitmentCreateApplicantWithReferralRequest recruitmentCreateApplicantWithReferralRequest = buildBodyParams();
            return createApplicantWithReferralAsync(id, applicantFirstName, sendThankYouEmail, applicantLastName, applicantEmail, applicantReferral, applicantPhoneNumber, applicantSource, applicantAddress, applicantSummary, applicantAttachment, recruitmentCreateApplicantWithReferralRequest, _callback);
        }
    }

    /**
     * Create new applicant
     * Tracking applicant&#39;s source:  * if left blank, source will be automatically set to &#x60;api&#x60;  * set source to a special keyword (&#x60;company_marketing&#x60;, &#x60;recruiters&#x60;, &#x60;referral&#x60;, &#x60;sourced&#x60;) to have it mapped to corresponding values   * set source to a desired reference to create a custom source, e.g. &#x60;source&#x3D;linkedin&#x60; will create a custom source called linkedin if it does not exist already  * passing a referral object as a parameter will set the source to &#x60;referral&#x60;    Example of creating an applicant with a refferal object: &#x60;&#x60;&#x60; curl -X POST -H &#39;X-AUTH-TOKEN:***&#39; -H &#39;Content-Type:application/json&#39; \\   \&quot;https://_***_/api/recruitment/positions/2/applicants\&quot; \\   -d &#39;{\&quot;applicant\&quot;: \\           {\&quot;referral\&quot;: {\&quot;email\&quot;: \&quot;recruitment@example.com\&quot;, \&quot;full_name\&quot;: \&quot;Alice L\&quot;}, \\            \&quot;address\&quot;: \&quot;BD23 8UL\&quot;, \&quot;summary\&quot;:\&quot;An applicant\&quot;, \\            \&quot;first_name\&quot;: \&quot;Applicant Name\&quot;}}&#39; &#x60;&#x60;&#x60; 
     * @param id Numeric ID of position (must not be closed or completed). (required)
     * @param applicantFirstName  (required)
     * @return CreateApplicantWithReferralRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateApplicantWithReferralRequestBuilder createApplicantWithReferral(Integer id, String applicantFirstName) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (applicantFirstName == null) throw new IllegalArgumentException("\"applicantFirstName\" is required but got null");
            

        return new CreateApplicantWithReferralRequestBuilder(id, applicantFirstName);
    }
    private okhttp3.Call getApplicantDetailsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruitment/applicants/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicantDetailsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getApplicantDetails(Async)");
        }

        return getApplicantDetailsCall(id, _callback);

    }


    private ApiResponse<RecruitmentGetApplicantDetailsResponse> getApplicantDetailsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getApplicantDetailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RecruitmentGetApplicantDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApplicantDetailsAsync(Integer id, final ApiCallback<RecruitmentGetApplicantDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicantDetailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentGetApplicantDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApplicantDetailsRequestBuilder {
        private final Integer id;

        private GetApplicantDetailsRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getApplicantDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApplicantDetailsCall(id, _callback);
        }


        /**
         * Execute getApplicantDetails request
         * @return RecruitmentGetApplicantDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentGetApplicantDetailsResponse execute() throws ApiException {
            ApiResponse<RecruitmentGetApplicantDetailsResponse> localVarResp = getApplicantDetailsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApplicantDetails request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentGetApplicantDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentGetApplicantDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getApplicantDetailsWithHttpInfo(id);
        }

        /**
         * Execute getApplicantDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentGetApplicantDetailsResponse> _callback) throws ApiException {
            return getApplicantDetailsAsync(id, _callback);
        }
    }

    /**
     * Applicant details
     * 
     * @param id Numeric ID of applicant (required)
     * @return GetApplicantDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetApplicantDetailsRequestBuilder getApplicantDetails(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetApplicantDetailsRequestBuilder(id);
    }
    private okhttp3.Call getPositionDetailsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruitment/positions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPositionDetailsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPositionDetails(Async)");
        }

        return getPositionDetailsCall(id, _callback);

    }


    private ApiResponse<RecruitmentGetPositionDetailsResponse> getPositionDetailsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getPositionDetailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RecruitmentGetPositionDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPositionDetailsAsync(Integer id, final ApiCallback<RecruitmentGetPositionDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPositionDetailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentGetPositionDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPositionDetailsRequestBuilder {
        private final Integer id;

        private GetPositionDetailsRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getPositionDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPositionDetailsCall(id, _callback);
        }


        /**
         * Execute getPositionDetails request
         * @return RecruitmentGetPositionDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentGetPositionDetailsResponse execute() throws ApiException {
            ApiResponse<RecruitmentGetPositionDetailsResponse> localVarResp = getPositionDetailsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPositionDetails request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentGetPositionDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentGetPositionDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getPositionDetailsWithHttpInfo(id);
        }

        /**
         * Execute getPositionDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentGetPositionDetailsResponse> _callback) throws ApiException {
            return getPositionDetailsAsync(id, _callback);
        }
    }

    /**
     * Position details
     * 
     * @param id Numeric ID of position (required)
     * @return GetPositionDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetPositionDetailsRequestBuilder getPositionDetails(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetPositionDetailsRequestBuilder(id);
    }
    private okhttp3.Call listApplicantActionsCall(Integer id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruitment/applicants/{id}/actions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listApplicantActionsValidateBeforeCall(Integer id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listApplicantActions(Async)");
        }

        return listApplicantActionsCall(id, page, perPage, _callback);

    }


    private ApiResponse<RecruitmentListApplicantActionsResponse> listApplicantActionsWithHttpInfo(Integer id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listApplicantActionsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<RecruitmentListApplicantActionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listApplicantActionsAsync(Integer id, Integer page, Integer perPage, final ApiCallback<RecruitmentListApplicantActionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listApplicantActionsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentListApplicantActionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListApplicantActionsRequestBuilder {
        private final Integer id;
        private Integer page;
        private Integer perPage;

        private ListApplicantActionsRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Pagination: fetch page at given offset (optional)
         * @return ListApplicantActionsRequestBuilder
         */
        public ListApplicantActionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Pagination: amount of actions to return in 1 call, default: 30, max: 100  (optional)
         * @return ListApplicantActionsRequestBuilder
         */
        public ListApplicantActionsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listApplicantActions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listApplicantActionsCall(id, page, perPage, _callback);
        }


        /**
         * Execute listApplicantActions request
         * @return RecruitmentListApplicantActionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentListApplicantActionsResponse execute() throws ApiException {
            ApiResponse<RecruitmentListApplicantActionsResponse> localVarResp = listApplicantActionsWithHttpInfo(id, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listApplicantActions request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentListApplicantActionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentListApplicantActionsResponse> executeWithHttpInfo() throws ApiException {
            return listApplicantActionsWithHttpInfo(id, page, perPage);
        }

        /**
         * Execute listApplicantActions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentListApplicantActionsResponse> _callback) throws ApiException {
            return listApplicantActionsAsync(id, page, perPage, _callback);
        }
    }

    /**
     * Applicant actions
     * List applicant&#39;s process throught the recruitment pipeline. Newest, first. 
     * @param id Numeric ID of applicant (required)
     * @return ListApplicantActionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListApplicantActionsRequestBuilder listApplicantActions(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ListApplicantActionsRequestBuilder(id);
    }
    private okhttp3.Call listApplicantsCall(Integer id, Integer stageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruitment/positions/{id}/applicants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_id", stageId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listApplicantsValidateBeforeCall(Integer id, Integer stageId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listApplicants(Async)");
        }

        return listApplicantsCall(id, stageId, page, perPage, _callback);

    }


    private ApiResponse<RecruitmentListApplicantsResponse> listApplicantsWithHttpInfo(Integer id, Integer stageId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listApplicantsValidateBeforeCall(id, stageId, page, perPage, null);
        Type localVarReturnType = new TypeToken<RecruitmentListApplicantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listApplicantsAsync(Integer id, Integer stageId, Integer page, Integer perPage, final ApiCallback<RecruitmentListApplicantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listApplicantsValidateBeforeCall(id, stageId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentListApplicantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListApplicantsRequestBuilder {
        private final Integer id;
        private Integer stageId;
        private Integer page;
        private Integer perPage;

        private ListApplicantsRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set stageId
         * @param stageId Optional filter by stage e.g. &#x60;?stage_id&#x3D;25&#x60; (optional)
         * @return ListApplicantsRequestBuilder
         */
        public ListApplicantsRequestBuilder stageId(Integer stageId) {
            this.stageId = stageId;
            return this;
        }
        
        /**
         * Set page
         * @param page Pagination: fetch page at given offset, default 1 (optional)
         * @return ListApplicantsRequestBuilder
         */
        public ListApplicantsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Pagination: amount of applicants to return in 1 call, default: 30, max: 100  (optional)
         * @return ListApplicantsRequestBuilder
         */
        public ListApplicantsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listApplicants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listApplicantsCall(id, stageId, page, perPage, _callback);
        }


        /**
         * Execute listApplicants request
         * @return RecruitmentListApplicantsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentListApplicantsResponse execute() throws ApiException {
            ApiResponse<RecruitmentListApplicantsResponse> localVarResp = listApplicantsWithHttpInfo(id, stageId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listApplicants request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentListApplicantsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentListApplicantsResponse> executeWithHttpInfo() throws ApiException {
            return listApplicantsWithHttpInfo(id, stageId, page, perPage);
        }

        /**
         * Execute listApplicants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentListApplicantsResponse> _callback) throws ApiException {
            return listApplicantsAsync(id, stageId, page, perPage, _callback);
        }
    }

    /**
     * List applicants
     * 
     * @param id Numeric ID of position (required)
     * @return ListApplicantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListApplicantsRequestBuilder listApplicants(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ListApplicantsRequestBuilder(id);
    }
    private okhttp3.Call listPositionsCall(String status, List<String> hiringManagerIds, List<String> groupIds, List<String> locationIds, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruitment/positions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (hiringManagerIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "hiring_manager_ids", hiringManagerIds));
        }

        if (groupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "group_ids", groupIds));
        }

        if (locationIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "location_ids", locationIds));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPositionsValidateBeforeCall(String status, List<String> hiringManagerIds, List<String> groupIds, List<String> locationIds, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listPositionsCall(status, hiringManagerIds, groupIds, locationIds, page, perPage, _callback);

    }


    private ApiResponse<RecruitmentListPositionsResponse> listPositionsWithHttpInfo(String status, List<String> hiringManagerIds, List<String> groupIds, List<String> locationIds, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listPositionsValidateBeforeCall(status, hiringManagerIds, groupIds, locationIds, page, perPage, null);
        Type localVarReturnType = new TypeToken<RecruitmentListPositionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPositionsAsync(String status, List<String> hiringManagerIds, List<String> groupIds, List<String> locationIds, Integer page, Integer perPage, final ApiCallback<RecruitmentListPositionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPositionsValidateBeforeCall(status, hiringManagerIds, groupIds, locationIds, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentListPositionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPositionsRequestBuilder {
        private String status;
        private List<String> hiringManagerIds;
        private List<String> groupIds;
        private List<String> locationIds;
        private Integer page;
        private Integer perPage;

        private ListPositionsRequestBuilder() {
        }

        /**
         * Set status
         * @param status Filter by status, see list of possible statuses &#x60;?status&#x3D;open&#x60;  (optional)
         * @return ListPositionsRequestBuilder
         */
        public ListPositionsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set hiringManagerIds
         * @param hiringManagerIds Filter by hiring manager id, can appear multiple times &#x60;hiring_manager_ids[]&#x3D;251&amp;hiring_manager_ids[]&#x3D;121&#x60;  (optional)
         * @return ListPositionsRequestBuilder
         */
        public ListPositionsRequestBuilder hiringManagerIds(List<String> hiringManagerIds) {
            this.hiringManagerIds = hiringManagerIds;
            return this;
        }
        
        /**
         * Set groupIds
         * @param groupIds Filter by group id, can appear multiple times &#x60;group_ids[]&#x3D;27&amp;group_ids[]&#x3D;761&#x60;  (optional)
         * @return ListPositionsRequestBuilder
         */
        public ListPositionsRequestBuilder groupIds(List<String> groupIds) {
            this.groupIds = groupIds;
            return this;
        }
        
        /**
         * Set locationIds
         * @param locationIds Filter by location id, can appear multiple times &#x60;location_ids[]&#x3D;1&amp;location_ids[]&#x3D;12&#x60;  (optional)
         * @return ListPositionsRequestBuilder
         */
        public ListPositionsRequestBuilder locationIds(List<String> locationIds) {
            this.locationIds = locationIds;
            return this;
        }
        
        /**
         * Set page
         * @param page Pagination: fetch page at given offset (optional)
         * @return ListPositionsRequestBuilder
         */
        public ListPositionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Pagination: amount of positions to return in 1 call, default: 30, max: 100  (optional)
         * @return ListPositionsRequestBuilder
         */
        public ListPositionsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listPositions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPositionsCall(status, hiringManagerIds, groupIds, locationIds, page, perPage, _callback);
        }


        /**
         * Execute listPositions request
         * @return RecruitmentListPositionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentListPositionsResponse execute() throws ApiException {
            ApiResponse<RecruitmentListPositionsResponse> localVarResp = listPositionsWithHttpInfo(status, hiringManagerIds, groupIds, locationIds, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPositions request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentListPositionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentListPositionsResponse> executeWithHttpInfo() throws ApiException {
            return listPositionsWithHttpInfo(status, hiringManagerIds, groupIds, locationIds, page, perPage);
        }

        /**
         * Execute listPositions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentListPositionsResponse> _callback) throws ApiException {
            return listPositionsAsync(status, hiringManagerIds, groupIds, locationIds, page, perPage, _callback);
        }
    }

    /**
     * List recruitment positions
     * Posible recruitment position statuses: &#x60;draft&#x60;, &#x60;published&#x60;, &#x60;internal&#x60;, &#x60;completed&#x60;, &#x60;cancelled&#x60; 
     * @return ListPositionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListPositionsRequestBuilder listPositions() throws IllegalArgumentException {
        return new ListPositionsRequestBuilder();
    }
}
