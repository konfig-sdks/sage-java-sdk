/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OnboardingCreateNewTaskRequest;
import com.konfigthis.client.model.OnboardingCreateNewTaskResponse;
import com.konfigthis.client.model.OnboardingListTaskCategoriesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OnboardingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnboardingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OnboardingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTaskCall(String title, Double boardingTaskTemplateCategoryId, Double dueIn, OnboardingCreateNewTaskRequest onboardingCreateNewTaskRequest, String description, String defaultAssigneeType, Double assigneeId, String requireAttachment, Double addAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onboardingCreateNewTaskRequest;

        // create path and map variables
        String localVarPath = "/onboarding/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (boardingTaskTemplateCategoryId != null) {
            localVarFormParams.put("boarding_task_template_category_id", boardingTaskTemplateCategoryId);
        }

        if (dueIn != null) {
            localVarFormParams.put("due_in", dueIn);
        }

        if (defaultAssigneeType != null) {
            localVarFormParams.put("default_assignee_type", defaultAssigneeType);
        }

        if (assigneeId != null) {
            localVarFormParams.put("assignee_id", assigneeId);
        }

        if (requireAttachment != null) {
            localVarFormParams.put("require_attachment", requireAttachment);
        }

        if (addAfter != null) {
            localVarFormParams.put("add_after", addAfter);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTaskValidateBeforeCall(String title, Double boardingTaskTemplateCategoryId, Double dueIn, OnboardingCreateNewTaskRequest onboardingCreateNewTaskRequest, String description, String defaultAssigneeType, Double assigneeId, String requireAttachment, Double addAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling createNewTask(Async)");
        }

        // verify the required parameter 'boardingTaskTemplateCategoryId' is set
        if (boardingTaskTemplateCategoryId == null) {
            throw new ApiException("Missing the required parameter 'boardingTaskTemplateCategoryId' when calling createNewTask(Async)");
        }

        // verify the required parameter 'dueIn' is set
        if (dueIn == null) {
            throw new ApiException("Missing the required parameter 'dueIn' when calling createNewTask(Async)");
        }

        // verify the required parameter 'onboardingCreateNewTaskRequest' is set
        if (onboardingCreateNewTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'onboardingCreateNewTaskRequest' when calling createNewTask(Async)");
        }

        return createNewTaskCall(title, boardingTaskTemplateCategoryId, dueIn, onboardingCreateNewTaskRequest, description, defaultAssigneeType, assigneeId, requireAttachment, addAfter, _callback);

    }


    private ApiResponse<OnboardingCreateNewTaskResponse> createNewTaskWithHttpInfo(String title, Double boardingTaskTemplateCategoryId, Double dueIn, OnboardingCreateNewTaskRequest onboardingCreateNewTaskRequest, String description, String defaultAssigneeType, Double assigneeId, String requireAttachment, Double addAfter) throws ApiException {
        okhttp3.Call localVarCall = createNewTaskValidateBeforeCall(title, boardingTaskTemplateCategoryId, dueIn, onboardingCreateNewTaskRequest, description, defaultAssigneeType, assigneeId, requireAttachment, addAfter, null);
        Type localVarReturnType = new TypeToken<OnboardingCreateNewTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTaskAsync(String title, Double boardingTaskTemplateCategoryId, Double dueIn, OnboardingCreateNewTaskRequest onboardingCreateNewTaskRequest, String description, String defaultAssigneeType, Double assigneeId, String requireAttachment, Double addAfter, final ApiCallback<OnboardingCreateNewTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTaskValidateBeforeCall(title, boardingTaskTemplateCategoryId, dueIn, onboardingCreateNewTaskRequest, description, defaultAssigneeType, assigneeId, requireAttachment, addAfter, _callback);
        Type localVarReturnType = new TypeToken<OnboardingCreateNewTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTaskRequestBuilder {
        private final String title;
        private final Double boardingTaskTemplateCategoryId;
        private final Double dueIn;
        private String description;
        private String defaultAssigneeType;
        private Double assigneeId;
        private String requireAttachment;
        private Double addAfter;

        private CreateNewTaskRequestBuilder(String title, double boardingTaskTemplateCategoryId, double dueIn) {
            this.title = title;
            this.boardingTaskTemplateCategoryId = boardingTaskTemplateCategoryId;
            this.dueIn = dueIn;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set defaultAssigneeType
         * @param defaultAssigneeType Default: self; leader - direct manager; employee - specific employee via assignee_id (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder defaultAssigneeType(String defaultAssigneeType) {
            this.defaultAssigneeType = defaultAssigneeType;
            return this;
        }
        
        /**
         * Set assigneeId
         * @param assigneeId Specific assignee if default_assignee_type is &#39;employee&#39; (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder assigneeId(Double assigneeId) {
            this.assigneeId = assigneeId;
            return this;
        }
        
        /**
         * Set requireAttachment
         * @param requireAttachment &#39;true&#39; to enabled required attachment (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder requireAttachment(String requireAttachment) {
            this.requireAttachment = requireAttachment;
            return this;
        }
        
        /**
         * Set addAfter
         * @param addAfter Task start date in days after employee start date (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder addAfter(Double addAfter) {
            this.addAfter = addAfter;
            return this;
        }
        
        /**
         * Build call for createNewTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OnboardingCreateNewTaskRequest onboardingCreateNewTaskRequest = buildBodyParams();
            return createNewTaskCall(title, boardingTaskTemplateCategoryId, dueIn, onboardingCreateNewTaskRequest, description, defaultAssigneeType, assigneeId, requireAttachment, addAfter, _callback);
        }

        private OnboardingCreateNewTaskRequest buildBodyParams() {
            OnboardingCreateNewTaskRequest onboardingCreateNewTaskRequest = new OnboardingCreateNewTaskRequest();
            onboardingCreateNewTaskRequest.title(this.title);
            onboardingCreateNewTaskRequest.description(this.description);
            onboardingCreateNewTaskRequest.boardingTaskTemplateCategoryId(this.boardingTaskTemplateCategoryId);
            onboardingCreateNewTaskRequest.dueIn(this.dueIn);
            if (this.defaultAssigneeType != null)
            onboardingCreateNewTaskRequest.defaultAssigneeType(OnboardingCreateNewTaskRequest.DefaultAssigneeTypeEnum.fromValue(this.defaultAssigneeType));
            onboardingCreateNewTaskRequest.assigneeId(this.assigneeId);
            onboardingCreateNewTaskRequest.requireAttachment(this.requireAttachment);
            onboardingCreateNewTaskRequest.addAfter(this.addAfter);
            return onboardingCreateNewTaskRequest;
        }

        /**
         * Execute createNewTask request
         * @return OnboardingCreateNewTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public OnboardingCreateNewTaskResponse execute() throws ApiException {
            OnboardingCreateNewTaskRequest onboardingCreateNewTaskRequest = buildBodyParams();
            ApiResponse<OnboardingCreateNewTaskResponse> localVarResp = createNewTaskWithHttpInfo(title, boardingTaskTemplateCategoryId, dueIn, onboardingCreateNewTaskRequest, description, defaultAssigneeType, assigneeId, requireAttachment, addAfter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTask request with HTTP info returned
         * @return ApiResponse&lt;OnboardingCreateNewTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnboardingCreateNewTaskResponse> executeWithHttpInfo() throws ApiException {
            OnboardingCreateNewTaskRequest onboardingCreateNewTaskRequest = buildBodyParams();
            return createNewTaskWithHttpInfo(title, boardingTaskTemplateCategoryId, dueIn, onboardingCreateNewTaskRequest, description, defaultAssigneeType, assigneeId, requireAttachment, addAfter);
        }

        /**
         * Execute createNewTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnboardingCreateNewTaskResponse> _callback) throws ApiException {
            OnboardingCreateNewTaskRequest onboardingCreateNewTaskRequest = buildBodyParams();
            return createNewTaskAsync(title, boardingTaskTemplateCategoryId, dueIn, onboardingCreateNewTaskRequest, description, defaultAssigneeType, assigneeId, requireAttachment, addAfter, _callback);
        }
    }

    /**
     * Create new onboarding task
     * 
     * @param title  (required)
     * @param boardingTaskTemplateCategoryId  (required)
     * @param dueIn Due date in days after employee start date (required)
     * @param onboardingCreateNewTaskRequest  (required)
     * @return CreateNewTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTaskRequestBuilder createNewTask(String title, double boardingTaskTemplateCategoryId, double dueIn) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        
        
        return new CreateNewTaskRequestBuilder(title, boardingTaskTemplateCategoryId, dueIn);
    }
    private okhttp3.Call listTaskCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onboarding/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTaskCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listTaskCategoriesCall(_callback);

    }


    private ApiResponse<OnboardingListTaskCategoriesResponse> listTaskCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listTaskCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OnboardingListTaskCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTaskCategoriesAsync(final ApiCallback<OnboardingListTaskCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTaskCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OnboardingListTaskCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTaskCategoriesRequestBuilder {

        private ListTaskCategoriesRequestBuilder() {
        }

        /**
         * Build call for listTaskCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTaskCategoriesCall(_callback);
        }


        /**
         * Execute listTaskCategories request
         * @return OnboardingListTaskCategoriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public OnboardingListTaskCategoriesResponse execute() throws ApiException {
            ApiResponse<OnboardingListTaskCategoriesResponse> localVarResp = listTaskCategoriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTaskCategories request with HTTP info returned
         * @return ApiResponse&lt;OnboardingListTaskCategoriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnboardingListTaskCategoriesResponse> executeWithHttpInfo() throws ApiException {
            return listTaskCategoriesWithHttpInfo();
        }

        /**
         * Execute listTaskCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnboardingListTaskCategoriesResponse> _callback) throws ApiException {
            return listTaskCategoriesAsync(_callback);
        }
    }

    /**
     * List onboarding task categories
     * 
     * @return ListTaskCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListTaskCategoriesRequestBuilder listTaskCategories() throws IllegalArgumentException {
        return new ListTaskCategoriesRequestBuilder();
    }
}
