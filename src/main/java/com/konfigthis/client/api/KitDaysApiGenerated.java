/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LeaveManagementCreateKitDayRequest;
import com.konfigthis.client.model.LeaveManagementCreateKitDayResponse;
import com.konfigthis.client.model.LeaveManagementGetKitDaysResponse;
import com.konfigthis.client.model.LeaveManagementProcessKitDayRequest;
import com.konfigthis.client.model.LeaveManagementUpdateKitDaysConfigurationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class KitDaysApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KitDaysApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public KitDaysApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createKitDayCall(Integer policyId, Integer employeeId, LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest, String date, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveManagementCreateKitDayRequest;

        // create path and map variables
        String localVarPath = "/leave-management/kit-days";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyId != null) {
            localVarFormParams.put("policy_id", policyId);
        }

        if (employeeId != null) {
            localVarFormParams.put("employee_id", employeeId);
        }

        if (date != null) {
            localVarFormParams.put("date", date);
        }

        if (dateFrom != null) {
            localVarFormParams.put("date_from", dateFrom);
        }

        if (dateTo != null) {
            localVarFormParams.put("date_to", dateTo);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createKitDayValidateBeforeCall(Integer policyId, Integer employeeId, LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest, String date, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling createKitDay(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createKitDay(Async)");
        }

        // verify the required parameter 'leaveManagementCreateKitDayRequest' is set
        if (leaveManagementCreateKitDayRequest == null) {
            throw new ApiException("Missing the required parameter 'leaveManagementCreateKitDayRequest' when calling createKitDay(Async)");
        }

        return createKitDayCall(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo, _callback);

    }


    private ApiResponse<LeaveManagementCreateKitDayResponse> createKitDayWithHttpInfo(Integer policyId, Integer employeeId, LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest, String date, String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = createKitDayValidateBeforeCall(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo, null);
        Type localVarReturnType = new TypeToken<LeaveManagementCreateKitDayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createKitDayAsync(Integer policyId, Integer employeeId, LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest, String date, String dateFrom, String dateTo, final ApiCallback<LeaveManagementCreateKitDayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createKitDayValidateBeforeCall(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementCreateKitDayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateKitDayRequestBuilder {
        private final Integer policyId;
        private final Integer employeeId;
        private String date;
        private String dateFrom;
        private String dateTo;

        private CreateKitDayRequestBuilder(Integer policyId, Integer employeeId) {
            this.policyId = policyId;
            this.employeeId = employeeId;
        }

        /**
         * Set date
         * @param date Date of single-day KIT day (optional)
         * @return CreateKitDayRequestBuilder
         */
        public CreateKitDayRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set dateFrom
         * @param dateFrom Start date of a multi-day KIT day (optional)
         * @return CreateKitDayRequestBuilder
         */
        public CreateKitDayRequestBuilder dateFrom(String dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo End date of a multi-day KIT day (optional)
         * @return CreateKitDayRequestBuilder
         */
        public CreateKitDayRequestBuilder dateTo(String dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Build call for createKitDay
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest = buildBodyParams();
            return createKitDayCall(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo, _callback);
        }

        private LeaveManagementCreateKitDayRequest buildBodyParams() {
            LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest = new LeaveManagementCreateKitDayRequest();
            leaveManagementCreateKitDayRequest.policyId(this.policyId);
            leaveManagementCreateKitDayRequest.employeeId(this.employeeId);
            leaveManagementCreateKitDayRequest.date(this.date);
            leaveManagementCreateKitDayRequest.dateFrom(this.dateFrom);
            leaveManagementCreateKitDayRequest.dateTo(this.dateTo);
            return leaveManagementCreateKitDayRequest;
        }

        /**
         * Execute createKitDay request
         * @return LeaveManagementCreateKitDayResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementCreateKitDayResponse execute() throws ApiException {
            LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest = buildBodyParams();
            ApiResponse<LeaveManagementCreateKitDayResponse> localVarResp = createKitDayWithHttpInfo(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createKitDay request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementCreateKitDayResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementCreateKitDayResponse> executeWithHttpInfo() throws ApiException {
            LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest = buildBodyParams();
            return createKitDayWithHttpInfo(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo);
        }

        /**
         * Execute createKitDay request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementCreateKitDayResponse> _callback) throws ApiException {
            LeaveManagementCreateKitDayRequest leaveManagementCreateKitDayRequest = buildBodyParams();
            return createKitDayAsync(policyId, employeeId, leaveManagementCreateKitDayRequest, date, dateFrom, dateTo, _callback);
        }
    }

    /**
     * Create a KIT day in a leave
     * 
     * @param policyId Time-off policy identifier (required)
     * @param employeeId Employee identifier (required)
     * @param leaveManagementCreateKitDayRequest  (required)
     * @return CreateKitDayRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateKitDayRequestBuilder createKitDay(Integer policyId, Integer employeeId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new CreateKitDayRequestBuilder(policyId, employeeId);
    }
    private okhttp3.Call getKitDaysCall(Integer policyId, Integer employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/leave-management/kit-days";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_id", policyId));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employee_id", employeeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKitDaysValidateBeforeCall(Integer policyId, Integer employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling getKitDays(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getKitDays(Async)");
        }

        return getKitDaysCall(policyId, employeeId, _callback);

    }


    private ApiResponse<LeaveManagementGetKitDaysResponse> getKitDaysWithHttpInfo(Integer policyId, Integer employeeId) throws ApiException {
        okhttp3.Call localVarCall = getKitDaysValidateBeforeCall(policyId, employeeId, null);
        Type localVarReturnType = new TypeToken<LeaveManagementGetKitDaysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getKitDaysAsync(Integer policyId, Integer employeeId, final ApiCallback<LeaveManagementGetKitDaysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKitDaysValidateBeforeCall(policyId, employeeId, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementGetKitDaysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetKitDaysRequestBuilder {
        private final Integer policyId;
        private final Integer employeeId;

        private GetKitDaysRequestBuilder(Integer policyId, Integer employeeId) {
            this.policyId = policyId;
            this.employeeId = employeeId;
        }

        /**
         * Build call for getKitDays
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getKitDaysCall(policyId, employeeId, _callback);
        }


        /**
         * Execute getKitDays request
         * @return LeaveManagementGetKitDaysResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementGetKitDaysResponse execute() throws ApiException {
            ApiResponse<LeaveManagementGetKitDaysResponse> localVarResp = getKitDaysWithHttpInfo(policyId, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getKitDays request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementGetKitDaysResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementGetKitDaysResponse> executeWithHttpInfo() throws ApiException {
            return getKitDaysWithHttpInfo(policyId, employeeId);
        }

        /**
         * Execute getKitDays request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementGetKitDaysResponse> _callback) throws ApiException {
            return getKitDaysAsync(policyId, employeeId, _callback);
        }
    }

    /**
     * View all the KIT days of an employee in a policy
     * 
     * @param policyId Time-off policy identifier (required)
     * @param employeeId Employee identifier (required)
     * @return GetKitDaysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetKitDaysRequestBuilder getKitDays(Integer policyId, Integer employeeId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new GetKitDaysRequestBuilder(policyId, employeeId);
    }
    private okhttp3.Call processKitDayCall(Integer id, String status, LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveManagementProcessKitDayRequest;

        // create path and map variables
        String localVarPath = "/leave-management/kit-days/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processKitDayValidateBeforeCall(Integer id, String status, LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling processKitDay(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling processKitDay(Async)");
        }

        // verify the required parameter 'leaveManagementProcessKitDayRequest' is set
        if (leaveManagementProcessKitDayRequest == null) {
            throw new ApiException("Missing the required parameter 'leaveManagementProcessKitDayRequest' when calling processKitDay(Async)");
        }

        return processKitDayCall(id, status, leaveManagementProcessKitDayRequest, _callback);

    }


    private ApiResponse<Void> processKitDayWithHttpInfo(Integer id, String status, LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest) throws ApiException {
        okhttp3.Call localVarCall = processKitDayValidateBeforeCall(id, status, leaveManagementProcessKitDayRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call processKitDayAsync(Integer id, String status, LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = processKitDayValidateBeforeCall(id, status, leaveManagementProcessKitDayRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ProcessKitDayRequestBuilder {
        private final Integer id;
        private final String status;

        private ProcessKitDayRequestBuilder(Integer id, String status) {
            this.id = id;
            this.status = status;
        }

        /**
         * Build call for processKitDay
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest = buildBodyParams();
            return processKitDayCall(id, status, leaveManagementProcessKitDayRequest, _callback);
        }

        private LeaveManagementProcessKitDayRequest buildBodyParams() {
            LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest = new LeaveManagementProcessKitDayRequest();
            if (this.status != null)
            leaveManagementProcessKitDayRequest.status(LeaveManagementProcessKitDayRequest.StatusEnum.fromValue(this.status));
            return leaveManagementProcessKitDayRequest;
        }

        /**
         * Execute processKitDay request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest = buildBodyParams();
            processKitDayWithHttpInfo(id, status, leaveManagementProcessKitDayRequest);
        }

        /**
         * Execute processKitDay request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest = buildBodyParams();
            return processKitDayWithHttpInfo(id, status, leaveManagementProcessKitDayRequest);
        }

        /**
         * Execute processKitDay request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LeaveManagementProcessKitDayRequest leaveManagementProcessKitDayRequest = buildBodyParams();
            return processKitDayAsync(id, status, leaveManagementProcessKitDayRequest, _callback);
        }
    }

    /**
     * Approve, decline or cancel a KIT day
     * 
     * @param id KIT day identifier (required)
     * @param status Action to apply to the specified KIT day (required)
     * @param leaveManagementProcessKitDayRequest  (required)
     * @return ProcessKitDayRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ProcessKitDayRequestBuilder processKitDay(Integer id, String status) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new ProcessKitDayRequestBuilder(id, status);
    }
    private okhttp3.Call updateKitDaysConfigurationCall(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity, LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveManagementUpdateKitDaysConfigurationRequest;

        // create path and map variables
        String localVarPath = "/leave-management/policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kitDaysEnabled != null) {
            localVarFormParams.put("kit_days_enabled", kitDaysEnabled);
        }

        if (kitDaysQuantity != null) {
            localVarFormParams.put("kit_days_quantity", kitDaysQuantity);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateKitDaysConfigurationValidateBeforeCall(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity, LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateKitDaysConfiguration(Async)");
        }

        // verify the required parameter 'kitDaysEnabled' is set
        if (kitDaysEnabled == null) {
            throw new ApiException("Missing the required parameter 'kitDaysEnabled' when calling updateKitDaysConfiguration(Async)");
        }

        // verify the required parameter 'kitDaysQuantity' is set
        if (kitDaysQuantity == null) {
            throw new ApiException("Missing the required parameter 'kitDaysQuantity' when calling updateKitDaysConfiguration(Async)");
        }

        // verify the required parameter 'leaveManagementUpdateKitDaysConfigurationRequest' is set
        if (leaveManagementUpdateKitDaysConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'leaveManagementUpdateKitDaysConfigurationRequest' when calling updateKitDaysConfiguration(Async)");
        }

        return updateKitDaysConfigurationCall(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, _callback);

    }


    private ApiResponse<Void> updateKitDaysConfigurationWithHttpInfo(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity, LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateKitDaysConfigurationValidateBeforeCall(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateKitDaysConfigurationAsync(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity, LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateKitDaysConfigurationValidateBeforeCall(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateKitDaysConfigurationRequestBuilder {
        private final Integer id;
        private final Boolean kitDaysEnabled;
        private final Integer kitDaysQuantity;

        private UpdateKitDaysConfigurationRequestBuilder(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity) {
            this.id = id;
            this.kitDaysEnabled = kitDaysEnabled;
            this.kitDaysQuantity = kitDaysQuantity;
        }

        /**
         * Build call for updateKitDaysConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest = buildBodyParams();
            return updateKitDaysConfigurationCall(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, _callback);
        }

        private LeaveManagementUpdateKitDaysConfigurationRequest buildBodyParams() {
            LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest = new LeaveManagementUpdateKitDaysConfigurationRequest();
            if (this.kitDaysEnabled != null)
            leaveManagementUpdateKitDaysConfigurationRequest.kitDaysEnabled(LeaveManagementUpdateKitDaysConfigurationRequest.KitDaysEnabledEnum.fromValue(this.kitDaysEnabled));
            leaveManagementUpdateKitDaysConfigurationRequest.kitDaysQuantity(this.kitDaysQuantity);
            return leaveManagementUpdateKitDaysConfigurationRequest;
        }

        /**
         * Execute updateKitDaysConfiguration request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest = buildBodyParams();
            updateKitDaysConfigurationWithHttpInfo(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest);
        }

        /**
         * Execute updateKitDaysConfiguration request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest = buildBodyParams();
            return updateKitDaysConfigurationWithHttpInfo(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest);
        }

        /**
         * Execute updateKitDaysConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LeaveManagementUpdateKitDaysConfigurationRequest leaveManagementUpdateKitDaysConfigurationRequest = buildBodyParams();
            return updateKitDaysConfigurationAsync(id, kitDaysEnabled, kitDaysQuantity, leaveManagementUpdateKitDaysConfigurationRequest, _callback);
        }
    }

    /**
     * Update KIT days configuration of a time off policy
     * 
     * @param id Numeric ID of the policy to get. (required)
     * @param kitDaysEnabled Whether the policy allows Kit days or not (required)
     * @param kitDaysQuantity Maximum number of Kit days allowed in the policy (required)
     * @param leaveManagementUpdateKitDaysConfigurationRequest  (required)
     * @return UpdateKitDaysConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateKitDaysConfigurationRequestBuilder updateKitDaysConfiguration(Integer id, Boolean kitDaysEnabled, Integer kitDaysQuantity) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (kitDaysEnabled == null) throw new IllegalArgumentException("\"kitDaysEnabled\" is required but got null");
        if (kitDaysQuantity == null) throw new IllegalArgumentException("\"kitDaysQuantity\" is required but got null");
        return new UpdateKitDaysConfigurationRequestBuilder(id, kitDaysEnabled, kitDaysQuantity);
    }
}
