/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeCreateNewEmployeeRequest;
import com.konfigthis.client.model.EmployeeCreateNewEmployeeResponse;
import com.konfigthis.client.model.EmployeeGetByIdResponse;
import com.konfigthis.client.model.EmployeeGetCompensationsResponse;
import com.konfigthis.client.model.EmployeeGetCustomFieldsResponse;
import com.konfigthis.client.model.EmployeeGetTerminatedEmployeeResponse;
import com.konfigthis.client.model.EmployeeListActiveEmployeesResponse;
import com.konfigthis.client.model.EmployeeListTerminatedEmployeesResponse;
import com.konfigthis.client.model.EmployeeTerminateEmployeeRequest;
import com.konfigthis.client.model.EmployeeTerminateEmployeeResponse;
import com.konfigthis.client.model.EmployeeUpdateByIdRequest;
import com.konfigthis.client.model.EmployeeUpdateByIdResponse;
import com.konfigthis.client.model.EmployeeUpdateCustomFieldRequest;
import com.konfigthis.client.model.EmployeeUpdateCustomFieldResponse;
import com.konfigthis.client.model.LeaveManagementGetTimeOffBalancesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEmployeeCall(String email, String firstName, String lastName, EmployeeCreateNewEmployeeRequest employeeCreateNewEmployeeRequest, String workStartDate, String sendEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeCreateNewEmployeeRequest;

        // create path and map variables
        String localVarPath = "/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("email", email);
        }

        if (firstName != null) {
            localVarFormParams.put("first_name", firstName);
        }

        if (lastName != null) {
            localVarFormParams.put("last_name", lastName);
        }

        if (workStartDate != null) {
            localVarFormParams.put("work_start_date", workStartDate);
        }

        if (sendEmail != null) {
            localVarFormParams.put("send_email", sendEmail);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEmployeeValidateBeforeCall(String email, String firstName, String lastName, EmployeeCreateNewEmployeeRequest employeeCreateNewEmployeeRequest, String workStartDate, String sendEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling createNewEmployee(Async)");
        }

        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling createNewEmployee(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling createNewEmployee(Async)");
        }

        // verify the required parameter 'employeeCreateNewEmployeeRequest' is set
        if (employeeCreateNewEmployeeRequest == null) {
            throw new ApiException("Missing the required parameter 'employeeCreateNewEmployeeRequest' when calling createNewEmployee(Async)");
        }

        return createNewEmployeeCall(email, firstName, lastName, employeeCreateNewEmployeeRequest, workStartDate, sendEmail, _callback);

    }


    private ApiResponse<EmployeeCreateNewEmployeeResponse> createNewEmployeeWithHttpInfo(String email, String firstName, String lastName, EmployeeCreateNewEmployeeRequest employeeCreateNewEmployeeRequest, String workStartDate, String sendEmail) throws ApiException {
        okhttp3.Call localVarCall = createNewEmployeeValidateBeforeCall(email, firstName, lastName, employeeCreateNewEmployeeRequest, workStartDate, sendEmail, null);
        Type localVarReturnType = new TypeToken<EmployeeCreateNewEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewEmployeeAsync(String email, String firstName, String lastName, EmployeeCreateNewEmployeeRequest employeeCreateNewEmployeeRequest, String workStartDate, String sendEmail, final ApiCallback<EmployeeCreateNewEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEmployeeValidateBeforeCall(email, firstName, lastName, employeeCreateNewEmployeeRequest, workStartDate, sendEmail, _callback);
        Type localVarReturnType = new TypeToken<EmployeeCreateNewEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewEmployeeRequestBuilder {
        private final String email;
        private final String firstName;
        private final String lastName;
        private String workStartDate;
        private String sendEmail;

        private CreateNewEmployeeRequestBuilder(String email, String firstName, String lastName) {
            this.email = email;
            this.firstName = firstName;
            this.lastName = lastName;
        }

        /**
         * Set workStartDate
         * @param workStartDate Employees work start date, format: YYYY-MM-DD, leave empty to use todays date (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder workStartDate(String workStartDate) {
            this.workStartDate = workStartDate;
            return this;
        }
        
        /**
         * Set sendEmail
         * @param sendEmail &#39;true&#39; to send welcome email to employee (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder sendEmail(String sendEmail) {
            this.sendEmail = sendEmail;
            return this;
        }
        
        /**
         * Build call for createNewEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeCreateNewEmployeeRequest employeeCreateNewEmployeeRequest = buildBodyParams();
            return createNewEmployeeCall(email, firstName, lastName, employeeCreateNewEmployeeRequest, workStartDate, sendEmail, _callback);
        }

        private EmployeeCreateNewEmployeeRequest buildBodyParams() {
            EmployeeCreateNewEmployeeRequest employeeCreateNewEmployeeRequest = new EmployeeCreateNewEmployeeRequest();
            employeeCreateNewEmployeeRequest.email(this.email);
            employeeCreateNewEmployeeRequest.firstName(this.firstName);
            employeeCreateNewEmployeeRequest.lastName(this.lastName);
            employeeCreateNewEmployeeRequest.workStartDate(this.workStartDate);
            employeeCreateNewEmployeeRequest.sendEmail(this.sendEmail);
            return employeeCreateNewEmployeeRequest;
        }

        /**
         * Execute createNewEmployee request
         * @return EmployeeCreateNewEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeCreateNewEmployeeResponse execute() throws ApiException {
            EmployeeCreateNewEmployeeRequest employeeCreateNewEmployeeRequest = buildBodyParams();
            ApiResponse<EmployeeCreateNewEmployeeResponse> localVarResp = createNewEmployeeWithHttpInfo(email, firstName, lastName, employeeCreateNewEmployeeRequest, workStartDate, sendEmail);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeeCreateNewEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeCreateNewEmployeeResponse> executeWithHttpInfo() throws ApiException {
            EmployeeCreateNewEmployeeRequest employeeCreateNewEmployeeRequest = buildBodyParams();
            return createNewEmployeeWithHttpInfo(email, firstName, lastName, employeeCreateNewEmployeeRequest, workStartDate, sendEmail);
        }

        /**
         * Execute createNewEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeCreateNewEmployeeResponse> _callback) throws ApiException {
            EmployeeCreateNewEmployeeRequest employeeCreateNewEmployeeRequest = buildBodyParams();
            return createNewEmployeeAsync(email, firstName, lastName, employeeCreateNewEmployeeRequest, workStartDate, sendEmail, _callback);
        }
    }

    /**
     * Create new employee
     * 
     * @param email Employees email (required)
     * @param firstName Employees first name (required)
     * @param lastName Employees last name (required)
     * @param employeeCreateNewEmployeeRequest  (required)
     * @return CreateNewEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewEmployeeRequestBuilder createNewEmployee(String email, String firstName, String lastName) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        return new CreateNewEmployeeRequestBuilder(email, firstName, lastName);
    }
    private okhttp3.Call getByIdCall(Integer id, Boolean teamHistory, Boolean employmentStatusHistory, Boolean positionHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        if (employmentStatusHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employment_status_history", employmentStatusHistory));
        }

        if (positionHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position_history", positionHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer id, Boolean teamHistory, Boolean employmentStatusHistory, Boolean positionHistory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, teamHistory, employmentStatusHistory, positionHistory, _callback);

    }


    private ApiResponse<EmployeeGetByIdResponse> getByIdWithHttpInfo(Integer id, Boolean teamHistory, Boolean employmentStatusHistory, Boolean positionHistory) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, teamHistory, employmentStatusHistory, positionHistory, null);
        Type localVarReturnType = new TypeToken<EmployeeGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer id, Boolean teamHistory, Boolean employmentStatusHistory, Boolean positionHistory, final ApiCallback<EmployeeGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, teamHistory, employmentStatusHistory, positionHistory, _callback);
        Type localVarReturnType = new TypeToken<EmployeeGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer id;
        private Boolean teamHistory;
        private Boolean employmentStatusHistory;
        private Boolean positionHistory;

        private GetByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set teamHistory
         * @param teamHistory  (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder teamHistory(Boolean teamHistory) {
            this.teamHistory = teamHistory;
            return this;
        }
        
        /**
         * Set employmentStatusHistory
         * @param employmentStatusHistory  (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder employmentStatusHistory(Boolean employmentStatusHistory) {
            this.employmentStatusHistory = employmentStatusHistory;
            return this;
        }
        
        /**
         * Set positionHistory
         * @param positionHistory  (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder positionHistory(Boolean positionHistory) {
            this.positionHistory = positionHistory;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response, team_history/employment_status_history/position_history collections are returned only if regarding optional paramters are provided in query </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, teamHistory, employmentStatusHistory, positionHistory, _callback);
        }


        /**
         * Execute getById request
         * @return EmployeeGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response, team_history/employment_status_history/position_history collections are returned only if regarding optional paramters are provided in query </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeGetByIdResponse execute() throws ApiException {
            ApiResponse<EmployeeGetByIdResponse> localVarResp = getByIdWithHttpInfo(id, teamHistory, employmentStatusHistory, positionHistory);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;EmployeeGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response, team_history/employment_status_history/position_history collections are returned only if regarding optional paramters are provided in query </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id, teamHistory, employmentStatusHistory, positionHistory);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response, team_history/employment_status_history/position_history collections are returned only if regarding optional paramters are provided in query </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(id, teamHistory, employmentStatusHistory, positionHistory, _callback);
        }
    }

    /**
     * Single active employee in company
     * 
     * @param id Numeric ID of the user to get. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response, team_history/employment_status_history/position_history collections are returned only if regarding optional paramters are provided in query </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getCompensationsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{id}/compensations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompensationsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCompensations(Async)");
        }

        return getCompensationsCall(id, _callback);

    }


    private ApiResponse<EmployeeGetCompensationsResponse> getCompensationsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getCompensationsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmployeeGetCompensationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompensationsAsync(Integer id, final ApiCallback<EmployeeGetCompensationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompensationsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmployeeGetCompensationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompensationsRequestBuilder {
        private final Integer id;

        private GetCompensationsRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getCompensations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompensationsCall(id, _callback);
        }


        /**
         * Execute getCompensations request
         * @return EmployeeGetCompensationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeGetCompensationsResponse execute() throws ApiException {
            ApiResponse<EmployeeGetCompensationsResponse> localVarResp = getCompensationsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompensations request with HTTP info returned
         * @return ApiResponse&lt;EmployeeGetCompensationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeGetCompensationsResponse> executeWithHttpInfo() throws ApiException {
            return getCompensationsWithHttpInfo(id);
        }

        /**
         * Execute getCompensations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeGetCompensationsResponse> _callback) throws ApiException {
            return getCompensationsAsync(id, _callback);
        }
    }

    /**
     * Employee compensations
     * 
     * @param id Numeric ID of the user to get. (required)
     * @return GetCompensationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetCompensationsRequestBuilder getCompensations(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetCompensationsRequestBuilder(id);
    }
    private okhttp3.Call getCustomFieldsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{id}/custom-fields"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCustomFields(Async)");
        }

        return getCustomFieldsCall(id, _callback);

    }


    private ApiResponse<EmployeeGetCustomFieldsResponse> getCustomFieldsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmployeeGetCustomFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldsAsync(Integer id, final ApiCallback<EmployeeGetCustomFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmployeeGetCustomFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldsRequestBuilder {
        private final Integer id;

        private GetCustomFieldsRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getCustomFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldsCall(id, _callback);
        }


        /**
         * Execute getCustomFields request
         * @return EmployeeGetCustomFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeGetCustomFieldsResponse execute() throws ApiException {
            ApiResponse<EmployeeGetCustomFieldsResponse> localVarResp = getCustomFieldsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomFields request with HTTP info returned
         * @return ApiResponse&lt;EmployeeGetCustomFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeGetCustomFieldsResponse> executeWithHttpInfo() throws ApiException {
            return getCustomFieldsWithHttpInfo(id);
        }

        /**
         * Execute getCustomFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeGetCustomFieldsResponse> _callback) throws ApiException {
            return getCustomFieldsAsync(id, _callback);
        }
    }

    /**
     * Employee custom fields
     * 
     * @param id Numeric ID of the user to get. (required)
     * @return GetCustomFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldsRequestBuilder getCustomFields(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetCustomFieldsRequestBuilder(id);
    }
    private okhttp3.Call getTerminatedEmployeeCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminated-employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTerminatedEmployeeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTerminatedEmployee(Async)");
        }

        return getTerminatedEmployeeCall(id, _callback);

    }


    private ApiResponse<EmployeeGetTerminatedEmployeeResponse> getTerminatedEmployeeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getTerminatedEmployeeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmployeeGetTerminatedEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTerminatedEmployeeAsync(Integer id, final ApiCallback<EmployeeGetTerminatedEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTerminatedEmployeeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmployeeGetTerminatedEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTerminatedEmployeeRequestBuilder {
        private final Integer id;

        private GetTerminatedEmployeeRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getTerminatedEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTerminatedEmployeeCall(id, _callback);
        }


        /**
         * Execute getTerminatedEmployee request
         * @return EmployeeGetTerminatedEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeGetTerminatedEmployeeResponse execute() throws ApiException {
            ApiResponse<EmployeeGetTerminatedEmployeeResponse> localVarResp = getTerminatedEmployeeWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTerminatedEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeeGetTerminatedEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeGetTerminatedEmployeeResponse> executeWithHttpInfo() throws ApiException {
            return getTerminatedEmployeeWithHttpInfo(id);
        }

        /**
         * Execute getTerminatedEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeGetTerminatedEmployeeResponse> _callback) throws ApiException {
            return getTerminatedEmployeeAsync(id, _callback);
        }
    }

    /**
     * Single terminated employee in company
     * 
     * @param id Numeric ID of the user to get. (required)
     * @return GetTerminatedEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetTerminatedEmployeeRequestBuilder getTerminatedEmployee(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetTerminatedEmployeeRequestBuilder(id);
    }
    private okhttp3.Call getTimeOffBalancesCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{id}/leave-management/balances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffBalancesValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTimeOffBalances(Async)");
        }

        return getTimeOffBalancesCall(id, _callback);

    }


    private ApiResponse<LeaveManagementGetTimeOffBalancesResponse> getTimeOffBalancesWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getTimeOffBalancesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LeaveManagementGetTimeOffBalancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeOffBalancesAsync(Integer id, final ApiCallback<LeaveManagementGetTimeOffBalancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffBalancesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LeaveManagementGetTimeOffBalancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeOffBalancesRequestBuilder {
        private final Integer id;

        private GetTimeOffBalancesRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getTimeOffBalances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffBalancesCall(id, _callback);
        }


        /**
         * Execute getTimeOffBalances request
         * @return LeaveManagementGetTimeOffBalancesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public LeaveManagementGetTimeOffBalancesResponse execute() throws ApiException {
            ApiResponse<LeaveManagementGetTimeOffBalancesResponse> localVarResp = getTimeOffBalancesWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeOffBalances request with HTTP info returned
         * @return ApiResponse&lt;LeaveManagementGetTimeOffBalancesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveManagementGetTimeOffBalancesResponse> executeWithHttpInfo() throws ApiException {
            return getTimeOffBalancesWithHttpInfo(id);
        }

        /**
         * Execute getTimeOffBalances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveManagementGetTimeOffBalancesResponse> _callback) throws ApiException {
            return getTimeOffBalancesAsync(id, _callback);
        }
    }

    /**
     * Employee time off balances
     * 
     * @param id Numeric ID of the user to get. (required)
     * @return GetTimeOffBalancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffBalancesRequestBuilder getTimeOffBalances(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetTimeOffBalancesRequestBuilder(id);
    }
    private okhttp3.Call listActiveEmployeesCall(Integer page, Boolean teamHistory, Boolean employmentStatusHistory, Boolean positionHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        if (employmentStatusHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employment_status_history", employmentStatusHistory));
        }

        if (positionHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position_history", positionHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActiveEmployeesValidateBeforeCall(Integer page, Boolean teamHistory, Boolean employmentStatusHistory, Boolean positionHistory, final ApiCallback _callback) throws ApiException {
        return listActiveEmployeesCall(page, teamHistory, employmentStatusHistory, positionHistory, _callback);

    }


    private ApiResponse<EmployeeListActiveEmployeesResponse> listActiveEmployeesWithHttpInfo(Integer page, Boolean teamHistory, Boolean employmentStatusHistory, Boolean positionHistory) throws ApiException {
        okhttp3.Call localVarCall = listActiveEmployeesValidateBeforeCall(page, teamHistory, employmentStatusHistory, positionHistory, null);
        Type localVarReturnType = new TypeToken<EmployeeListActiveEmployeesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listActiveEmployeesAsync(Integer page, Boolean teamHistory, Boolean employmentStatusHistory, Boolean positionHistory, final ApiCallback<EmployeeListActiveEmployeesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActiveEmployeesValidateBeforeCall(page, teamHistory, employmentStatusHistory, positionHistory, _callback);
        Type localVarReturnType = new TypeToken<EmployeeListActiveEmployeesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListActiveEmployeesRequestBuilder {
        private Integer page;
        private Boolean teamHistory;
        private Boolean employmentStatusHistory;
        private Boolean positionHistory;

        private ListActiveEmployeesRequestBuilder() {
        }

        /**
         * Set page
         * @param page  (optional)
         * @return ListActiveEmployeesRequestBuilder
         */
        public ListActiveEmployeesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set teamHistory
         * @param teamHistory  (optional)
         * @return ListActiveEmployeesRequestBuilder
         */
        public ListActiveEmployeesRequestBuilder teamHistory(Boolean teamHistory) {
            this.teamHistory = teamHistory;
            return this;
        }
        
        /**
         * Set employmentStatusHistory
         * @param employmentStatusHistory  (optional)
         * @return ListActiveEmployeesRequestBuilder
         */
        public ListActiveEmployeesRequestBuilder employmentStatusHistory(Boolean employmentStatusHistory) {
            this.employmentStatusHistory = employmentStatusHistory;
            return this;
        }
        
        /**
         * Set positionHistory
         * @param positionHistory  (optional)
         * @return ListActiveEmployeesRequestBuilder
         */
        public ListActiveEmployeesRequestBuilder positionHistory(Boolean positionHistory) {
            this.positionHistory = positionHistory;
            return this;
        }
        
        /**
         * Build call for listActiveEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response, team_history/employment_status_history/position_history collections are returned only if regarding optional paramters are provided in query </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listActiveEmployeesCall(page, teamHistory, employmentStatusHistory, positionHistory, _callback);
        }


        /**
         * Execute listActiveEmployees request
         * @return EmployeeListActiveEmployeesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response, team_history/employment_status_history/position_history collections are returned only if regarding optional paramters are provided in query </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeListActiveEmployeesResponse execute() throws ApiException {
            ApiResponse<EmployeeListActiveEmployeesResponse> localVarResp = listActiveEmployeesWithHttpInfo(page, teamHistory, employmentStatusHistory, positionHistory);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listActiveEmployees request with HTTP info returned
         * @return ApiResponse&lt;EmployeeListActiveEmployeesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response, team_history/employment_status_history/position_history collections are returned only if regarding optional paramters are provided in query </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeListActiveEmployeesResponse> executeWithHttpInfo() throws ApiException {
            return listActiveEmployeesWithHttpInfo(page, teamHistory, employmentStatusHistory, positionHistory);
        }

        /**
         * Execute listActiveEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response, team_history/employment_status_history/position_history collections are returned only if regarding optional paramters are provided in query </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeListActiveEmployeesResponse> _callback) throws ApiException {
            return listActiveEmployeesAsync(page, teamHistory, employmentStatusHistory, positionHistory, _callback);
        }
    }

    /**
     * List active employees in company
     * 
     * @return ListActiveEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response, team_history/employment_status_history/position_history collections are returned only if regarding optional paramters are provided in query </td><td>  -  </td></tr>
     </table>
     */
    public ListActiveEmployeesRequestBuilder listActiveEmployees() throws IllegalArgumentException {
        return new ListActiveEmployeesRequestBuilder();
    }
    private okhttp3.Call listTerminatedEmployeesCall(Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terminated-employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTerminatedEmployeesValidateBeforeCall(Integer page, final ApiCallback _callback) throws ApiException {
        return listTerminatedEmployeesCall(page, _callback);

    }


    private ApiResponse<EmployeeListTerminatedEmployeesResponse> listTerminatedEmployeesWithHttpInfo(Integer page) throws ApiException {
        okhttp3.Call localVarCall = listTerminatedEmployeesValidateBeforeCall(page, null);
        Type localVarReturnType = new TypeToken<EmployeeListTerminatedEmployeesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTerminatedEmployeesAsync(Integer page, final ApiCallback<EmployeeListTerminatedEmployeesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTerminatedEmployeesValidateBeforeCall(page, _callback);
        Type localVarReturnType = new TypeToken<EmployeeListTerminatedEmployeesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTerminatedEmployeesRequestBuilder {
        private Integer page;

        private ListTerminatedEmployeesRequestBuilder() {
        }

        /**
         * Set page
         * @param page  (optional)
         * @return ListTerminatedEmployeesRequestBuilder
         */
        public ListTerminatedEmployeesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listTerminatedEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTerminatedEmployeesCall(page, _callback);
        }


        /**
         * Execute listTerminatedEmployees request
         * @return EmployeeListTerminatedEmployeesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeListTerminatedEmployeesResponse execute() throws ApiException {
            ApiResponse<EmployeeListTerminatedEmployeesResponse> localVarResp = listTerminatedEmployeesWithHttpInfo(page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTerminatedEmployees request with HTTP info returned
         * @return ApiResponse&lt;EmployeeListTerminatedEmployeesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeListTerminatedEmployeesResponse> executeWithHttpInfo() throws ApiException {
            return listTerminatedEmployeesWithHttpInfo(page);
        }

        /**
         * Execute listTerminatedEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeListTerminatedEmployeesResponse> _callback) throws ApiException {
            return listTerminatedEmployeesAsync(page, _callback);
        }
    }

    /**
     * List terminated employees in company
     * 
     * @return ListTerminatedEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListTerminatedEmployeesRequestBuilder listTerminatedEmployees() throws IllegalArgumentException {
        return new ListTerminatedEmployeesRequestBuilder();
    }
    private okhttp3.Call terminateEmployeeCall(Integer id, String date, Double terminationReasonId, EmployeeTerminateEmployeeRequest employeeTerminateEmployeeRequest, String comments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeTerminateEmployeeRequest;

        // create path and map variables
        String localVarPath = "/employees/{id}/terminations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarFormParams.put("date", date);
        }

        if (terminationReasonId != null) {
            localVarFormParams.put("termination_reason_id", terminationReasonId);
        }

        if (comments != null) {
            localVarFormParams.put("comments", comments);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call terminateEmployeeValidateBeforeCall(Integer id, String date, Double terminationReasonId, EmployeeTerminateEmployeeRequest employeeTerminateEmployeeRequest, String comments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling terminateEmployee(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling terminateEmployee(Async)");
        }

        // verify the required parameter 'terminationReasonId' is set
        if (terminationReasonId == null) {
            throw new ApiException("Missing the required parameter 'terminationReasonId' when calling terminateEmployee(Async)");
        }

        // verify the required parameter 'employeeTerminateEmployeeRequest' is set
        if (employeeTerminateEmployeeRequest == null) {
            throw new ApiException("Missing the required parameter 'employeeTerminateEmployeeRequest' when calling terminateEmployee(Async)");
        }

        return terminateEmployeeCall(id, date, terminationReasonId, employeeTerminateEmployeeRequest, comments, _callback);

    }


    private ApiResponse<EmployeeTerminateEmployeeResponse> terminateEmployeeWithHttpInfo(Integer id, String date, Double terminationReasonId, EmployeeTerminateEmployeeRequest employeeTerminateEmployeeRequest, String comments) throws ApiException {
        okhttp3.Call localVarCall = terminateEmployeeValidateBeforeCall(id, date, terminationReasonId, employeeTerminateEmployeeRequest, comments, null);
        Type localVarReturnType = new TypeToken<EmployeeTerminateEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call terminateEmployeeAsync(Integer id, String date, Double terminationReasonId, EmployeeTerminateEmployeeRequest employeeTerminateEmployeeRequest, String comments, final ApiCallback<EmployeeTerminateEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = terminateEmployeeValidateBeforeCall(id, date, terminationReasonId, employeeTerminateEmployeeRequest, comments, _callback);
        Type localVarReturnType = new TypeToken<EmployeeTerminateEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TerminateEmployeeRequestBuilder {
        private final Integer id;
        private final String date;
        private final Double terminationReasonId;
        private String comments;

        private TerminateEmployeeRequestBuilder(Integer id, String date, double terminationReasonId) {
            this.id = id;
            this.date = date;
            this.terminationReasonId = terminationReasonId;
        }

        /**
         * Set comments
         * @param comments Comments (optional)
         * @return TerminateEmployeeRequestBuilder
         */
        public TerminateEmployeeRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Build call for terminateEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeTerminateEmployeeRequest employeeTerminateEmployeeRequest = buildBodyParams();
            return terminateEmployeeCall(id, date, terminationReasonId, employeeTerminateEmployeeRequest, comments, _callback);
        }

        private EmployeeTerminateEmployeeRequest buildBodyParams() {
            EmployeeTerminateEmployeeRequest employeeTerminateEmployeeRequest = new EmployeeTerminateEmployeeRequest();
            employeeTerminateEmployeeRequest.date(this.date);
            employeeTerminateEmployeeRequest.terminationReasonId(this.terminationReasonId);
            employeeTerminateEmployeeRequest.comments(this.comments);
            return employeeTerminateEmployeeRequest;
        }

        /**
         * Execute terminateEmployee request
         * @return EmployeeTerminateEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeTerminateEmployeeResponse execute() throws ApiException {
            EmployeeTerminateEmployeeRequest employeeTerminateEmployeeRequest = buildBodyParams();
            ApiResponse<EmployeeTerminateEmployeeResponse> localVarResp = terminateEmployeeWithHttpInfo(id, date, terminationReasonId, employeeTerminateEmployeeRequest, comments);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute terminateEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeeTerminateEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeTerminateEmployeeResponse> executeWithHttpInfo() throws ApiException {
            EmployeeTerminateEmployeeRequest employeeTerminateEmployeeRequest = buildBodyParams();
            return terminateEmployeeWithHttpInfo(id, date, terminationReasonId, employeeTerminateEmployeeRequest, comments);
        }

        /**
         * Execute terminateEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeTerminateEmployeeResponse> _callback) throws ApiException {
            EmployeeTerminateEmployeeRequest employeeTerminateEmployeeRequest = buildBodyParams();
            return terminateEmployeeAsync(id, date, terminationReasonId, employeeTerminateEmployeeRequest, comments, _callback);
        }
    }

    /**
     * Terminate employee
     * 
     * @param id Numeric ID of the user (required)
     * @param date Last working day; format: YYYY-MM-DD (required)
     * @param terminationReasonId Termination reason ID (required)
     * @param employeeTerminateEmployeeRequest  (required)
     * @return TerminateEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public TerminateEmployeeRequestBuilder terminateEmployee(Integer id, String date, double terminationReasonId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
            

        
        return new TerminateEmployeeRequestBuilder(id, date, terminationReasonId);
    }
    private okhttp3.Call updateByIdCall(Integer id, EmployeeUpdateByIdRequest employeeUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(Integer id, EmployeeUpdateByIdRequest employeeUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        return updateByIdCall(id, employeeUpdateByIdRequest, _callback);

    }


    private ApiResponse<EmployeeUpdateByIdResponse> updateByIdWithHttpInfo(Integer id, EmployeeUpdateByIdRequest employeeUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, employeeUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(Integer id, EmployeeUpdateByIdRequest employeeUpdateByIdRequest, final ApiCallback<EmployeeUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, employeeUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final Integer id;
        private String firstName;
        private String lastName;
        private String workStartDate;
        private Integer locationId;
        private Integer teamId;
        private Integer leaderId;
        private Integer positionId;
        private String employeeNumber;
        private List<Integer> approverIds;
        private List<Integer> selectedLeaveTypes;

        private UpdateByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set workStartDate
         * @param workStartDate  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder workStartDate(String workStartDate) {
            this.workStartDate = workStartDate;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder locationId(Integer locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder teamId(Integer teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set leaderId
         * @param leaderId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder leaderId(Integer leaderId) {
            this.leaderId = leaderId;
            return this;
        }
        
        /**
         * Set positionId
         * @param positionId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder positionId(Integer positionId) {
            this.positionId = positionId;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set approverIds
         * @param approverIds  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder approverIds(List<Integer> approverIds) {
            this.approverIds = approverIds;
            return this;
        }
        
        /**
         * Set selectedLeaveTypes
         * @param selectedLeaveTypes  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder selectedLeaveTypes(List<Integer> selectedLeaveTypes) {
            this.selectedLeaveTypes = selectedLeaveTypes;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeUpdateByIdRequest employeeUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(id, employeeUpdateByIdRequest, _callback);
        }

        private EmployeeUpdateByIdRequest buildBodyParams() {
            EmployeeUpdateByIdRequest employeeUpdateByIdRequest = new EmployeeUpdateByIdRequest();
            employeeUpdateByIdRequest.firstName(this.firstName);
            employeeUpdateByIdRequest.lastName(this.lastName);
            employeeUpdateByIdRequest.workStartDate(this.workStartDate);
            employeeUpdateByIdRequest.locationId(this.locationId);
            employeeUpdateByIdRequest.teamId(this.teamId);
            employeeUpdateByIdRequest.leaderId(this.leaderId);
            employeeUpdateByIdRequest.positionId(this.positionId);
            employeeUpdateByIdRequest.employeeNumber(this.employeeNumber);
            employeeUpdateByIdRequest.approverIds(this.approverIds);
            employeeUpdateByIdRequest.selectedLeaveTypes(this.selectedLeaveTypes);
            return employeeUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return EmployeeUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeUpdateByIdResponse execute() throws ApiException {
            EmployeeUpdateByIdRequest employeeUpdateByIdRequest = buildBodyParams();
            ApiResponse<EmployeeUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(id, employeeUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;EmployeeUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            EmployeeUpdateByIdRequest employeeUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(id, employeeUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeUpdateByIdResponse> _callback) throws ApiException {
            EmployeeUpdateByIdRequest employeeUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(id, employeeUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update Employee
     * 
     * @param id Numeric ID of the user to update. (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateByIdRequestBuilder(id);
    }
    private okhttp3.Call updateCustomFieldCall(Integer id, Integer customFieldId, String value, EmployeeUpdateCustomFieldRequest employeeUpdateCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeUpdateCustomFieldRequest;

        // create path and map variables
        String localVarPath = "/employees/{id}/custom-fields/{custom_field_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "custom_field_id" + "}", localVarApiClient.escapeString(customFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (value != null) {
            localVarFormParams.put("value", value);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldValidateBeforeCall(Integer id, Integer customFieldId, String value, EmployeeUpdateCustomFieldRequest employeeUpdateCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCustomField(Async)");
        }

        // verify the required parameter 'customFieldId' is set
        if (customFieldId == null) {
            throw new ApiException("Missing the required parameter 'customFieldId' when calling updateCustomField(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updateCustomField(Async)");
        }

        // verify the required parameter 'employeeUpdateCustomFieldRequest' is set
        if (employeeUpdateCustomFieldRequest == null) {
            throw new ApiException("Missing the required parameter 'employeeUpdateCustomFieldRequest' when calling updateCustomField(Async)");
        }

        return updateCustomFieldCall(id, customFieldId, value, employeeUpdateCustomFieldRequest, _callback);

    }


    private ApiResponse<EmployeeUpdateCustomFieldResponse> updateCustomFieldWithHttpInfo(Integer id, Integer customFieldId, String value, EmployeeUpdateCustomFieldRequest employeeUpdateCustomFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(id, customFieldId, value, employeeUpdateCustomFieldRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeUpdateCustomFieldResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomFieldAsync(Integer id, Integer customFieldId, String value, EmployeeUpdateCustomFieldRequest employeeUpdateCustomFieldRequest, final ApiCallback<EmployeeUpdateCustomFieldResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(id, customFieldId, value, employeeUpdateCustomFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeUpdateCustomFieldResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomFieldRequestBuilder {
        private final Integer id;
        private final Integer customFieldId;
        private final String value;

        private UpdateCustomFieldRequestBuilder(Integer id, Integer customFieldId, String value) {
            this.id = id;
            this.customFieldId = customFieldId;
            this.value = value;
        }

        /**
         * Build call for updateCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeUpdateCustomFieldRequest employeeUpdateCustomFieldRequest = buildBodyParams();
            return updateCustomFieldCall(id, customFieldId, value, employeeUpdateCustomFieldRequest, _callback);
        }

        private EmployeeUpdateCustomFieldRequest buildBodyParams() {
            EmployeeUpdateCustomFieldRequest employeeUpdateCustomFieldRequest = new EmployeeUpdateCustomFieldRequest();
            employeeUpdateCustomFieldRequest.value(this.value);
            return employeeUpdateCustomFieldRequest;
        }

        /**
         * Execute updateCustomField request
         * @return EmployeeUpdateCustomFieldResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeUpdateCustomFieldResponse execute() throws ApiException {
            EmployeeUpdateCustomFieldRequest employeeUpdateCustomFieldRequest = buildBodyParams();
            ApiResponse<EmployeeUpdateCustomFieldResponse> localVarResp = updateCustomFieldWithHttpInfo(id, customFieldId, value, employeeUpdateCustomFieldRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomField request with HTTP info returned
         * @return ApiResponse&lt;EmployeeUpdateCustomFieldResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeUpdateCustomFieldResponse> executeWithHttpInfo() throws ApiException {
            EmployeeUpdateCustomFieldRequest employeeUpdateCustomFieldRequest = buildBodyParams();
            return updateCustomFieldWithHttpInfo(id, customFieldId, value, employeeUpdateCustomFieldRequest);
        }

        /**
         * Execute updateCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeUpdateCustomFieldResponse> _callback) throws ApiException {
            EmployeeUpdateCustomFieldRequest employeeUpdateCustomFieldRequest = buildBodyParams();
            return updateCustomFieldAsync(id, customFieldId, value, employeeUpdateCustomFieldRequest, _callback);
        }
    }

    /**
     * Update custom field
     * Update employee custom field
     * @param id Employee identifier (required)
     * @param customFieldId Custom field identifier (required)
     * @param value String or array (for tags) (required)
     * @param employeeUpdateCustomFieldRequest  (required)
     * @return UpdateCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomFieldRequestBuilder updateCustomField(Integer id, Integer customFieldId, String value) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (customFieldId == null) throw new IllegalArgumentException("\"customFieldId\" is required but got null");
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        return new UpdateCustomFieldRequestBuilder(id, customFieldId, value);
    }
}
