/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DocumentsCreateNewDocumentRequest;
import com.konfigthis.client.model.DocumentsCreateNewDocumentResponse;
import com.konfigthis.client.model.DocumentsListCategoriesResponse;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DocumentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDocumentCall(File _file, Integer employeeId, DocumentsCreateNewDocumentRequest documentsCreateNewDocumentRequest, String description, Integer categoryId, String notify, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentsCreateNewDocumentRequest;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (employeeId != null) {
            localVarFormParams.put("employee_id", employeeId);
        }

        if (categoryId != null) {
            localVarFormParams.put("category_id", categoryId);
        }

        if (notify != null) {
            localVarFormParams.put("notify", notify);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDocumentValidateBeforeCall(File _file, Integer employeeId, DocumentsCreateNewDocumentRequest documentsCreateNewDocumentRequest, String description, Integer categoryId, String notify, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling createNewDocument(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createNewDocument(Async)");
        }

        // verify the required parameter 'documentsCreateNewDocumentRequest' is set
        if (documentsCreateNewDocumentRequest == null) {
            throw new ApiException("Missing the required parameter 'documentsCreateNewDocumentRequest' when calling createNewDocument(Async)");
        }

        return createNewDocumentCall(_file, employeeId, documentsCreateNewDocumentRequest, description, categoryId, notify, _callback);

    }


    private ApiResponse<DocumentsCreateNewDocumentResponse> createNewDocumentWithHttpInfo(File _file, Integer employeeId, DocumentsCreateNewDocumentRequest documentsCreateNewDocumentRequest, String description, Integer categoryId, String notify) throws ApiException {
        okhttp3.Call localVarCall = createNewDocumentValidateBeforeCall(_file, employeeId, documentsCreateNewDocumentRequest, description, categoryId, notify, null);
        Type localVarReturnType = new TypeToken<DocumentsCreateNewDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDocumentAsync(File _file, Integer employeeId, DocumentsCreateNewDocumentRequest documentsCreateNewDocumentRequest, String description, Integer categoryId, String notify, final ApiCallback<DocumentsCreateNewDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDocumentValidateBeforeCall(_file, employeeId, documentsCreateNewDocumentRequest, description, categoryId, notify, _callback);
        Type localVarReturnType = new TypeToken<DocumentsCreateNewDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDocumentRequestBuilder {
        private final File _file;
        private final Integer employeeId;
        private String description;
        private Integer categoryId;
        private String notify;

        private CreateNewDocumentRequestBuilder(File _file, Integer employeeId) {
            this._file = _file;
            this.employeeId = employeeId;
        }

        /**
         * Set description
         * @param description Document description (optional)
         * @return CreateNewDocumentRequestBuilder
         */
        public CreateNewDocumentRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId Category identifier, leave empty for default category (optional)
         * @return CreateNewDocumentRequestBuilder
         */
        public CreateNewDocumentRequestBuilder categoryId(Integer categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set notify
         * @param notify &#39;true&#39; to notify employee by email (optional)
         * @return CreateNewDocumentRequestBuilder
         */
        public CreateNewDocumentRequestBuilder notify(String notify) {
            this.notify = notify;
            return this;
        }
        
        /**
         * Build call for createNewDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DocumentsCreateNewDocumentRequest documentsCreateNewDocumentRequest = buildBodyParams();
            return createNewDocumentCall(_file, employeeId, documentsCreateNewDocumentRequest, description, categoryId, notify, _callback);
        }

        private DocumentsCreateNewDocumentRequest buildBodyParams() {
            DocumentsCreateNewDocumentRequest documentsCreateNewDocumentRequest = new DocumentsCreateNewDocumentRequest();
            documentsCreateNewDocumentRequest.description(this.description);
            documentsCreateNewDocumentRequest._file(this._file);
            documentsCreateNewDocumentRequest.employeeId(this.employeeId);
            documentsCreateNewDocumentRequest.categoryId(this.categoryId);
            documentsCreateNewDocumentRequest.notify(this.notify);
            return documentsCreateNewDocumentRequest;
        }

        /**
         * Execute createNewDocument request
         * @return DocumentsCreateNewDocumentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public DocumentsCreateNewDocumentResponse execute() throws ApiException {
            DocumentsCreateNewDocumentRequest documentsCreateNewDocumentRequest = buildBodyParams();
            ApiResponse<DocumentsCreateNewDocumentResponse> localVarResp = createNewDocumentWithHttpInfo(_file, employeeId, documentsCreateNewDocumentRequest, description, categoryId, notify);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDocument request with HTTP info returned
         * @return ApiResponse&lt;DocumentsCreateNewDocumentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocumentsCreateNewDocumentResponse> executeWithHttpInfo() throws ApiException {
            DocumentsCreateNewDocumentRequest documentsCreateNewDocumentRequest = buildBodyParams();
            return createNewDocumentWithHttpInfo(_file, employeeId, documentsCreateNewDocumentRequest, description, categoryId, notify);
        }

        /**
         * Execute createNewDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocumentsCreateNewDocumentResponse> _callback) throws ApiException {
            DocumentsCreateNewDocumentRequest documentsCreateNewDocumentRequest = buildBodyParams();
            return createNewDocumentAsync(_file, employeeId, documentsCreateNewDocumentRequest, description, categoryId, notify, _callback);
        }
    }

    /**
     * Create new document
     * Document will only be visible to employee themselves
     * @param _file The file to upload. (required)
     * @param employeeId Employee identifier (required)
     * @param documentsCreateNewDocumentRequest  (required)
     * @return CreateNewDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDocumentRequestBuilder createNewDocument(File _file, Integer employeeId) throws IllegalArgumentException {
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new CreateNewDocumentRequestBuilder(_file, employeeId);
    }
    private okhttp3.Call listCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCategoriesCall(_callback);

    }


    private ApiResponse<DocumentsListCategoriesResponse> listCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DocumentsListCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCategoriesAsync(final ApiCallback<DocumentsListCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DocumentsListCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCategoriesRequestBuilder {

        private ListCategoriesRequestBuilder() {
        }

        /**
         * Build call for listCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCategoriesCall(_callback);
        }


        /**
         * Execute listCategories request
         * @return DocumentsListCategoriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public DocumentsListCategoriesResponse execute() throws ApiException {
            ApiResponse<DocumentsListCategoriesResponse> localVarResp = listCategoriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCategories request with HTTP info returned
         * @return ApiResponse&lt;DocumentsListCategoriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocumentsListCategoriesResponse> executeWithHttpInfo() throws ApiException {
            return listCategoriesWithHttpInfo();
        }

        /**
         * Execute listCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocumentsListCategoriesResponse> _callback) throws ApiException {
            return listCategoriesAsync(_callback);
        }
    }

    /**
     * List document categories
     * 
     * @return ListCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListCategoriesRequestBuilder listCategories() throws IllegalArgumentException {
        return new ListCategoriesRequestBuilder();
    }
}
