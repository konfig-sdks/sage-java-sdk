/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.RecruitmentListPositionsResponseDataInnerDescriptionBlocksInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RecruitmentListPositionsResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RecruitmentListPositionsResponseDataInner {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_INTERNAL_DATE = "internal_date";
  @SerializedName(SERIALIZED_NAME_INTERNAL_DATE)
  private String internalDate;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completed_at";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private String completedAt;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_APPLICANTS_REQUIRED = "applicants_required";
  @SerializedName(SERIALIZED_NAME_APPLICANTS_REQUIRED)
  private Double applicantsRequired;

  public static final String SERIALIZED_NAME_APPLICANTS_COUNT = "applicants_count";
  @SerializedName(SERIALIZED_NAME_APPLICANTS_COUNT)
  private Double applicantsCount;

  public static final String SERIALIZED_NAME_EMPLOYMENT_TYPE = "employment_type";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TYPE)
  private String employmentType;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Double locationId;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Double groupId;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Double priority;

  public static final String SERIALIZED_NAME_DESCRIPTION_BLOCKS = "description_blocks";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_BLOCKS)
  private List<RecruitmentListPositionsResponseDataInnerDescriptionBlocksInner> descriptionBlocks = null;

  public RecruitmentListPositionsResponseDataInner() {
  }

  public RecruitmentListPositionsResponseDataInner title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CEO", value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public RecruitmentListPositionsResponseDataInner id(Double id) {
    
    
    
    
    this.id = id;
    return this;
  }

  public RecruitmentListPositionsResponseDataInner id(Integer id) {
    
    
    
    
    this.id = id.doubleValue();
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2902504", value = "")

  public Double getId() {
    return id;
  }


  public void setId(Double id) {
    
    
    
    this.id = id;
  }


  public RecruitmentListPositionsResponseDataInner status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "published", value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public RecruitmentListPositionsResponseDataInner visibility(String visibility) {
    
    
    
    
    this.visibility = visibility;
    return this;
  }

   /**
   * Get visibility
   * @return visibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Published", value = "")

  public String getVisibility() {
    return visibility;
  }


  public void setVisibility(String visibility) {
    
    
    
    this.visibility = visibility;
  }


  public RecruitmentListPositionsResponseDataInner createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-09-01", value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public RecruitmentListPositionsResponseDataInner internalDate(String internalDate) {
    
    
    
    
    this.internalDate = internalDate;
    return this;
  }

   /**
   * Get internalDate
   * @return internalDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-10-01", value = "")

  public String getInternalDate() {
    return internalDate;
  }


  public void setInternalDate(String internalDate) {
    
    
    
    this.internalDate = internalDate;
  }


  public RecruitmentListPositionsResponseDataInner completedAt(String completedAt) {
    
    
    
    
    this.completedAt = completedAt;
    return this;
  }

   /**
   * Get completedAt
   * @return completedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-10-12", value = "")

  public String getCompletedAt() {
    return completedAt;
  }


  public void setCompletedAt(String completedAt) {
    
    
    
    this.completedAt = completedAt;
  }


  public RecruitmentListPositionsResponseDataInner link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * Get link
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://talent.sage.hr/jobs/xxx", value = "")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public RecruitmentListPositionsResponseDataInner team(String team) {
    
    
    
    
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Management", value = "")

  public String getTeam() {
    return team;
  }


  public void setTeam(String team) {
    
    
    
    this.team = team;
  }


  public RecruitmentListPositionsResponseDataInner applicantsRequired(Double applicantsRequired) {
    
    
    
    
    this.applicantsRequired = applicantsRequired;
    return this;
  }

  public RecruitmentListPositionsResponseDataInner applicantsRequired(Integer applicantsRequired) {
    
    
    
    
    this.applicantsRequired = applicantsRequired.doubleValue();
    return this;
  }

   /**
   * Get applicantsRequired
   * @return applicantsRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getApplicantsRequired() {
    return applicantsRequired;
  }


  public void setApplicantsRequired(Double applicantsRequired) {
    
    
    
    this.applicantsRequired = applicantsRequired;
  }


  public RecruitmentListPositionsResponseDataInner applicantsCount(Double applicantsCount) {
    
    
    
    
    this.applicantsCount = applicantsCount;
    return this;
  }

  public RecruitmentListPositionsResponseDataInner applicantsCount(Integer applicantsCount) {
    
    
    
    
    this.applicantsCount = applicantsCount.doubleValue();
    return this;
  }

   /**
   * Get applicantsCount
   * @return applicantsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "")

  public Double getApplicantsCount() {
    return applicantsCount;
  }


  public void setApplicantsCount(Double applicantsCount) {
    
    
    
    this.applicantsCount = applicantsCount;
  }


  public RecruitmentListPositionsResponseDataInner employmentType(String employmentType) {
    
    
    
    
    this.employmentType = employmentType;
    return this;
  }

   /**
   * Get employmentType
   * @return employmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Full-time", value = "")

  public String getEmploymentType() {
    return employmentType;
  }


  public void setEmploymentType(String employmentType) {
    
    
    
    this.employmentType = employmentType;
  }


  public RecruitmentListPositionsResponseDataInner location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "London", value = "")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public RecruitmentListPositionsResponseDataInner locationId(Double locationId) {
    
    
    
    
    this.locationId = locationId;
    return this;
  }

  public RecruitmentListPositionsResponseDataInner locationId(Integer locationId) {
    
    
    
    
    this.locationId = locationId.doubleValue();
    return this;
  }

   /**
   * Get locationId
   * @return locationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9182712", value = "")

  public Double getLocationId() {
    return locationId;
  }


  public void setLocationId(Double locationId) {
    
    
    
    this.locationId = locationId;
  }


  public RecruitmentListPositionsResponseDataInner group(String group) {
    
    
    
    
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hiring Group", value = "")

  public String getGroup() {
    return group;
  }


  public void setGroup(String group) {
    
    
    
    this.group = group;
  }


  public RecruitmentListPositionsResponseDataInner groupId(Double groupId) {
    
    
    
    
    this.groupId = groupId;
    return this;
  }

  public RecruitmentListPositionsResponseDataInner groupId(Integer groupId) {
    
    
    
    
    this.groupId = groupId.doubleValue();
    return this;
  }

   /**
   * Get groupId
   * @return groupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "871621", value = "")

  public Double getGroupId() {
    return groupId;
  }


  public void setGroupId(Double groupId) {
    
    
    
    this.groupId = groupId;
  }


  public RecruitmentListPositionsResponseDataInner priority(Double priority) {
    
    
    
    
    this.priority = priority;
    return this;
  }

  public RecruitmentListPositionsResponseDataInner priority(Integer priority) {
    
    
    
    
    this.priority = priority.doubleValue();
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getPriority() {
    return priority;
  }


  public void setPriority(Double priority) {
    
    
    
    this.priority = priority;
  }


  public RecruitmentListPositionsResponseDataInner descriptionBlocks(List<RecruitmentListPositionsResponseDataInnerDescriptionBlocksInner> descriptionBlocks) {
    
    
    
    
    this.descriptionBlocks = descriptionBlocks;
    return this;
  }

  public RecruitmentListPositionsResponseDataInner addDescriptionBlocksItem(RecruitmentListPositionsResponseDataInnerDescriptionBlocksInner descriptionBlocksItem) {
    if (this.descriptionBlocks == null) {
      this.descriptionBlocks = new ArrayList<>();
    }
    this.descriptionBlocks.add(descriptionBlocksItem);
    return this;
  }

   /**
   * Get descriptionBlocks
   * @return descriptionBlocks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<RecruitmentListPositionsResponseDataInnerDescriptionBlocksInner> getDescriptionBlocks() {
    return descriptionBlocks;
  }


  public void setDescriptionBlocks(List<RecruitmentListPositionsResponseDataInnerDescriptionBlocksInner> descriptionBlocks) {
    
    
    
    this.descriptionBlocks = descriptionBlocks;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RecruitmentListPositionsResponseDataInner instance itself
   */
  public RecruitmentListPositionsResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecruitmentListPositionsResponseDataInner recruitmentListPositionsResponseDataInner = (RecruitmentListPositionsResponseDataInner) o;
    return Objects.equals(this.title, recruitmentListPositionsResponseDataInner.title) &&
        Objects.equals(this.id, recruitmentListPositionsResponseDataInner.id) &&
        Objects.equals(this.status, recruitmentListPositionsResponseDataInner.status) &&
        Objects.equals(this.visibility, recruitmentListPositionsResponseDataInner.visibility) &&
        Objects.equals(this.createdAt, recruitmentListPositionsResponseDataInner.createdAt) &&
        Objects.equals(this.internalDate, recruitmentListPositionsResponseDataInner.internalDate) &&
        Objects.equals(this.completedAt, recruitmentListPositionsResponseDataInner.completedAt) &&
        Objects.equals(this.link, recruitmentListPositionsResponseDataInner.link) &&
        Objects.equals(this.team, recruitmentListPositionsResponseDataInner.team) &&
        Objects.equals(this.applicantsRequired, recruitmentListPositionsResponseDataInner.applicantsRequired) &&
        Objects.equals(this.applicantsCount, recruitmentListPositionsResponseDataInner.applicantsCount) &&
        Objects.equals(this.employmentType, recruitmentListPositionsResponseDataInner.employmentType) &&
        Objects.equals(this.location, recruitmentListPositionsResponseDataInner.location) &&
        Objects.equals(this.locationId, recruitmentListPositionsResponseDataInner.locationId) &&
        Objects.equals(this.group, recruitmentListPositionsResponseDataInner.group) &&
        Objects.equals(this.groupId, recruitmentListPositionsResponseDataInner.groupId) &&
        Objects.equals(this.priority, recruitmentListPositionsResponseDataInner.priority) &&
        Objects.equals(this.descriptionBlocks, recruitmentListPositionsResponseDataInner.descriptionBlocks)&&
        Objects.equals(this.additionalProperties, recruitmentListPositionsResponseDataInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, id, status, visibility, createdAt, internalDate, completedAt, link, team, applicantsRequired, applicantsCount, employmentType, location, locationId, group, groupId, priority, descriptionBlocks, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecruitmentListPositionsResponseDataInner {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    internalDate: ").append(toIndentedString(internalDate)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    applicantsRequired: ").append(toIndentedString(applicantsRequired)).append("\n");
    sb.append("    applicantsCount: ").append(toIndentedString(applicantsCount)).append("\n");
    sb.append("    employmentType: ").append(toIndentedString(employmentType)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    descriptionBlocks: ").append(toIndentedString(descriptionBlocks)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("visibility");
    openapiFields.add("created_at");
    openapiFields.add("internal_date");
    openapiFields.add("completed_at");
    openapiFields.add("link");
    openapiFields.add("team");
    openapiFields.add("applicants_required");
    openapiFields.add("applicants_count");
    openapiFields.add("employment_type");
    openapiFields.add("location");
    openapiFields.add("location_id");
    openapiFields.add("group");
    openapiFields.add("group_id");
    openapiFields.add("priority");
    openapiFields.add("description_blocks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RecruitmentListPositionsResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RecruitmentListPositionsResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecruitmentListPositionsResponseDataInner is not found in the empty JSON string", RecruitmentListPositionsResponseDataInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("internal_date") != null && !jsonObj.get("internal_date").isJsonNull()) && !jsonObj.get("internal_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internal_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internal_date").toString()));
      }
      if (!jsonObj.get("completed_at").isJsonNull() && (jsonObj.get("completed_at") != null && !jsonObj.get("completed_at").isJsonNull()) && !jsonObj.get("completed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completed_at").toString()));
      }
      if (!jsonObj.get("link").isJsonNull() && (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if (!jsonObj.get("employment_type").isJsonNull() && (jsonObj.get("employment_type") != null && !jsonObj.get("employment_type").isJsonNull()) && !jsonObj.get("employment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employment_type").toString()));
      }
      if (!jsonObj.get("location").isJsonNull() && (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if (jsonObj.get("description_blocks") != null && !jsonObj.get("description_blocks").isJsonNull()) {
        JsonArray jsonArraydescriptionBlocks = jsonObj.getAsJsonArray("description_blocks");
        if (jsonArraydescriptionBlocks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("description_blocks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `description_blocks` to be an array in the JSON string but got `%s`", jsonObj.get("description_blocks").toString()));
          }

          // validate the optional field `description_blocks` (array)
          for (int i = 0; i < jsonArraydescriptionBlocks.size(); i++) {
            RecruitmentListPositionsResponseDataInnerDescriptionBlocksInner.validateJsonObject(jsonArraydescriptionBlocks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecruitmentListPositionsResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecruitmentListPositionsResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecruitmentListPositionsResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecruitmentListPositionsResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RecruitmentListPositionsResponseDataInner>() {
           @Override
           public void write(JsonWriter out, RecruitmentListPositionsResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RecruitmentListPositionsResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RecruitmentListPositionsResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecruitmentListPositionsResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecruitmentListPositionsResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to RecruitmentListPositionsResponseDataInner
  */
  public static RecruitmentListPositionsResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecruitmentListPositionsResponseDataInner.class);
  }

 /**
  * Convert an instance of RecruitmentListPositionsResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

