/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * IntegrationsImportNewStartersListResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class IntegrationsImportNewStartersListResponseData {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private Double employeeId;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employee_number";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private Double employeeNumber;

  public static final String SERIALIZED_NAME_WORK_START_DATE = "work_start_date";
  @SerializedName(SERIALIZED_NAME_WORK_START_DATE)
  private String workStartDate;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_PERSONAL_CODE = "personal_code";
  @SerializedName(SERIALIZED_NAME_PERSONAL_CODE)
  private String personalCode;

  public static final String SERIALIZED_NAME_SOCIAL_SECURITY_CODE = "social_security_code";
  @SerializedName(SERIALIZED_NAME_SOCIAL_SECURITY_CODE)
  private String socialSecurityCode;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_HOME_CITY = "home_city";
  @SerializedName(SERIALIZED_NAME_HOME_CITY)
  private String homeCity;

  public static final String SERIALIZED_NAME_COUNTRY_ID = "country_id";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ID)
  private String countryId;

  public static final String SERIALIZED_NAME_NPD = "npd";
  @SerializedName(SERIALIZED_NAME_NPD)
  private String npd;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Double status;

  public IntegrationsImportNewStartersListResponseData() {
  }

  public IntegrationsImportNewStartersListResponseData employeeId(Double employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

  public IntegrationsImportNewStartersListResponseData employeeId(Integer employeeId) {
    
    
    
    
    this.employeeId = employeeId.doubleValue();
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(Double employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public IntegrationsImportNewStartersListResponseData employeeNumber(Double employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

  public IntegrationsImportNewStartersListResponseData employeeNumber(Integer employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber.doubleValue();
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123", value = "")

  public Double getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(Double employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public IntegrationsImportNewStartersListResponseData workStartDate(String workStartDate) {
    
    
    
    
    this.workStartDate = workStartDate;
    return this;
  }

   /**
   * Get workStartDate
   * @return workStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-10-10T00:00:00.000Z", value = "")

  public String getWorkStartDate() {
    return workStartDate;
  }


  public void setWorkStartDate(String workStartDate) {
    
    
    
    this.workStartDate = workStartDate;
  }


  public IntegrationsImportNewStartersListResponseData firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John", value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public IntegrationsImportNewStartersListResponseData lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Doe", value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public IntegrationsImportNewStartersListResponseData gender(String gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "male", value = "")

  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    
    
    
    this.gender = gender;
  }


  public IntegrationsImportNewStartersListResponseData personalCode(String personalCode) {
    
    
    
    
    this.personalCode = personalCode;
    return this;
  }

   /**
   * Get personalCode
   * @return personalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "personal code (custom_field)", value = "")

  public String getPersonalCode() {
    return personalCode;
  }


  public void setPersonalCode(String personalCode) {
    
    
    
    this.personalCode = personalCode;
  }


  public IntegrationsImportNewStartersListResponseData socialSecurityCode(String socialSecurityCode) {
    
    
    
    
    this.socialSecurityCode = socialSecurityCode;
    return this;
  }

   /**
   * Get socialSecurityCode
   * @return socialSecurityCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "social security code (custom_field)", value = "")

  public String getSocialSecurityCode() {
    return socialSecurityCode;
  }


  public void setSocialSecurityCode(String socialSecurityCode) {
    
    
    
    this.socialSecurityCode = socialSecurityCode;
  }


  public IntegrationsImportNewStartersListResponseData address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Street 1, City", value = "")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public IntegrationsImportNewStartersListResponseData homeCity(String homeCity) {
    
    
    
    
    this.homeCity = homeCity;
    return this;
  }

   /**
   * Get homeCity
   * @return homeCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "employee home city (custom_field)", value = "")

  public String getHomeCity() {
    return homeCity;
  }


  public void setHomeCity(String homeCity) {
    
    
    
    this.homeCity = homeCity;
  }


  public IntegrationsImportNewStartersListResponseData countryId(String countryId) {
    
    
    
    
    this.countryId = countryId;
    return this;
  }

   /**
   * Get countryId
   * @return countryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "country id (GB)", value = "")

  public String getCountryId() {
    return countryId;
  }


  public void setCountryId(String countryId) {
    
    
    
    this.countryId = countryId;
  }


  public IntegrationsImportNewStartersListResponseData npd(String npd) {
    
    
    
    
    this.npd = npd;
    return this;
  }

   /**
   * Get npd
   * @return npd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NPD", value = "")

  public String getNpd() {
    return npd;
  }


  public void setNpd(String npd) {
    
    
    
    this.npd = npd;
  }


  public IntegrationsImportNewStartersListResponseData email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "test@test.com", value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public IntegrationsImportNewStartersListResponseData status(Double status) {
    
    
    
    
    this.status = status;
    return this;
  }

  public IntegrationsImportNewStartersListResponseData status(Integer status) {
    
    
    
    
    this.status = status.doubleValue();
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getStatus() {
    return status;
  }


  public void setStatus(Double status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IntegrationsImportNewStartersListResponseData instance itself
   */
  public IntegrationsImportNewStartersListResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationsImportNewStartersListResponseData integrationsImportNewStartersListResponseData = (IntegrationsImportNewStartersListResponseData) o;
    return Objects.equals(this.employeeId, integrationsImportNewStartersListResponseData.employeeId) &&
        Objects.equals(this.employeeNumber, integrationsImportNewStartersListResponseData.employeeNumber) &&
        Objects.equals(this.workStartDate, integrationsImportNewStartersListResponseData.workStartDate) &&
        Objects.equals(this.firstName, integrationsImportNewStartersListResponseData.firstName) &&
        Objects.equals(this.lastName, integrationsImportNewStartersListResponseData.lastName) &&
        Objects.equals(this.gender, integrationsImportNewStartersListResponseData.gender) &&
        Objects.equals(this.personalCode, integrationsImportNewStartersListResponseData.personalCode) &&
        Objects.equals(this.socialSecurityCode, integrationsImportNewStartersListResponseData.socialSecurityCode) &&
        Objects.equals(this.address, integrationsImportNewStartersListResponseData.address) &&
        Objects.equals(this.homeCity, integrationsImportNewStartersListResponseData.homeCity) &&
        Objects.equals(this.countryId, integrationsImportNewStartersListResponseData.countryId) &&
        Objects.equals(this.npd, integrationsImportNewStartersListResponseData.npd) &&
        Objects.equals(this.email, integrationsImportNewStartersListResponseData.email) &&
        Objects.equals(this.status, integrationsImportNewStartersListResponseData.status)&&
        Objects.equals(this.additionalProperties, integrationsImportNewStartersListResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, employeeNumber, workStartDate, firstName, lastName, gender, personalCode, socialSecurityCode, address, homeCity, countryId, npd, email, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationsImportNewStartersListResponseData {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    workStartDate: ").append(toIndentedString(workStartDate)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    personalCode: ").append(toIndentedString(personalCode)).append("\n");
    sb.append("    socialSecurityCode: ").append(toIndentedString(socialSecurityCode)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    homeCity: ").append(toIndentedString(homeCity)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    npd: ").append(toIndentedString(npd)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employee_id");
    openapiFields.add("employee_number");
    openapiFields.add("work_start_date");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("gender");
    openapiFields.add("personal_code");
    openapiFields.add("social_security_code");
    openapiFields.add("address");
    openapiFields.add("home_city");
    openapiFields.add("country_id");
    openapiFields.add("npd");
    openapiFields.add("email");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IntegrationsImportNewStartersListResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IntegrationsImportNewStartersListResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationsImportNewStartersListResponseData is not found in the empty JSON string", IntegrationsImportNewStartersListResponseData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("work_start_date") != null && !jsonObj.get("work_start_date").isJsonNull()) && !jsonObj.get("work_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_start_date").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("personal_code") != null && !jsonObj.get("personal_code").isJsonNull()) && !jsonObj.get("personal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personal_code").toString()));
      }
      if ((jsonObj.get("social_security_code") != null && !jsonObj.get("social_security_code").isJsonNull()) && !jsonObj.get("social_security_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `social_security_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("social_security_code").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("home_city") != null && !jsonObj.get("home_city").isJsonNull()) && !jsonObj.get("home_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_city").toString()));
      }
      if ((jsonObj.get("country_id") != null && !jsonObj.get("country_id").isJsonNull()) && !jsonObj.get("country_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_id").toString()));
      }
      if ((jsonObj.get("npd") != null && !jsonObj.get("npd").isJsonNull()) && !jsonObj.get("npd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `npd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("npd").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationsImportNewStartersListResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationsImportNewStartersListResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationsImportNewStartersListResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationsImportNewStartersListResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationsImportNewStartersListResponseData>() {
           @Override
           public void write(JsonWriter out, IntegrationsImportNewStartersListResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationsImportNewStartersListResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             IntegrationsImportNewStartersListResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntegrationsImportNewStartersListResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntegrationsImportNewStartersListResponseData
  * @throws IOException if the JSON string is invalid with respect to IntegrationsImportNewStartersListResponseData
  */
  public static IntegrationsImportNewStartersListResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationsImportNewStartersListResponseData.class);
  }

 /**
  * Convert an instance of IntegrationsImportNewStartersListResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

