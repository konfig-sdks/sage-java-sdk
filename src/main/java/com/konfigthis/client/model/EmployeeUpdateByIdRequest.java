/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeUpdateByIdRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeUpdateByIdRequest {
  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_WORK_START_DATE = "work_start_date";
  @SerializedName(SERIALIZED_NAME_WORK_START_DATE)
  private String workStartDate;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Integer locationId;

  public static final String SERIALIZED_NAME_TEAM_ID = "team_id";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Integer teamId;

  public static final String SERIALIZED_NAME_LEADER_ID = "leader_id";
  @SerializedName(SERIALIZED_NAME_LEADER_ID)
  private Integer leaderId;

  public static final String SERIALIZED_NAME_POSITION_ID = "position_id";
  @SerializedName(SERIALIZED_NAME_POSITION_ID)
  private Integer positionId;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employee_number";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_APPROVER_IDS = "approver_ids";
  @SerializedName(SERIALIZED_NAME_APPROVER_IDS)
  private List<Integer> approverIds = null;

  public static final String SERIALIZED_NAME_SELECTED_LEAVE_TYPES = "selected_leave_types";
  @SerializedName(SERIALIZED_NAME_SELECTED_LEAVE_TYPES)
  private List<Integer> selectedLeaveTypes = null;

  public EmployeeUpdateByIdRequest() {
  }

  public EmployeeUpdateByIdRequest firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jane", value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public EmployeeUpdateByIdRequest lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Doe", value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public EmployeeUpdateByIdRequest workStartDate(String workStartDate) {
    
    
    
    
    this.workStartDate = workStartDate;
    return this;
  }

   /**
   * Get workStartDate
   * @return workStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-28", value = "")

  public String getWorkStartDate() {
    return workStartDate;
  }


  public void setWorkStartDate(String workStartDate) {
    
    
    
    this.workStartDate = workStartDate;
  }


  public EmployeeUpdateByIdRequest locationId(Integer locationId) {
    
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * Get locationId
   * @return locationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Integer getLocationId() {
    return locationId;
  }


  public void setLocationId(Integer locationId) {
    
    
    
    this.locationId = locationId;
  }


  public EmployeeUpdateByIdRequest teamId(Integer teamId) {
    
    
    
    
    this.teamId = teamId;
    return this;
  }

   /**
   * Get teamId
   * @return teamId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "")

  public Integer getTeamId() {
    return teamId;
  }


  public void setTeamId(Integer teamId) {
    
    
    
    this.teamId = teamId;
  }


  public EmployeeUpdateByIdRequest leaderId(Integer leaderId) {
    
    
    
    
    this.leaderId = leaderId;
    return this;
  }

   /**
   * Get leaderId
   * @return leaderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "")

  public Integer getLeaderId() {
    return leaderId;
  }


  public void setLeaderId(Integer leaderId) {
    
    
    
    this.leaderId = leaderId;
  }


  public EmployeeUpdateByIdRequest positionId(Integer positionId) {
    
    
    
    
    this.positionId = positionId;
    return this;
  }

   /**
   * Get positionId
   * @return positionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "101", value = "")

  public Integer getPositionId() {
    return positionId;
  }


  public void setPositionId(Integer positionId) {
    
    
    
    this.positionId = positionId;
  }


  public EmployeeUpdateByIdRequest employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0123456", value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public EmployeeUpdateByIdRequest approverIds(List<Integer> approverIds) {
    
    
    
    
    this.approverIds = approverIds;
    return this;
  }

  public EmployeeUpdateByIdRequest addApproverIdsItem(Integer approverIdsItem) {
    if (this.approverIds == null) {
      this.approverIds = new ArrayList<>();
    }
    this.approverIds.add(approverIdsItem);
    return this;
  }

   /**
   * Get approverIds
   * @return approverIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getApproverIds() {
    return approverIds;
  }


  public void setApproverIds(List<Integer> approverIds) {
    
    
    
    this.approverIds = approverIds;
  }


  public EmployeeUpdateByIdRequest selectedLeaveTypes(List<Integer> selectedLeaveTypes) {
    
    
    
    
    this.selectedLeaveTypes = selectedLeaveTypes;
    return this;
  }

  public EmployeeUpdateByIdRequest addSelectedLeaveTypesItem(Integer selectedLeaveTypesItem) {
    if (this.selectedLeaveTypes == null) {
      this.selectedLeaveTypes = new ArrayList<>();
    }
    this.selectedLeaveTypes.add(selectedLeaveTypesItem);
    return this;
  }

   /**
   * Get selectedLeaveTypes
   * @return selectedLeaveTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getSelectedLeaveTypes() {
    return selectedLeaveTypes;
  }


  public void setSelectedLeaveTypes(List<Integer> selectedLeaveTypes) {
    
    
    
    this.selectedLeaveTypes = selectedLeaveTypes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeUpdateByIdRequest instance itself
   */
  public EmployeeUpdateByIdRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeUpdateByIdRequest employeeUpdateByIdRequest = (EmployeeUpdateByIdRequest) o;
    return Objects.equals(this.firstName, employeeUpdateByIdRequest.firstName) &&
        Objects.equals(this.lastName, employeeUpdateByIdRequest.lastName) &&
        Objects.equals(this.workStartDate, employeeUpdateByIdRequest.workStartDate) &&
        Objects.equals(this.locationId, employeeUpdateByIdRequest.locationId) &&
        Objects.equals(this.teamId, employeeUpdateByIdRequest.teamId) &&
        Objects.equals(this.leaderId, employeeUpdateByIdRequest.leaderId) &&
        Objects.equals(this.positionId, employeeUpdateByIdRequest.positionId) &&
        Objects.equals(this.employeeNumber, employeeUpdateByIdRequest.employeeNumber) &&
        Objects.equals(this.approverIds, employeeUpdateByIdRequest.approverIds) &&
        Objects.equals(this.selectedLeaveTypes, employeeUpdateByIdRequest.selectedLeaveTypes)&&
        Objects.equals(this.additionalProperties, employeeUpdateByIdRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, workStartDate, locationId, teamId, leaderId, positionId, employeeNumber, approverIds, selectedLeaveTypes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeUpdateByIdRequest {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    workStartDate: ").append(toIndentedString(workStartDate)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    leaderId: ").append(toIndentedString(leaderId)).append("\n");
    sb.append("    positionId: ").append(toIndentedString(positionId)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    approverIds: ").append(toIndentedString(approverIds)).append("\n");
    sb.append("    selectedLeaveTypes: ").append(toIndentedString(selectedLeaveTypes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("work_start_date");
    openapiFields.add("location_id");
    openapiFields.add("team_id");
    openapiFields.add("leader_id");
    openapiFields.add("position_id");
    openapiFields.add("employee_number");
    openapiFields.add("approver_ids");
    openapiFields.add("selected_leave_types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeUpdateByIdRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeUpdateByIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeUpdateByIdRequest is not found in the empty JSON string", EmployeeUpdateByIdRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("work_start_date") != null && !jsonObj.get("work_start_date").isJsonNull()) && !jsonObj.get("work_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_start_date").toString()));
      }
      if ((jsonObj.get("employee_number") != null && !jsonObj.get("employee_number").isJsonNull()) && !jsonObj.get("employee_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_number").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("approver_ids") != null && !jsonObj.get("approver_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `approver_ids` to be an array in the JSON string but got `%s`", jsonObj.get("approver_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("selected_leave_types") != null && !jsonObj.get("selected_leave_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selected_leave_types` to be an array in the JSON string but got `%s`", jsonObj.get("selected_leave_types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeUpdateByIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeUpdateByIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeUpdateByIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeUpdateByIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeUpdateByIdRequest>() {
           @Override
           public void write(JsonWriter out, EmployeeUpdateByIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeUpdateByIdRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeUpdateByIdRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeUpdateByIdRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeUpdateByIdRequest
  * @throws IOException if the JSON string is invalid with respect to EmployeeUpdateByIdRequest
  */
  public static EmployeeUpdateByIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeUpdateByIdRequest.class);
  }

 /**
  * Convert an instance of EmployeeUpdateByIdRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

