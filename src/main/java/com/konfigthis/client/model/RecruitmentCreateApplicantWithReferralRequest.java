/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RecruitmentCreateApplicantWithReferralRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RecruitmentCreateApplicantWithReferralRequest {
  public static final String SERIALIZED_NAME_SEND_THANK_YOU_EMAIL = "send_thank_you_email";
  @SerializedName(SERIALIZED_NAME_SEND_THANK_YOU_EMAIL)
  private String sendThankYouEmail;

  public static final String SERIALIZED_NAME_APPLICANT_FIRST_NAME = "applicant[first_name]";
  @SerializedName(SERIALIZED_NAME_APPLICANT_FIRST_NAME)
  private String applicantFirstName;

  public static final String SERIALIZED_NAME_APPLICANT_LAST_NAME = "applicant[last_name]";
  @SerializedName(SERIALIZED_NAME_APPLICANT_LAST_NAME)
  private String applicantLastName;

  public static final String SERIALIZED_NAME_APPLICANT_EMAIL = "applicant[email]";
  @SerializedName(SERIALIZED_NAME_APPLICANT_EMAIL)
  private String applicantEmail;

  public static final String SERIALIZED_NAME_APPLICANT_REFERRAL = "applicant[referral]";
  @SerializedName(SERIALIZED_NAME_APPLICANT_REFERRAL)
  private String applicantReferral;

  public static final String SERIALIZED_NAME_APPLICANT_PHONE_NUMBER = "applicant[phone_number]";
  @SerializedName(SERIALIZED_NAME_APPLICANT_PHONE_NUMBER)
  private String applicantPhoneNumber;

  public static final String SERIALIZED_NAME_APPLICANT_SOURCE = "applicant[source]";
  @SerializedName(SERIALIZED_NAME_APPLICANT_SOURCE)
  private String applicantSource;

  public static final String SERIALIZED_NAME_APPLICANT_ADDRESS = "applicant[address]";
  @SerializedName(SERIALIZED_NAME_APPLICANT_ADDRESS)
  private String applicantAddress;

  public static final String SERIALIZED_NAME_APPLICANT_SUMMARY = "applicant[summary]";
  @SerializedName(SERIALIZED_NAME_APPLICANT_SUMMARY)
  private String applicantSummary;

  public static final String SERIALIZED_NAME_APPLICANT_ATTACHMENT = "applicant[attachment]";
  @SerializedName(SERIALIZED_NAME_APPLICANT_ATTACHMENT)
  private File applicantAttachment;

  public RecruitmentCreateApplicantWithReferralRequest() {
  }

  public RecruitmentCreateApplicantWithReferralRequest sendThankYouEmail(String sendThankYouEmail) {
    
    
    
    
    this.sendThankYouEmail = sendThankYouEmail;
    return this;
  }

   /**
   * &#39;true&#39; to send thank you email to applicant
   * @return sendThankYouEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "'true' to send thank you email to applicant")

  public String getSendThankYouEmail() {
    return sendThankYouEmail;
  }


  public void setSendThankYouEmail(String sendThankYouEmail) {
    
    
    
    this.sendThankYouEmail = sendThankYouEmail;
  }


  public RecruitmentCreateApplicantWithReferralRequest applicantFirstName(String applicantFirstName) {
    
    
    
    
    this.applicantFirstName = applicantFirstName;
    return this;
  }

   /**
   * Get applicantFirstName
   * @return applicantFirstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getApplicantFirstName() {
    return applicantFirstName;
  }


  public void setApplicantFirstName(String applicantFirstName) {
    
    
    
    this.applicantFirstName = applicantFirstName;
  }


  public RecruitmentCreateApplicantWithReferralRequest applicantLastName(String applicantLastName) {
    
    
    
    
    this.applicantLastName = applicantLastName;
    return this;
  }

   /**
   * Get applicantLastName
   * @return applicantLastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicantLastName() {
    return applicantLastName;
  }


  public void setApplicantLastName(String applicantLastName) {
    
    
    
    this.applicantLastName = applicantLastName;
  }


  public RecruitmentCreateApplicantWithReferralRequest applicantEmail(String applicantEmail) {
    
    
    
    
    this.applicantEmail = applicantEmail;
    return this;
  }

   /**
   * Get applicantEmail
   * @return applicantEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicantEmail() {
    return applicantEmail;
  }


  public void setApplicantEmail(String applicantEmail) {
    
    
    
    this.applicantEmail = applicantEmail;
  }


  public RecruitmentCreateApplicantWithReferralRequest applicantReferral(String applicantReferral) {
    
    
    
    
    this.applicantReferral = applicantReferral;
    return this;
  }

   /**
   * Get applicantReferral
   * @return applicantReferral
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicantReferral() {
    return applicantReferral;
  }


  public void setApplicantReferral(String applicantReferral) {
    
    
    
    this.applicantReferral = applicantReferral;
  }


  public RecruitmentCreateApplicantWithReferralRequest applicantPhoneNumber(String applicantPhoneNumber) {
    
    
    
    
    this.applicantPhoneNumber = applicantPhoneNumber;
    return this;
  }

   /**
   * Get applicantPhoneNumber
   * @return applicantPhoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicantPhoneNumber() {
    return applicantPhoneNumber;
  }


  public void setApplicantPhoneNumber(String applicantPhoneNumber) {
    
    
    
    this.applicantPhoneNumber = applicantPhoneNumber;
  }


  public RecruitmentCreateApplicantWithReferralRequest applicantSource(String applicantSource) {
    
    
    
    
    this.applicantSource = applicantSource;
    return this;
  }

   /**
   * Get applicantSource
   * @return applicantSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicantSource() {
    return applicantSource;
  }


  public void setApplicantSource(String applicantSource) {
    
    
    
    this.applicantSource = applicantSource;
  }


  public RecruitmentCreateApplicantWithReferralRequest applicantAddress(String applicantAddress) {
    
    
    
    
    this.applicantAddress = applicantAddress;
    return this;
  }

   /**
   * Get applicantAddress
   * @return applicantAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicantAddress() {
    return applicantAddress;
  }


  public void setApplicantAddress(String applicantAddress) {
    
    
    
    this.applicantAddress = applicantAddress;
  }


  public RecruitmentCreateApplicantWithReferralRequest applicantSummary(String applicantSummary) {
    
    
    
    
    this.applicantSummary = applicantSummary;
    return this;
  }

   /**
   * Get applicantSummary
   * @return applicantSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApplicantSummary() {
    return applicantSummary;
  }


  public void setApplicantSummary(String applicantSummary) {
    
    
    
    this.applicantSummary = applicantSummary;
  }


  public RecruitmentCreateApplicantWithReferralRequest applicantAttachment(File applicantAttachment) {
    
    
    
    
    this.applicantAttachment = applicantAttachment;
    return this;
  }

   /**
   * The file to upload.
   * @return applicantAttachment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The file to upload.")

  public File getApplicantAttachment() {
    return applicantAttachment;
  }


  public void setApplicantAttachment(File applicantAttachment) {
    
    
    
    this.applicantAttachment = applicantAttachment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RecruitmentCreateApplicantWithReferralRequest instance itself
   */
  public RecruitmentCreateApplicantWithReferralRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecruitmentCreateApplicantWithReferralRequest recruitmentCreateApplicantWithReferralRequest = (RecruitmentCreateApplicantWithReferralRequest) o;
    return Objects.equals(this.sendThankYouEmail, recruitmentCreateApplicantWithReferralRequest.sendThankYouEmail) &&
        Objects.equals(this.applicantFirstName, recruitmentCreateApplicantWithReferralRequest.applicantFirstName) &&
        Objects.equals(this.applicantLastName, recruitmentCreateApplicantWithReferralRequest.applicantLastName) &&
        Objects.equals(this.applicantEmail, recruitmentCreateApplicantWithReferralRequest.applicantEmail) &&
        Objects.equals(this.applicantReferral, recruitmentCreateApplicantWithReferralRequest.applicantReferral) &&
        Objects.equals(this.applicantPhoneNumber, recruitmentCreateApplicantWithReferralRequest.applicantPhoneNumber) &&
        Objects.equals(this.applicantSource, recruitmentCreateApplicantWithReferralRequest.applicantSource) &&
        Objects.equals(this.applicantAddress, recruitmentCreateApplicantWithReferralRequest.applicantAddress) &&
        Objects.equals(this.applicantSummary, recruitmentCreateApplicantWithReferralRequest.applicantSummary) &&
        Objects.equals(this.applicantAttachment, recruitmentCreateApplicantWithReferralRequest.applicantAttachment)&&
        Objects.equals(this.additionalProperties, recruitmentCreateApplicantWithReferralRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sendThankYouEmail, applicantFirstName, applicantLastName, applicantEmail, applicantReferral, applicantPhoneNumber, applicantSource, applicantAddress, applicantSummary, applicantAttachment, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecruitmentCreateApplicantWithReferralRequest {\n");
    sb.append("    sendThankYouEmail: ").append(toIndentedString(sendThankYouEmail)).append("\n");
    sb.append("    applicantFirstName: ").append(toIndentedString(applicantFirstName)).append("\n");
    sb.append("    applicantLastName: ").append(toIndentedString(applicantLastName)).append("\n");
    sb.append("    applicantEmail: ").append(toIndentedString(applicantEmail)).append("\n");
    sb.append("    applicantReferral: ").append(toIndentedString(applicantReferral)).append("\n");
    sb.append("    applicantPhoneNumber: ").append(toIndentedString(applicantPhoneNumber)).append("\n");
    sb.append("    applicantSource: ").append(toIndentedString(applicantSource)).append("\n");
    sb.append("    applicantAddress: ").append(toIndentedString(applicantAddress)).append("\n");
    sb.append("    applicantSummary: ").append(toIndentedString(applicantSummary)).append("\n");
    sb.append("    applicantAttachment: ").append(toIndentedString(applicantAttachment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("send_thank_you_email");
    openapiFields.add("applicant[first_name]");
    openapiFields.add("applicant[last_name]");
    openapiFields.add("applicant[email]");
    openapiFields.add("applicant[referral]");
    openapiFields.add("applicant[phone_number]");
    openapiFields.add("applicant[source]");
    openapiFields.add("applicant[address]");
    openapiFields.add("applicant[summary]");
    openapiFields.add("applicant[attachment]");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("applicant[first_name]");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RecruitmentCreateApplicantWithReferralRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RecruitmentCreateApplicantWithReferralRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecruitmentCreateApplicantWithReferralRequest is not found in the empty JSON string", RecruitmentCreateApplicantWithReferralRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecruitmentCreateApplicantWithReferralRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("send_thank_you_email") != null && !jsonObj.get("send_thank_you_email").isJsonNull()) && !jsonObj.get("send_thank_you_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `send_thank_you_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("send_thank_you_email").toString()));
      }
      if (!jsonObj.get("applicant[first_name]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicant[first_name]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicant[first_name]").toString()));
      }
      if ((jsonObj.get("applicant[last_name]") != null && !jsonObj.get("applicant[last_name]").isJsonNull()) && !jsonObj.get("applicant[last_name]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicant[last_name]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicant[last_name]").toString()));
      }
      if ((jsonObj.get("applicant[email]") != null && !jsonObj.get("applicant[email]").isJsonNull()) && !jsonObj.get("applicant[email]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicant[email]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicant[email]").toString()));
      }
      if ((jsonObj.get("applicant[referral]") != null && !jsonObj.get("applicant[referral]").isJsonNull()) && !jsonObj.get("applicant[referral]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicant[referral]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicant[referral]").toString()));
      }
      if ((jsonObj.get("applicant[phone_number]") != null && !jsonObj.get("applicant[phone_number]").isJsonNull()) && !jsonObj.get("applicant[phone_number]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicant[phone_number]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicant[phone_number]").toString()));
      }
      if ((jsonObj.get("applicant[source]") != null && !jsonObj.get("applicant[source]").isJsonNull()) && !jsonObj.get("applicant[source]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicant[source]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicant[source]").toString()));
      }
      if ((jsonObj.get("applicant[address]") != null && !jsonObj.get("applicant[address]").isJsonNull()) && !jsonObj.get("applicant[address]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicant[address]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicant[address]").toString()));
      }
      if ((jsonObj.get("applicant[summary]") != null && !jsonObj.get("applicant[summary]").isJsonNull()) && !jsonObj.get("applicant[summary]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicant[summary]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicant[summary]").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecruitmentCreateApplicantWithReferralRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecruitmentCreateApplicantWithReferralRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecruitmentCreateApplicantWithReferralRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecruitmentCreateApplicantWithReferralRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RecruitmentCreateApplicantWithReferralRequest>() {
           @Override
           public void write(JsonWriter out, RecruitmentCreateApplicantWithReferralRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RecruitmentCreateApplicantWithReferralRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RecruitmentCreateApplicantWithReferralRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecruitmentCreateApplicantWithReferralRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecruitmentCreateApplicantWithReferralRequest
  * @throws IOException if the JSON string is invalid with respect to RecruitmentCreateApplicantWithReferralRequest
  */
  public static RecruitmentCreateApplicantWithReferralRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecruitmentCreateApplicantWithReferralRequest.class);
  }

 /**
  * Convert an instance of RecruitmentCreateApplicantWithReferralRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

