/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OnboardingCreateNewTaskRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OnboardingCreateNewTaskRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_BOARDING_TASK_TEMPLATE_CATEGORY_ID = "boarding_task_template_category_id";
  @SerializedName(SERIALIZED_NAME_BOARDING_TASK_TEMPLATE_CATEGORY_ID)
  private Double boardingTaskTemplateCategoryId;

  public static final String SERIALIZED_NAME_DUE_IN = "due_in";
  @SerializedName(SERIALIZED_NAME_DUE_IN)
  private Double dueIn;

  /**
   * Default: self; leader - direct manager; employee - specific employee via assignee_id
   */
  @JsonAdapter(DefaultAssigneeTypeEnum.Adapter.class)
 public enum DefaultAssigneeTypeEnum {
    SELF("self"),
    
    LEADER("leader"),
    
    EMPLOYEE("employee");

    private String value;

    DefaultAssigneeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultAssigneeTypeEnum fromValue(String value) {
      for (DefaultAssigneeTypeEnum b : DefaultAssigneeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultAssigneeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultAssigneeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultAssigneeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultAssigneeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_ASSIGNEE_TYPE = "default_assignee_type";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ASSIGNEE_TYPE)
  private DefaultAssigneeTypeEnum defaultAssigneeType;

  public static final String SERIALIZED_NAME_ASSIGNEE_ID = "assignee_id";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_ID)
  private Double assigneeId;

  public static final String SERIALIZED_NAME_REQUIRE_ATTACHMENT = "require_attachment";
  @SerializedName(SERIALIZED_NAME_REQUIRE_ATTACHMENT)
  private String requireAttachment;

  public static final String SERIALIZED_NAME_ADD_AFTER = "add_after";
  @SerializedName(SERIALIZED_NAME_ADD_AFTER)
  private Double addAfter;

  public OnboardingCreateNewTaskRequest() {
  }

  public OnboardingCreateNewTaskRequest title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public OnboardingCreateNewTaskRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public OnboardingCreateNewTaskRequest boardingTaskTemplateCategoryId(Double boardingTaskTemplateCategoryId) {
    
    
    
    
    this.boardingTaskTemplateCategoryId = boardingTaskTemplateCategoryId;
    return this;
  }

  public OnboardingCreateNewTaskRequest boardingTaskTemplateCategoryId(Integer boardingTaskTemplateCategoryId) {
    
    
    
    
    this.boardingTaskTemplateCategoryId = boardingTaskTemplateCategoryId.doubleValue();
    return this;
  }

   /**
   * Get boardingTaskTemplateCategoryId
   * @return boardingTaskTemplateCategoryId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getBoardingTaskTemplateCategoryId() {
    return boardingTaskTemplateCategoryId;
  }


  public void setBoardingTaskTemplateCategoryId(Double boardingTaskTemplateCategoryId) {
    
    
    
    this.boardingTaskTemplateCategoryId = boardingTaskTemplateCategoryId;
  }


  public OnboardingCreateNewTaskRequest dueIn(Double dueIn) {
    
    
    
    
    this.dueIn = dueIn;
    return this;
  }

  public OnboardingCreateNewTaskRequest dueIn(Integer dueIn) {
    
    
    
    
    this.dueIn = dueIn.doubleValue();
    return this;
  }

   /**
   * Due date in days after employee start date
   * @return dueIn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "30", required = true, value = "Due date in days after employee start date")

  public Double getDueIn() {
    return dueIn;
  }


  public void setDueIn(Double dueIn) {
    
    
    
    this.dueIn = dueIn;
  }


  public OnboardingCreateNewTaskRequest defaultAssigneeType(DefaultAssigneeTypeEnum defaultAssigneeType) {
    
    
    
    
    this.defaultAssigneeType = defaultAssigneeType;
    return this;
  }

   /**
   * Default: self; leader - direct manager; employee - specific employee via assignee_id
   * @return defaultAssigneeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Default: self; leader - direct manager; employee - specific employee via assignee_id")

  public DefaultAssigneeTypeEnum getDefaultAssigneeType() {
    return defaultAssigneeType;
  }


  public void setDefaultAssigneeType(DefaultAssigneeTypeEnum defaultAssigneeType) {
    
    
    
    this.defaultAssigneeType = defaultAssigneeType;
  }


  public OnboardingCreateNewTaskRequest assigneeId(Double assigneeId) {
    
    
    
    
    this.assigneeId = assigneeId;
    return this;
  }

  public OnboardingCreateNewTaskRequest assigneeId(Integer assigneeId) {
    
    
    
    
    this.assigneeId = assigneeId.doubleValue();
    return this;
  }

   /**
   * Specific assignee if default_assignee_type is &#39;employee&#39;
   * @return assigneeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specific assignee if default_assignee_type is 'employee'")

  public Double getAssigneeId() {
    return assigneeId;
  }


  public void setAssigneeId(Double assigneeId) {
    
    
    
    this.assigneeId = assigneeId;
  }


  public OnboardingCreateNewTaskRequest requireAttachment(String requireAttachment) {
    
    
    
    
    this.requireAttachment = requireAttachment;
    return this;
  }

   /**
   * &#39;true&#39; to enabled required attachment
   * @return requireAttachment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "'true' to enabled required attachment")

  public String getRequireAttachment() {
    return requireAttachment;
  }


  public void setRequireAttachment(String requireAttachment) {
    
    
    
    this.requireAttachment = requireAttachment;
  }


  public OnboardingCreateNewTaskRequest addAfter(Double addAfter) {
    
    
    
    
    this.addAfter = addAfter;
    return this;
  }

  public OnboardingCreateNewTaskRequest addAfter(Integer addAfter) {
    
    
    
    
    this.addAfter = addAfter.doubleValue();
    return this;
  }

   /**
   * Task start date in days after employee start date
   * @return addAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Task start date in days after employee start date")

  public Double getAddAfter() {
    return addAfter;
  }


  public void setAddAfter(Double addAfter) {
    
    
    
    this.addAfter = addAfter;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OnboardingCreateNewTaskRequest instance itself
   */
  public OnboardingCreateNewTaskRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnboardingCreateNewTaskRequest onboardingCreateNewTaskRequest = (OnboardingCreateNewTaskRequest) o;
    return Objects.equals(this.title, onboardingCreateNewTaskRequest.title) &&
        Objects.equals(this.description, onboardingCreateNewTaskRequest.description) &&
        Objects.equals(this.boardingTaskTemplateCategoryId, onboardingCreateNewTaskRequest.boardingTaskTemplateCategoryId) &&
        Objects.equals(this.dueIn, onboardingCreateNewTaskRequest.dueIn) &&
        Objects.equals(this.defaultAssigneeType, onboardingCreateNewTaskRequest.defaultAssigneeType) &&
        Objects.equals(this.assigneeId, onboardingCreateNewTaskRequest.assigneeId) &&
        Objects.equals(this.requireAttachment, onboardingCreateNewTaskRequest.requireAttachment) &&
        Objects.equals(this.addAfter, onboardingCreateNewTaskRequest.addAfter)&&
        Objects.equals(this.additionalProperties, onboardingCreateNewTaskRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, boardingTaskTemplateCategoryId, dueIn, defaultAssigneeType, assigneeId, requireAttachment, addAfter, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnboardingCreateNewTaskRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    boardingTaskTemplateCategoryId: ").append(toIndentedString(boardingTaskTemplateCategoryId)).append("\n");
    sb.append("    dueIn: ").append(toIndentedString(dueIn)).append("\n");
    sb.append("    defaultAssigneeType: ").append(toIndentedString(defaultAssigneeType)).append("\n");
    sb.append("    assigneeId: ").append(toIndentedString(assigneeId)).append("\n");
    sb.append("    requireAttachment: ").append(toIndentedString(requireAttachment)).append("\n");
    sb.append("    addAfter: ").append(toIndentedString(addAfter)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("boarding_task_template_category_id");
    openapiFields.add("due_in");
    openapiFields.add("default_assignee_type");
    openapiFields.add("assignee_id");
    openapiFields.add("require_attachment");
    openapiFields.add("add_after");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("boarding_task_template_category_id");
    openapiRequiredFields.add("due_in");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OnboardingCreateNewTaskRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OnboardingCreateNewTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnboardingCreateNewTaskRequest is not found in the empty JSON string", OnboardingCreateNewTaskRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OnboardingCreateNewTaskRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("default_assignee_type") != null && !jsonObj.get("default_assignee_type").isJsonNull()) && !jsonObj.get("default_assignee_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_assignee_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_assignee_type").toString()));
      }
      if ((jsonObj.get("require_attachment") != null && !jsonObj.get("require_attachment").isJsonNull()) && !jsonObj.get("require_attachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `require_attachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("require_attachment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnboardingCreateNewTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnboardingCreateNewTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnboardingCreateNewTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnboardingCreateNewTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OnboardingCreateNewTaskRequest>() {
           @Override
           public void write(JsonWriter out, OnboardingCreateNewTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OnboardingCreateNewTaskRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OnboardingCreateNewTaskRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OnboardingCreateNewTaskRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OnboardingCreateNewTaskRequest
  * @throws IOException if the JSON string is invalid with respect to OnboardingCreateNewTaskRequest
  */
  public static OnboardingCreateNewTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnboardingCreateNewTaskRequest.class);
  }

 /**
  * Convert an instance of OnboardingCreateNewTaskRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

