/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * IntegrationsTransferAppointmentInfoResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class IntegrationsTransferAppointmentInfoResponseData {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private Double employeeId;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employee_number";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private Double employeeNumber;

  public static final String SERIALIZED_NAME_WORK_START_DATE = "work_start_date";
  @SerializedName(SERIALIZED_NAME_WORK_START_DATE)
  private String workStartDate;

  public static final String SERIALIZED_NAME_POSITION_START_DATE = "position_start_date";
  @SerializedName(SERIALIZED_NAME_POSITION_START_DATE)
  private String positionStartDate;

  public static final String SERIALIZED_NAME_LAST_POSITION_END_DATE = "last_position_end_date";
  @SerializedName(SERIALIZED_NAME_LAST_POSITION_END_DATE)
  private String lastPositionEndDate;

  public static final String SERIALIZED_NAME_COST_CENTER_CODE = "cost_center_code";
  @SerializedName(SERIALIZED_NAME_COST_CENTER_CODE)
  private String costCenterCode;

  public static final String SERIALIZED_NAME_POSITION_ID = "position_id";
  @SerializedName(SERIALIZED_NAME_POSITION_ID)
  private Double positionId;

  public static final String SERIALIZED_NAME_SCHEDULE_ID = "schedule_id";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_ID)
  private String scheduleId;

  public static final String SERIALIZED_NAME_EMPLOYMENT_STATUS = "employment_status";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_STATUS)
  private String employmentStatus;

  public static final String SERIALIZED_NAME_JOB_TYPE = "job_type";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private String jobType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Double status;

  public IntegrationsTransferAppointmentInfoResponseData() {
  }

  public IntegrationsTransferAppointmentInfoResponseData employeeId(Double employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

  public IntegrationsTransferAppointmentInfoResponseData employeeId(Integer employeeId) {
    
    
    
    
    this.employeeId = employeeId.doubleValue();
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(Double employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public IntegrationsTransferAppointmentInfoResponseData employeeNumber(Double employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

  public IntegrationsTransferAppointmentInfoResponseData employeeNumber(Integer employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber.doubleValue();
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123", value = "")

  public Double getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(Double employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public IntegrationsTransferAppointmentInfoResponseData workStartDate(String workStartDate) {
    
    
    
    
    this.workStartDate = workStartDate;
    return this;
  }

   /**
   * Get workStartDate
   * @return workStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-10", value = "")

  public String getWorkStartDate() {
    return workStartDate;
  }


  public void setWorkStartDate(String workStartDate) {
    
    
    
    this.workStartDate = workStartDate;
  }


  public IntegrationsTransferAppointmentInfoResponseData positionStartDate(String positionStartDate) {
    
    
    
    
    this.positionStartDate = positionStartDate;
    return this;
  }

   /**
   * Get positionStartDate
   * @return positionStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-10-10", value = "")

  public String getPositionStartDate() {
    return positionStartDate;
  }


  public void setPositionStartDate(String positionStartDate) {
    
    
    
    this.positionStartDate = positionStartDate;
  }


  public IntegrationsTransferAppointmentInfoResponseData lastPositionEndDate(String lastPositionEndDate) {
    
    
    
    
    this.lastPositionEndDate = lastPositionEndDate;
    return this;
  }

   /**
   * Get lastPositionEndDate
   * @return lastPositionEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-09-10", value = "")

  public String getLastPositionEndDate() {
    return lastPositionEndDate;
  }


  public void setLastPositionEndDate(String lastPositionEndDate) {
    
    
    
    this.lastPositionEndDate = lastPositionEndDate;
  }


  public IntegrationsTransferAppointmentInfoResponseData costCenterCode(String costCenterCode) {
    
    
    
    
    this.costCenterCode = costCenterCode;
    return this;
  }

   /**
   * Get costCenterCode
   * @return costCenterCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "cost center code (custom_field)", value = "")

  public String getCostCenterCode() {
    return costCenterCode;
  }


  public void setCostCenterCode(String costCenterCode) {
    
    
    
    this.costCenterCode = costCenterCode;
  }


  public IntegrationsTransferAppointmentInfoResponseData positionId(Double positionId) {
    
    
    
    
    this.positionId = positionId;
    return this;
  }

  public IntegrationsTransferAppointmentInfoResponseData positionId(Integer positionId) {
    
    
    
    
    this.positionId = positionId.doubleValue();
    return this;
  }

   /**
   * Get positionId
   * @return positionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getPositionId() {
    return positionId;
  }


  public void setPositionId(Double positionId) {
    
    
    
    this.positionId = positionId;
  }


  public IntegrationsTransferAppointmentInfoResponseData scheduleId(String scheduleId) {
    
    
    
    
    this.scheduleId = scheduleId;
    return this;
  }

   /**
   * Get scheduleId
   * @return scheduleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "scheduled id (custom_field)", value = "")

  public String getScheduleId() {
    return scheduleId;
  }


  public void setScheduleId(String scheduleId) {
    
    
    
    this.scheduleId = scheduleId;
  }


  public IntegrationsTransferAppointmentInfoResponseData employmentStatus(String employmentStatus) {
    
    
    
    
    this.employmentStatus = employmentStatus;
    return this;
  }

   /**
   * Get employmentStatus
   * @return employmentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Full-time", value = "")

  public String getEmploymentStatus() {
    return employmentStatus;
  }


  public void setEmploymentStatus(String employmentStatus) {
    
    
    
    this.employmentStatus = employmentStatus;
  }


  public IntegrationsTransferAppointmentInfoResponseData jobType(String jobType) {
    
    
    
    
    this.jobType = jobType;
    return this;
  }

   /**
   * Get jobType
   * @return jobType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "job type (custom_field)", value = "")

  public String getJobType() {
    return jobType;
  }


  public void setJobType(String jobType) {
    
    
    
    this.jobType = jobType;
  }


  public IntegrationsTransferAppointmentInfoResponseData status(Double status) {
    
    
    
    
    this.status = status;
    return this;
  }

  public IntegrationsTransferAppointmentInfoResponseData status(Integer status) {
    
    
    
    
    this.status = status.doubleValue();
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getStatus() {
    return status;
  }


  public void setStatus(Double status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IntegrationsTransferAppointmentInfoResponseData instance itself
   */
  public IntegrationsTransferAppointmentInfoResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationsTransferAppointmentInfoResponseData integrationsTransferAppointmentInfoResponseData = (IntegrationsTransferAppointmentInfoResponseData) o;
    return Objects.equals(this.employeeId, integrationsTransferAppointmentInfoResponseData.employeeId) &&
        Objects.equals(this.employeeNumber, integrationsTransferAppointmentInfoResponseData.employeeNumber) &&
        Objects.equals(this.workStartDate, integrationsTransferAppointmentInfoResponseData.workStartDate) &&
        Objects.equals(this.positionStartDate, integrationsTransferAppointmentInfoResponseData.positionStartDate) &&
        Objects.equals(this.lastPositionEndDate, integrationsTransferAppointmentInfoResponseData.lastPositionEndDate) &&
        Objects.equals(this.costCenterCode, integrationsTransferAppointmentInfoResponseData.costCenterCode) &&
        Objects.equals(this.positionId, integrationsTransferAppointmentInfoResponseData.positionId) &&
        Objects.equals(this.scheduleId, integrationsTransferAppointmentInfoResponseData.scheduleId) &&
        Objects.equals(this.employmentStatus, integrationsTransferAppointmentInfoResponseData.employmentStatus) &&
        Objects.equals(this.jobType, integrationsTransferAppointmentInfoResponseData.jobType) &&
        Objects.equals(this.status, integrationsTransferAppointmentInfoResponseData.status)&&
        Objects.equals(this.additionalProperties, integrationsTransferAppointmentInfoResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, employeeNumber, workStartDate, positionStartDate, lastPositionEndDate, costCenterCode, positionId, scheduleId, employmentStatus, jobType, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationsTransferAppointmentInfoResponseData {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    workStartDate: ").append(toIndentedString(workStartDate)).append("\n");
    sb.append("    positionStartDate: ").append(toIndentedString(positionStartDate)).append("\n");
    sb.append("    lastPositionEndDate: ").append(toIndentedString(lastPositionEndDate)).append("\n");
    sb.append("    costCenterCode: ").append(toIndentedString(costCenterCode)).append("\n");
    sb.append("    positionId: ").append(toIndentedString(positionId)).append("\n");
    sb.append("    scheduleId: ").append(toIndentedString(scheduleId)).append("\n");
    sb.append("    employmentStatus: ").append(toIndentedString(employmentStatus)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employee_id");
    openapiFields.add("employee_number");
    openapiFields.add("work_start_date");
    openapiFields.add("position_start_date");
    openapiFields.add("last_position_end_date");
    openapiFields.add("cost_center_code");
    openapiFields.add("position_id");
    openapiFields.add("schedule_id");
    openapiFields.add("employment_status");
    openapiFields.add("job_type");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IntegrationsTransferAppointmentInfoResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IntegrationsTransferAppointmentInfoResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationsTransferAppointmentInfoResponseData is not found in the empty JSON string", IntegrationsTransferAppointmentInfoResponseData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("work_start_date") != null && !jsonObj.get("work_start_date").isJsonNull()) && !jsonObj.get("work_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_start_date").toString()));
      }
      if ((jsonObj.get("position_start_date") != null && !jsonObj.get("position_start_date").isJsonNull()) && !jsonObj.get("position_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position_start_date").toString()));
      }
      if ((jsonObj.get("last_position_end_date") != null && !jsonObj.get("last_position_end_date").isJsonNull()) && !jsonObj.get("last_position_end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_position_end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_position_end_date").toString()));
      }
      if ((jsonObj.get("cost_center_code") != null && !jsonObj.get("cost_center_code").isJsonNull()) && !jsonObj.get("cost_center_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost_center_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost_center_code").toString()));
      }
      if ((jsonObj.get("schedule_id") != null && !jsonObj.get("schedule_id").isJsonNull()) && !jsonObj.get("schedule_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule_id").toString()));
      }
      if ((jsonObj.get("employment_status") != null && !jsonObj.get("employment_status").isJsonNull()) && !jsonObj.get("employment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employment_status").toString()));
      }
      if ((jsonObj.get("job_type") != null && !jsonObj.get("job_type").isJsonNull()) && !jsonObj.get("job_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationsTransferAppointmentInfoResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationsTransferAppointmentInfoResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationsTransferAppointmentInfoResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationsTransferAppointmentInfoResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationsTransferAppointmentInfoResponseData>() {
           @Override
           public void write(JsonWriter out, IntegrationsTransferAppointmentInfoResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationsTransferAppointmentInfoResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             IntegrationsTransferAppointmentInfoResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntegrationsTransferAppointmentInfoResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntegrationsTransferAppointmentInfoResponseData
  * @throws IOException if the JSON string is invalid with respect to IntegrationsTransferAppointmentInfoResponseData
  */
  public static IntegrationsTransferAppointmentInfoResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationsTransferAppointmentInfoResponseData.class);
  }

 /**
  * Convert an instance of IntegrationsTransferAppointmentInfoResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

