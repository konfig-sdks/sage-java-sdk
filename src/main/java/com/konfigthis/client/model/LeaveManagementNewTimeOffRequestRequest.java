/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LeaveManagementNewTimeOffRequestRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LeaveManagementNewTimeOffRequestRequest {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    SINGLE("single"),
    
    MULTI("multi");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_TIME_OFF_POLICY_ID = "time_off_policy_id";
  @SerializedName(SERIALIZED_NAME_TIME_OFF_POLICY_ID)
  private Integer timeOffPolicyId;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private Integer employeeId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DATE_FROM = "date_from";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private String dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "date_to";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private String dateTo;

  /**
   * required if type is single
   */
  @JsonAdapter(PartOfDayEnum.Adapter.class)
 public enum PartOfDayEnum {
    ALL_DAY("all_day"),
    
    FIRST_PART_OF_DAY("first_part_of_day"),
    
    SECOND_PART_OF_DAY("second_part_of_day"),
    
    SPECIFIC_TIMESPAN("specific_timespan");

    private String value;

    PartOfDayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PartOfDayEnum fromValue(String value) {
      for (PartOfDayEnum b : PartOfDayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PartOfDayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PartOfDayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PartOfDayEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PartOfDayEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PART_OF_DAY = "part_of_day";
  @SerializedName(SERIALIZED_NAME_PART_OF_DAY)
  private PartOfDayEnum partOfDay;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Double hours;

  public static final String SERIALIZED_NAME_TIME_FROM = "time_from";
  @SerializedName(SERIALIZED_NAME_TIME_FROM)
  private String timeFrom;

  public static final String SERIALIZED_NAME_TIME_TO = "time_to";
  @SerializedName(SERIALIZED_NAME_TIME_TO)
  private String timeTo;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public LeaveManagementNewTimeOffRequestRequest() {
  }

  public LeaveManagementNewTimeOffRequestRequest type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public LeaveManagementNewTimeOffRequestRequest timeOffPolicyId(Integer timeOffPolicyId) {
    
    
    
    
    this.timeOffPolicyId = timeOffPolicyId;
    return this;
  }

   /**
   * Get timeOffPolicyId
   * @return timeOffPolicyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTimeOffPolicyId() {
    return timeOffPolicyId;
  }


  public void setTimeOffPolicyId(Integer timeOffPolicyId) {
    
    
    
    this.timeOffPolicyId = timeOffPolicyId;
  }


  public LeaveManagementNewTimeOffRequestRequest employeeId(Integer employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(Integer employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public LeaveManagementNewTimeOffRequestRequest date(String date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * format: YYYY-MM-DD; required if type is single
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "format: YYYY-MM-DD; required if type is single")

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    
    
    
    this.date = date;
  }


  public LeaveManagementNewTimeOffRequestRequest dateFrom(String dateFrom) {
    
    
    
    
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * format: YYYY-MM-DD; required if type is multi
   * @return dateFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "format: YYYY-MM-DD; required if type is multi")

  public String getDateFrom() {
    return dateFrom;
  }


  public void setDateFrom(String dateFrom) {
    
    
    
    this.dateFrom = dateFrom;
  }


  public LeaveManagementNewTimeOffRequestRequest dateTo(String dateTo) {
    
    
    
    
    this.dateTo = dateTo;
    return this;
  }

   /**
   * format: YYYY-MM-DD; required if type is multi
   * @return dateTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "format: YYYY-MM-DD; required if type is multi")

  public String getDateTo() {
    return dateTo;
  }


  public void setDateTo(String dateTo) {
    
    
    
    this.dateTo = dateTo;
  }


  public LeaveManagementNewTimeOffRequestRequest partOfDay(PartOfDayEnum partOfDay) {
    
    
    
    
    this.partOfDay = partOfDay;
    return this;
  }

   /**
   * required if type is single
   * @return partOfDay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "required if type is single")

  public PartOfDayEnum getPartOfDay() {
    return partOfDay;
  }


  public void setPartOfDay(PartOfDayEnum partOfDay) {
    
    
    
    this.partOfDay = partOfDay;
  }


  public LeaveManagementNewTimeOffRequestRequest hours(Double hours) {
    
    
    
    
    this.hours = hours;
    return this;
  }

  public LeaveManagementNewTimeOffRequestRequest hours(Integer hours) {
    
    
    
    
    this.hours = hours.doubleValue();
    return this;
  }

   /**
   * required if type is single &amp; part_of_day is first_part_of_day or second_part_of_day
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "required if type is single & part_of_day is first_part_of_day or second_part_of_day")

  public Double getHours() {
    return hours;
  }


  public void setHours(Double hours) {
    
    
    
    this.hours = hours;
  }


  public LeaveManagementNewTimeOffRequestRequest timeFrom(String timeFrom) {
    
    
    
    
    this.timeFrom = timeFrom;
    return this;
  }

   /**
   * format: H:M; required if part_of_day is specific_timespan
   * @return timeFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "07:30", value = "format: H:M; required if part_of_day is specific_timespan")

  public String getTimeFrom() {
    return timeFrom;
  }


  public void setTimeFrom(String timeFrom) {
    
    
    
    this.timeFrom = timeFrom;
  }


  public LeaveManagementNewTimeOffRequestRequest timeTo(String timeTo) {
    
    
    
    
    this.timeTo = timeTo;
    return this;
  }

   /**
   * format: H:M; required if part_of_day is specific_timespan
   * @return timeTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "900", value = "format: H:M; required if part_of_day is specific_timespan")

  public String getTimeTo() {
    return timeTo;
  }


  public void setTimeTo(String timeTo) {
    
    
    
    this.timeTo = timeTo;
  }


  public LeaveManagementNewTimeOffRequestRequest details(String details) {
    
    
    
    
    this.details = details;
    return this;
  }

   /**
   * required based on policy settings
   * @return details
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "required based on policy settings")

  public String getDetails() {
    return details;
  }


  public void setDetails(String details) {
    
    
    
    this.details = details;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LeaveManagementNewTimeOffRequestRequest instance itself
   */
  public LeaveManagementNewTimeOffRequestRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaveManagementNewTimeOffRequestRequest leaveManagementNewTimeOffRequestRequest = (LeaveManagementNewTimeOffRequestRequest) o;
    return Objects.equals(this.type, leaveManagementNewTimeOffRequestRequest.type) &&
        Objects.equals(this.timeOffPolicyId, leaveManagementNewTimeOffRequestRequest.timeOffPolicyId) &&
        Objects.equals(this.employeeId, leaveManagementNewTimeOffRequestRequest.employeeId) &&
        Objects.equals(this.date, leaveManagementNewTimeOffRequestRequest.date) &&
        Objects.equals(this.dateFrom, leaveManagementNewTimeOffRequestRequest.dateFrom) &&
        Objects.equals(this.dateTo, leaveManagementNewTimeOffRequestRequest.dateTo) &&
        Objects.equals(this.partOfDay, leaveManagementNewTimeOffRequestRequest.partOfDay) &&
        Objects.equals(this.hours, leaveManagementNewTimeOffRequestRequest.hours) &&
        Objects.equals(this.timeFrom, leaveManagementNewTimeOffRequestRequest.timeFrom) &&
        Objects.equals(this.timeTo, leaveManagementNewTimeOffRequestRequest.timeTo) &&
        Objects.equals(this.details, leaveManagementNewTimeOffRequestRequest.details)&&
        Objects.equals(this.additionalProperties, leaveManagementNewTimeOffRequestRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, timeOffPolicyId, employeeId, date, dateFrom, dateTo, partOfDay, hours, timeFrom, timeTo, details, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaveManagementNewTimeOffRequestRequest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    timeOffPolicyId: ").append(toIndentedString(timeOffPolicyId)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    partOfDay: ").append(toIndentedString(partOfDay)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    timeFrom: ").append(toIndentedString(timeFrom)).append("\n");
    sb.append("    timeTo: ").append(toIndentedString(timeTo)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("time_off_policy_id");
    openapiFields.add("employee_id");
    openapiFields.add("date");
    openapiFields.add("date_from");
    openapiFields.add("date_to");
    openapiFields.add("part_of_day");
    openapiFields.add("hours");
    openapiFields.add("time_from");
    openapiFields.add("time_to");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("time_off_policy_id");
    openapiRequiredFields.add("employee_id");
    openapiRequiredFields.add("part_of_day");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LeaveManagementNewTimeOffRequestRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LeaveManagementNewTimeOffRequestRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaveManagementNewTimeOffRequestRequest is not found in the empty JSON string", LeaveManagementNewTimeOffRequestRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LeaveManagementNewTimeOffRequestRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("date_from") != null && !jsonObj.get("date_from").isJsonNull()) && !jsonObj.get("date_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_from").toString()));
      }
      if ((jsonObj.get("date_to") != null && !jsonObj.get("date_to").isJsonNull()) && !jsonObj.get("date_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_to").toString()));
      }
      if (!jsonObj.get("part_of_day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `part_of_day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("part_of_day").toString()));
      }
      if ((jsonObj.get("time_from") != null && !jsonObj.get("time_from").isJsonNull()) && !jsonObj.get("time_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_from").toString()));
      }
      if ((jsonObj.get("time_to") != null && !jsonObj.get("time_to").isJsonNull()) && !jsonObj.get("time_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_to").toString()));
      }
      if ((jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) && !jsonObj.get("details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaveManagementNewTimeOffRequestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaveManagementNewTimeOffRequestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaveManagementNewTimeOffRequestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaveManagementNewTimeOffRequestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaveManagementNewTimeOffRequestRequest>() {
           @Override
           public void write(JsonWriter out, LeaveManagementNewTimeOffRequestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaveManagementNewTimeOffRequestRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LeaveManagementNewTimeOffRequestRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LeaveManagementNewTimeOffRequestRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LeaveManagementNewTimeOffRequestRequest
  * @throws IOException if the JSON string is invalid with respect to LeaveManagementNewTimeOffRequestRequest
  */
  public static LeaveManagementNewTimeOffRequestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaveManagementNewTimeOffRequestRequest.class);
  }

 /**
  * Convert an instance of LeaveManagementNewTimeOffRequestRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

