/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * IntegrationsTransferContractInformationToVikarinaResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class IntegrationsTransferContractInformationToVikarinaResponseData {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private Double employeeId;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employee_number";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private Double employeeNumber;

  public static final String SERIALIZED_NAME_WORK_START_DATE = "work_start_date";
  @SerializedName(SERIALIZED_NAME_WORK_START_DATE)
  private String workStartDate;

  public static final String SERIALIZED_NAME_CONTRACT_NUMBER = "contract_number";
  @SerializedName(SERIALIZED_NAME_CONTRACT_NUMBER)
  private String contractNumber;

  public static final String SERIALIZED_NAME_TERMINATION_DATE = "termination_date";
  @SerializedName(SERIALIZED_NAME_TERMINATION_DATE)
  private String terminationDate;

  public static final String SERIALIZED_NAME_EMPLOYMENT_STATUS = "employment_status";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_STATUS)
  private String employmentStatus;

  public static final String SERIALIZED_NAME_CONTRACT_TYPE = "contract_type";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE)
  private String contractType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Double status;

  public IntegrationsTransferContractInformationToVikarinaResponseData() {
  }

  public IntegrationsTransferContractInformationToVikarinaResponseData employeeId(Double employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

  public IntegrationsTransferContractInformationToVikarinaResponseData employeeId(Integer employeeId) {
    
    
    
    
    this.employeeId = employeeId.doubleValue();
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(Double employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public IntegrationsTransferContractInformationToVikarinaResponseData employeeNumber(Double employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

  public IntegrationsTransferContractInformationToVikarinaResponseData employeeNumber(Integer employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber.doubleValue();
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123", value = "")

  public Double getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(Double employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public IntegrationsTransferContractInformationToVikarinaResponseData workStartDate(String workStartDate) {
    
    
    
    
    this.workStartDate = workStartDate;
    return this;
  }

   /**
   * Get workStartDate
   * @return workStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-10-10T00:00:00.000Z", value = "")

  public String getWorkStartDate() {
    return workStartDate;
  }


  public void setWorkStartDate(String workStartDate) {
    
    
    
    this.workStartDate = workStartDate;
  }


  public IntegrationsTransferContractInformationToVikarinaResponseData contractNumber(String contractNumber) {
    
    
    
    
    this.contractNumber = contractNumber;
    return this;
  }

   /**
   * Get contractNumber
   * @return contractNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "contract number (custom_field)", value = "")

  public String getContractNumber() {
    return contractNumber;
  }


  public void setContractNumber(String contractNumber) {
    
    
    
    this.contractNumber = contractNumber;
  }


  public IntegrationsTransferContractInformationToVikarinaResponseData terminationDate(String terminationDate) {
    
    
    
    
    this.terminationDate = terminationDate;
    return this;
  }

   /**
   * Get terminationDate
   * @return terminationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-10-11T00:00:00.000Z", value = "")

  public String getTerminationDate() {
    return terminationDate;
  }


  public void setTerminationDate(String terminationDate) {
    
    
    
    this.terminationDate = terminationDate;
  }


  public IntegrationsTransferContractInformationToVikarinaResponseData employmentStatus(String employmentStatus) {
    
    
    
    
    this.employmentStatus = employmentStatus;
    return this;
  }

   /**
   * Get employmentStatus
   * @return employmentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Full-time", value = "")

  public String getEmploymentStatus() {
    return employmentStatus;
  }


  public void setEmploymentStatus(String employmentStatus) {
    
    
    
    this.employmentStatus = employmentStatus;
  }


  public IntegrationsTransferContractInformationToVikarinaResponseData contractType(String contractType) {
    
    
    
    
    this.contractType = contractType;
    return this;
  }

   /**
   * Get contractType
   * @return contractType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "contract type (custom_field)", value = "")

  public String getContractType() {
    return contractType;
  }


  public void setContractType(String contractType) {
    
    
    
    this.contractType = contractType;
  }


  public IntegrationsTransferContractInformationToVikarinaResponseData status(Double status) {
    
    
    
    
    this.status = status;
    return this;
  }

  public IntegrationsTransferContractInformationToVikarinaResponseData status(Integer status) {
    
    
    
    
    this.status = status.doubleValue();
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getStatus() {
    return status;
  }


  public void setStatus(Double status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IntegrationsTransferContractInformationToVikarinaResponseData instance itself
   */
  public IntegrationsTransferContractInformationToVikarinaResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationsTransferContractInformationToVikarinaResponseData integrationsTransferContractInformationToVikarinaResponseData = (IntegrationsTransferContractInformationToVikarinaResponseData) o;
    return Objects.equals(this.employeeId, integrationsTransferContractInformationToVikarinaResponseData.employeeId) &&
        Objects.equals(this.employeeNumber, integrationsTransferContractInformationToVikarinaResponseData.employeeNumber) &&
        Objects.equals(this.workStartDate, integrationsTransferContractInformationToVikarinaResponseData.workStartDate) &&
        Objects.equals(this.contractNumber, integrationsTransferContractInformationToVikarinaResponseData.contractNumber) &&
        Objects.equals(this.terminationDate, integrationsTransferContractInformationToVikarinaResponseData.terminationDate) &&
        Objects.equals(this.employmentStatus, integrationsTransferContractInformationToVikarinaResponseData.employmentStatus) &&
        Objects.equals(this.contractType, integrationsTransferContractInformationToVikarinaResponseData.contractType) &&
        Objects.equals(this.status, integrationsTransferContractInformationToVikarinaResponseData.status)&&
        Objects.equals(this.additionalProperties, integrationsTransferContractInformationToVikarinaResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, employeeNumber, workStartDate, contractNumber, terminationDate, employmentStatus, contractType, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationsTransferContractInformationToVikarinaResponseData {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    workStartDate: ").append(toIndentedString(workStartDate)).append("\n");
    sb.append("    contractNumber: ").append(toIndentedString(contractNumber)).append("\n");
    sb.append("    terminationDate: ").append(toIndentedString(terminationDate)).append("\n");
    sb.append("    employmentStatus: ").append(toIndentedString(employmentStatus)).append("\n");
    sb.append("    contractType: ").append(toIndentedString(contractType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employee_id");
    openapiFields.add("employee_number");
    openapiFields.add("work_start_date");
    openapiFields.add("contract_number");
    openapiFields.add("termination_date");
    openapiFields.add("employment_status");
    openapiFields.add("contract_type");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IntegrationsTransferContractInformationToVikarinaResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IntegrationsTransferContractInformationToVikarinaResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationsTransferContractInformationToVikarinaResponseData is not found in the empty JSON string", IntegrationsTransferContractInformationToVikarinaResponseData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("work_start_date") != null && !jsonObj.get("work_start_date").isJsonNull()) && !jsonObj.get("work_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_start_date").toString()));
      }
      if ((jsonObj.get("contract_number") != null && !jsonObj.get("contract_number").isJsonNull()) && !jsonObj.get("contract_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_number").toString()));
      }
      if ((jsonObj.get("termination_date") != null && !jsonObj.get("termination_date").isJsonNull()) && !jsonObj.get("termination_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termination_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termination_date").toString()));
      }
      if ((jsonObj.get("employment_status") != null && !jsonObj.get("employment_status").isJsonNull()) && !jsonObj.get("employment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employment_status").toString()));
      }
      if ((jsonObj.get("contract_type") != null && !jsonObj.get("contract_type").isJsonNull()) && !jsonObj.get("contract_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationsTransferContractInformationToVikarinaResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationsTransferContractInformationToVikarinaResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationsTransferContractInformationToVikarinaResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationsTransferContractInformationToVikarinaResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationsTransferContractInformationToVikarinaResponseData>() {
           @Override
           public void write(JsonWriter out, IntegrationsTransferContractInformationToVikarinaResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationsTransferContractInformationToVikarinaResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             IntegrationsTransferContractInformationToVikarinaResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntegrationsTransferContractInformationToVikarinaResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntegrationsTransferContractInformationToVikarinaResponseData
  * @throws IOException if the JSON string is invalid with respect to IntegrationsTransferContractInformationToVikarinaResponseData
  */
  public static IntegrationsTransferContractInformationToVikarinaResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationsTransferContractInformationToVikarinaResponseData.class);
  }

 /**
  * Convert an instance of IntegrationsTransferContractInformationToVikarinaResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

