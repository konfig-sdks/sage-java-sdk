/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LeaveManagementListTimeOffPoliciesResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LeaveManagementListTimeOffPoliciesResponseDataInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_DO_NOT_ACCRUE = "do_not_accrue";
  @SerializedName(SERIALIZED_NAME_DO_NOT_ACCRUE)
  private Boolean doNotAccrue;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_DEFAULT_ALLOWANCE = "default_allowance";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ALLOWANCE)
  private String defaultAllowance;

  public static final String SERIALIZED_NAME_MAX_CARRYOVER = "max_carryover";
  @SerializedName(SERIALIZED_NAME_MAX_CARRYOVER)
  private String maxCarryover;

  public static final String SERIALIZED_NAME_ACCRUE_TYPE = "accrue_type";
  @SerializedName(SERIALIZED_NAME_ACCRUE_TYPE)
  private String accrueType;

  public LeaveManagementListTimeOffPoliciesResponseDataInner() {
  }

  public LeaveManagementListTimeOffPoliciesResponseDataInner id(Double id) {
    
    
    
    
    this.id = id;
    return this;
  }

  public LeaveManagementListTimeOffPoliciesResponseDataInner id(Integer id) {
    
    
    
    
    this.id = id.doubleValue();
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getId() {
    return id;
  }


  public void setId(Double id) {
    
    
    
    this.id = id;
  }


  public LeaveManagementListTimeOffPoliciesResponseDataInner name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Vacation", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public LeaveManagementListTimeOffPoliciesResponseDataInner color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#49B284", value = "")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public LeaveManagementListTimeOffPoliciesResponseDataInner doNotAccrue(Boolean doNotAccrue) {
    
    
    
    
    this.doNotAccrue = doNotAccrue;
    return this;
  }

   /**
   * Get doNotAccrue
   * @return doNotAccrue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getDoNotAccrue() {
    return doNotAccrue;
  }


  public void setDoNotAccrue(Boolean doNotAccrue) {
    
    
    
    this.doNotAccrue = doNotAccrue;
  }


  public LeaveManagementListTimeOffPoliciesResponseDataInner unit(String unit) {
    
    
    
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "days", value = "")

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    
    
    
    this.unit = unit;
  }


  public LeaveManagementListTimeOffPoliciesResponseDataInner defaultAllowance(String defaultAllowance) {
    
    
    
    
    this.defaultAllowance = defaultAllowance;
    return this;
  }

   /**
   * Get defaultAllowance
   * @return defaultAllowance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "26", value = "")

  public String getDefaultAllowance() {
    return defaultAllowance;
  }


  public void setDefaultAllowance(String defaultAllowance) {
    
    
    
    this.defaultAllowance = defaultAllowance;
  }


  public LeaveManagementListTimeOffPoliciesResponseDataInner maxCarryover(String maxCarryover) {
    
    
    
    
    this.maxCarryover = maxCarryover;
    return this;
  }

   /**
   * Get maxCarryover
   * @return maxCarryover
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100.0", value = "")

  public String getMaxCarryover() {
    return maxCarryover;
  }


  public void setMaxCarryover(String maxCarryover) {
    
    
    
    this.maxCarryover = maxCarryover;
  }


  public LeaveManagementListTimeOffPoliciesResponseDataInner accrueType(String accrueType) {
    
    
    
    
    this.accrueType = accrueType;
    return this;
  }

   /**
   * Get accrueType
   * @return accrueType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "yearly", value = "")

  public String getAccrueType() {
    return accrueType;
  }


  public void setAccrueType(String accrueType) {
    
    
    
    this.accrueType = accrueType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LeaveManagementListTimeOffPoliciesResponseDataInner instance itself
   */
  public LeaveManagementListTimeOffPoliciesResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaveManagementListTimeOffPoliciesResponseDataInner leaveManagementListTimeOffPoliciesResponseDataInner = (LeaveManagementListTimeOffPoliciesResponseDataInner) o;
    return Objects.equals(this.id, leaveManagementListTimeOffPoliciesResponseDataInner.id) &&
        Objects.equals(this.name, leaveManagementListTimeOffPoliciesResponseDataInner.name) &&
        Objects.equals(this.color, leaveManagementListTimeOffPoliciesResponseDataInner.color) &&
        Objects.equals(this.doNotAccrue, leaveManagementListTimeOffPoliciesResponseDataInner.doNotAccrue) &&
        Objects.equals(this.unit, leaveManagementListTimeOffPoliciesResponseDataInner.unit) &&
        Objects.equals(this.defaultAllowance, leaveManagementListTimeOffPoliciesResponseDataInner.defaultAllowance) &&
        Objects.equals(this.maxCarryover, leaveManagementListTimeOffPoliciesResponseDataInner.maxCarryover) &&
        Objects.equals(this.accrueType, leaveManagementListTimeOffPoliciesResponseDataInner.accrueType)&&
        Objects.equals(this.additionalProperties, leaveManagementListTimeOffPoliciesResponseDataInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, color, doNotAccrue, unit, defaultAllowance, maxCarryover, accrueType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaveManagementListTimeOffPoliciesResponseDataInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    doNotAccrue: ").append(toIndentedString(doNotAccrue)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    defaultAllowance: ").append(toIndentedString(defaultAllowance)).append("\n");
    sb.append("    maxCarryover: ").append(toIndentedString(maxCarryover)).append("\n");
    sb.append("    accrueType: ").append(toIndentedString(accrueType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("color");
    openapiFields.add("do_not_accrue");
    openapiFields.add("unit");
    openapiFields.add("default_allowance");
    openapiFields.add("max_carryover");
    openapiFields.add("accrue_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LeaveManagementListTimeOffPoliciesResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LeaveManagementListTimeOffPoliciesResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaveManagementListTimeOffPoliciesResponseDataInner is not found in the empty JSON string", LeaveManagementListTimeOffPoliciesResponseDataInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if ((jsonObj.get("default_allowance") != null && !jsonObj.get("default_allowance").isJsonNull()) && !jsonObj.get("default_allowance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_allowance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_allowance").toString()));
      }
      if ((jsonObj.get("max_carryover") != null && !jsonObj.get("max_carryover").isJsonNull()) && !jsonObj.get("max_carryover").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_carryover` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_carryover").toString()));
      }
      if ((jsonObj.get("accrue_type") != null && !jsonObj.get("accrue_type").isJsonNull()) && !jsonObj.get("accrue_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrue_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrue_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaveManagementListTimeOffPoliciesResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaveManagementListTimeOffPoliciesResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaveManagementListTimeOffPoliciesResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaveManagementListTimeOffPoliciesResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaveManagementListTimeOffPoliciesResponseDataInner>() {
           @Override
           public void write(JsonWriter out, LeaveManagementListTimeOffPoliciesResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaveManagementListTimeOffPoliciesResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LeaveManagementListTimeOffPoliciesResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LeaveManagementListTimeOffPoliciesResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LeaveManagementListTimeOffPoliciesResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to LeaveManagementListTimeOffPoliciesResponseDataInner
  */
  public static LeaveManagementListTimeOffPoliciesResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaveManagementListTimeOffPoliciesResponseDataInner.class);
  }

 /**
  * Convert an instance of LeaveManagementListTimeOffPoliciesResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

