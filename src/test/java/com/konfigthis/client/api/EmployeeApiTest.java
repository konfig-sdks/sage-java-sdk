/*
 * Sage HR API
 * All requests are required to be sent to your subdomain. To learn how to enable API in your Sage HR account, please visit https://support.sage.hr/en/articles/3246469-how-does-cakehr-api-work
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmployeeCreateNewEmployeeRequest;
import com.konfigthis.client.model.EmployeeCreateNewEmployeeResponse;
import com.konfigthis.client.model.EmployeeGetByIdResponse;
import com.konfigthis.client.model.EmployeeGetCompensationsResponse;
import com.konfigthis.client.model.EmployeeGetCustomFieldsResponse;
import com.konfigthis.client.model.EmployeeGetTerminatedEmployeeResponse;
import com.konfigthis.client.model.EmployeeListActiveEmployeesResponse;
import com.konfigthis.client.model.EmployeeListTerminatedEmployeesResponse;
import com.konfigthis.client.model.EmployeeTerminateEmployeeRequest;
import com.konfigthis.client.model.EmployeeTerminateEmployeeResponse;
import com.konfigthis.client.model.EmployeeUpdateByIdRequest;
import com.konfigthis.client.model.EmployeeUpdateByIdResponse;
import com.konfigthis.client.model.EmployeeUpdateCustomFieldRequest;
import com.konfigthis.client.model.EmployeeUpdateCustomFieldResponse;
import com.konfigthis.client.model.LeaveManagementGetTimeOffBalancesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeeApi
 */
@Disabled
public class EmployeeApiTest {

    private static EmployeeApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeeApi(apiClient);
    }

    /**
     * Create new employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewEmployeeTest() throws ApiException {
        String email = null;
        String firstName = null;
        String lastName = null;
        String workStartDate = null;
        String sendEmail = null;
        EmployeeCreateNewEmployeeResponse response = api.createNewEmployee(email, firstName, lastName)
                .workStartDate(workStartDate)
                .sendEmail(sendEmail)
                .execute();
        // TODO: test validations
    }

    /**
     * Single active employee in company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Integer id = null;
        Boolean teamHistory = null;
        Boolean employmentStatusHistory = null;
        Boolean positionHistory = null;
        EmployeeGetByIdResponse response = api.getById(id)
                .teamHistory(teamHistory)
                .employmentStatusHistory(employmentStatusHistory)
                .positionHistory(positionHistory)
                .execute();
        // TODO: test validations
    }

    /**
     * Employee compensations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompensationsTest() throws ApiException {
        Integer id = null;
        EmployeeGetCompensationsResponse response = api.getCompensations(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Employee custom fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldsTest() throws ApiException {
        Integer id = null;
        EmployeeGetCustomFieldsResponse response = api.getCustomFields(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Single terminated employee in company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTerminatedEmployeeTest() throws ApiException {
        Integer id = null;
        EmployeeGetTerminatedEmployeeResponse response = api.getTerminatedEmployee(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Employee time off balances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeOffBalancesTest() throws ApiException {
        Integer id = null;
        LeaveManagementGetTimeOffBalancesResponse response = api.getTimeOffBalances(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List active employees in company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActiveEmployeesTest() throws ApiException {
        Integer page = null;
        Boolean teamHistory = null;
        Boolean employmentStatusHistory = null;
        Boolean positionHistory = null;
        EmployeeListActiveEmployeesResponse response = api.listActiveEmployees()
                .page(page)
                .teamHistory(teamHistory)
                .employmentStatusHistory(employmentStatusHistory)
                .positionHistory(positionHistory)
                .execute();
        // TODO: test validations
    }

    /**
     * List terminated employees in company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTerminatedEmployeesTest() throws ApiException {
        Integer page = null;
        EmployeeListTerminatedEmployeesResponse response = api.listTerminatedEmployees()
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Terminate employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void terminateEmployeeTest() throws ApiException {
        Integer id = null;
        String date = null;
        Double terminationReasonId = null;
        String comments = null;
        EmployeeTerminateEmployeeResponse response = api.terminateEmployee(id, date, terminationReasonId)
                .comments(comments)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        Integer id = null;
        String firstName = null;
        String lastName = null;
        String workStartDate = null;
        Integer locationId = null;
        Integer teamId = null;
        Integer leaderId = null;
        Integer positionId = null;
        String employeeNumber = null;
        List<Integer> approverIds = null;
        List<Integer> selectedLeaveTypes = null;
        EmployeeUpdateByIdResponse response = api.updateById(id)
                .firstName(firstName)
                .lastName(lastName)
                .workStartDate(workStartDate)
                .locationId(locationId)
                .teamId(teamId)
                .leaderId(leaderId)
                .positionId(positionId)
                .employeeNumber(employeeNumber)
                .approverIds(approverIds)
                .selectedLeaveTypes(selectedLeaveTypes)
                .execute();
        // TODO: test validations
    }

    /**
     * Update custom field
     *
     * Update employee custom field
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFieldTest() throws ApiException {
        Integer id = null;
        Integer customFieldId = null;
        String value = null;
        EmployeeUpdateCustomFieldResponse response = api.updateCustomField(id, customFieldId, value)
                .execute();
        // TODO: test validations
    }

}
